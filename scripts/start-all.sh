#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ MebelPlace
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/start-all.sh [--clean-db]

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

echo "üöÄ MebelPlace Startup Script"
echo "=============================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/.."
PROJECT_ROOT=$(pwd)

echo -e "${YELLOW}üìç Project root: ${PROJECT_ROOT}${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1 failed${NC}"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–æ–≤
echo ""
echo "üîç Checking environment files..."

if [ ! -f "${PROJECT_ROOT}/server/.env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  server/.env not found, copying from env.example${NC}"
    cp "${PROJECT_ROOT}/server/env.example" "${PROJECT_ROOT}/server/.env" 2>/dev/null || \
    cp "${PROJECT_ROOT}/server/env.production" "${PROJECT_ROOT}/server/.env" 2>/dev/null || \
    echo -e "${RED}‚ùå No .env template found${NC}"
fi

# –û—á–∏—Å—Ç–∫–∞ –ë–î –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
if [ "$1" == "--clean-db" ]; then
    echo ""
    echo "üóëÔ∏è  Cleaning database..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "${PROJECT_ROOT}/server/.env" ]; then
        export $(cat "${PROJECT_ROOT}/server/.env" | grep -v '^#' | xargs)
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
    PGPASSWORD=${DB_PASSWORD:-postgres} psql -h ${DB_HOST:-localhost} -U ${DB_USER:-postgres} -d ${DB_NAME:-mebelplace} -f "${PROJECT_ROOT}/scripts/clean-database.sql"
    check_success "Database cleaned"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo ""
echo "üõë Stopping old processes..."
pkill -f "node.*server/index.js" 2>/dev/null || true
pkill -f "vite" 2>/dev/null || true
sleep 2
check_success "Old processes stopped"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
echo ""
echo "üì¶ Installing server dependencies..."
cd "${PROJECT_ROOT}/server"
npm install --production=false
check_success "Server dependencies installed"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
echo ""
echo "üì¶ Installing client dependencies..."
cd "${PROJECT_ROOT}/client"
npm install
check_success "Client dependencies installed"

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
echo ""
echo "üìÅ Creating upload directories..."
cd "${PROJECT_ROOT}/server"
mkdir -p uploads/videos
mkdir -p uploads/order-photos
mkdir -p uploads/chat-files
mkdir -p uploads/avatars
mkdir -p logs
check_success "Upload directories created"

# –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥
echo ""
echo "üöÄ Starting backend server..."
cd "${PROJECT_ROOT}/server"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PM2
if command -v pm2 &> /dev/null; then
    echo "Using PM2 for process management"
    pm2 delete mebelplace-server 2>/dev/null || true
    pm2 start index.js --name mebelplace-server --watch --ignore-watch="node_modules uploads logs"
    check_success "Backend started with PM2"
else
    echo "PM2 not found, starting with nohup"
    nohup node index.js > logs/server.log 2>&1 &
    SERVER_PID=$!
    echo "Backend PID: $SERVER_PID"
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    if ps -p $SERVER_PID > /dev/null; then
        check_success "Backend started"
    else
        echo -e "${RED}‚ùå Backend failed to start. Check logs/server.log${NC}"
        exit 1
    fi
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
echo ""
echo "üé® Starting frontend..."
cd "${PROJECT_ROOT}/client"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
if [ "$2" == "--dev" ] || [ "$1" == "--dev" ]; then
    echo "Starting in development mode..."
    npm run dev &
    FRONTEND_PID=$!
    echo "Frontend PID: $FRONTEND_PID"
else
    echo "Building for production..."
    npm run build
    check_success "Frontend built"
    
    # –î–ª—è production —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ nginx
    echo -e "${YELLOW}‚ÑπÔ∏è  Frontend built. Serve dist/ folder with nginx${NC}"
fi

# –ñ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
echo ""
echo "‚è≥ Waiting for services to initialize..."
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±—ç–∫–µ–Ω–¥–∞
echo ""
echo "üîç Checking backend health..."
BACKEND_URL="http://localhost:3001"

for i in {1..10}; do
    if curl -sf "${BACKEND_URL}/api/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend is healthy!${NC}"
        break
    else
        if [ $i -eq 10 ]; then
            echo -e "${RED}‚ùå Backend health check failed${NC}"
            echo "Check server logs: tail -f ${PROJECT_ROOT}/server/logs/server.log"
            exit 1
        fi
        echo "Waiting for backend... ($i/10)"
        sleep 2
    fi
done

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "=============================="
echo -e "${GREEN}üéâ MebelPlace started successfully!${NC}"
echo "=============================="
echo ""
echo "üìä Service URLs:"
echo "  üîß Backend API:  http://localhost:3001/api"
echo "  üåê Frontend:     http://localhost:5173 (dev) or https://mebelplace.com.kz (prod)"
echo "  üè• Health check: http://localhost:3001/api/health"
echo ""
echo "üìù Logs:"
echo "  Server: tail -f ${PROJECT_ROOT}/server/logs/server.log"
if command -v pm2 &> /dev/null; then
    echo "  PM2: pm2 logs mebelplace-server"
fi
echo ""
echo "üõë To stop:"
if command -v pm2 &> /dev/null; then
    echo "  pm2 stop mebelplace-server"
else
    echo "  pkill -f 'node.*server/index.js'"
fi
echo "  pkill -f 'vite'"
echo ""

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
echo "üë• Test users (password: password123):"
echo "  Admin:  admin@mebelplace.kz"
echo "  Master: master1@mebelplace.kz"
echo "  User:   user1@mebelplace.kz"
echo ""

