const { chromium } = require('playwright');

// üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–°–¢ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –ü–†–û–ë–õ–ï–ú
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 200,  // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  concurrentUsers: 15,
  testDuration: 300,
  databaseCheckInterval: 30,
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 2000,
  realUIMode: true
};

console.log('üöÄ IMPROVED FULL FLOW TEST');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã + –≤–∏–¥–µ–æ)`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };
let existingUsers = [];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
let globalData = {
  createdOrders: [],
  createdVideos: [],
  activeChats: [],
  subscriptions: [],
  likes: [],
  comments: [],
  logins: [],
  searches: [],
  registrations: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
async function getExistingUsers() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const result = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT username, phone, role FROM users ORDER BY created_at DESC LIMIT 100;"');
    
    const lines = result.stdout.trim().split('\n');
    existingUsers = lines.map(line => {
      const parts = line.trim().split('|');
      if (parts.length >= 3) {
        return {
          username: parts[0].trim(),
          phone: parts[1].trim(),
          role: parts[2].trim()
        };
      }
      return null;
    }).filter(user => user !== null);
    
    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingUsers.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function testFullFlowWithUser(userIndex) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    let user;
    let isNewUser = false;
    
    if (userIndex < existingUsers.length) {
      user = existingUsers[userIndex];
      console.log(`üåê User ${userIndex}: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (${user.username})`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
      const phoneNumber = `+7777${String(userIndex).padStart(7, '0')}`;
      user = {
        username: `TestUser${userIndex}`,
        phone: phoneNumber,
        role: userIndex % 2 === 0 ? 'user' : 'user'
      };
      isNewUser = true;
      console.log(`üåê User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${user.username})`);
    }
    
    // 1. –õ–û–ì–ò–ù –ò–õ–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
    let loginSuccess = false;
    if (isNewUser) {
      loginSuccess = await registerNewUserImproved(page, userIndex, user);
    } else {
      loginSuccess = await loginExistingUser(page, userIndex, user);
    }
    
    if (!loginSuccess) {
      console.log(`‚ùå User ${userIndex}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É`);
      return;
    }
    
    // 2. –í–´–ü–û–õ–ù–Ø–ï–ú –ü–û–õ–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò
    await executeFullUserFlowImproved(page, userIndex, user);
    
    console.log(`üéâ User ${userIndex}: –ó–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerNewUserImproved(page, userIndex, user) {
  console.log(`üîê User ${userIndex}: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ ${user.username}`);
  
  try {
    await page.goto(`${config.targetUrl}/register`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    const pageTitle = await page.title();
    if (!pageTitle.includes('MebelPlace')) {
      console.log(`‚ùå User ${userIndex}: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å`);
      return false;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    const phoneInput = page.locator('input[placeholder="+7XXXXXXXXXX"]').first();
    if (await phoneInput.count() > 0) {
      await phoneInput.fill(user.phone);
      console.log(`‚úÖ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(500);
    } else {
      console.log(`‚ùå User ${userIndex}: –ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
      failedActions++;
      totalActions++;
      return false;
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ –∏–º–µ–Ω–∏ –±–æ–ª–µ–µ –≥–∏–±–∫–æ
    const nameInputs = await page.locator('input').all();
    let nameInput = null;
    
    for (let input of nameInputs) {
      const placeholder = await input.getAttribute('placeholder');
      const name = await input.getAttribute('name');
      if (placeholder && (placeholder.includes('–∏–º—è') || placeholder.includes('name') || placeholder.includes('–ò–º—è')) ||
          name && (name.includes('name') || name.includes('username'))) {
        nameInput = input;
        break;
      }
    }
    
    if (nameInput) {
      await nameInput.fill(user.username);
      console.log(`‚úÖ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –∏–º—è`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(500);
    } else {
      console.log(`‚ùå User ${userIndex}: –ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è –∏–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    const passwordInput = page.locator('input[type="password"]').first();
    if (await passwordInput.count() > 0) {
      await passwordInput.fill('testpass123');
      console.log(`‚úÖ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –ø–∞—Ä–æ–ª—å`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(500);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const submitButton = page.locator('button:has-text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), button[type="submit"]').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`‚úÖ User ${userIndex}: –û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions * 2);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const currentUrl = page.url();
    if (currentUrl.includes('/register')) {
      console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
      failedActions++;
      totalActions++;
      return false;
    } else {
      console.log(`‚úÖ User ${userIndex}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è`);
      successfulActions++;
      totalActions++;
      globalData.registrations.push({ userId: userIndex, username: user.username, timestamp: new Date() });
      return true;
    }
    
  } catch (error) {
    console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
    return false;
  }
}

// –õ–æ–≥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loginExistingUser(page, userIndex, user) {
  console.log(`üîê User ${userIndex}: –õ–æ–≥–∏–Ω–∏—Ç—Å—è –∫–∞–∫ ${user.username}`);
  
  try {
    await page.goto(`${config.targetUrl}/login`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.locator('input[placeholder="+7XXXXXXXXXX"]').fill(user.phone);
    await page.waitForTimeout(500);
    
    await page.locator('input[type="password"]').fill('testpass123');
    await page.waitForTimeout(500);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.locator('button:has-text("–í–æ–π—Ç–∏")').click();
    await page.waitForTimeout(config.delayBetweenActions * 2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞`);
      failedActions++;
      totalActions++;
      return false;
    } else {
      console.log(`‚úÖ User ${userIndex}: –£—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è`);
      successfulActions++;
      totalActions++;
      globalData.logins.push({ userId: userIndex, username: user.username, timestamp: new Date() });
      return true;
    }
    
  } catch (error) {
    console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
    return false;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function executeFullUserFlowImproved(page, userIndex, user) {
  console.log(`üë§ User ${userIndex}: –í—ã–ø–æ–ª–Ω—è–µ—Ç –£–õ–£–ß–®–ï–ù–ù–´–ô –§–õ–û–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø`);
  
  try {
    // 1. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
    console.log(`üë§ User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
    
    await page.goto(`${config.targetUrl}/orders/create`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userIndex}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderData = {
      title: `–ó–∞–∫–∞–∑ –æ—Ç ${user.username} - ${userIndex}`,
      description: `–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}. –ù—É–∂–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 –Ω–µ–¥–µ–ª–∏, –±—é–¥–∂–µ—Ç –¥–æ 200000 —Ç–µ–Ω–≥–µ. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≥–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞.`,
      location: `–ê–ª–º–∞—Ç—ã, —Ä–∞–π–æ–Ω ${userIndex % 10 + 1}`
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    const titleInput = page.locator('input[name="title"]');
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name="description"]');
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const locationInput = page.locator('input[name="location"]');
    if (await locationInput.count() > 0) {
      await locationInput.fill(orderData.location);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –ª–æ–∫–∞—Ü–∏—é`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userIndex}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      successfulActions++;
      totalActions++;
      
      globalData.createdOrders.push({
        id: `order_${userIndex}_${Date.now()}`,
        userId: userIndex,
        title: orderData.title,
        description: orderData.description,
        status: 'pending',
        createdAt: new Date()
      });
      
      await page.waitForTimeout(config.delayBetweenActions * 2);
    }
    
    // 2. –°–û–ó–î–ê–ù–ò–ï –í–ò–î–ï–û (–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)
    if (userIndex % 3 === 0) { // –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ
      console.log(`üé• User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ`);
      
      await page.goto(`${config.targetUrl}/create-video-ad`, { waitUntil: 'networkidle' });
      console.log(`üé• User ${userIndex}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      const videoData = {
        title: `–í–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç ${user.username}`,
        description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${user.username}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞. –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${user.phone}`,
        tags: '–º–µ–±–µ–ª—å, –Ω–∞ –∑–∞–∫–∞–∑, –º–∞—Å—Ç–µ—Ä, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
      };
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–∏–¥–µ–æ
      const videoTitleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
      if (await videoTitleInput.count() > 0) {
        await videoTitleInput.fill(videoData.title);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      const videoDescInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
      if (await videoDescInput.count() > 0) {
        await videoDescInput.fill(videoData.description);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      const videoTagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
      if (await videoTagsInput.count() > 0) {
        await videoTagsInput.fill(videoData.tags);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª —Ç–µ–≥–∏ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
      const videoSubmitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
      if (await videoSubmitButton.count() > 0) {
        await videoSubmitButton.click();
        console.log(`üé• User ${userIndex}: –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        globalData.createdVideos.push({
          id: `video_${userIndex}_${Date.now()}`,
          userId: userIndex,
          title: videoData.title,
          description: videoData.description,
          createdAt: new Date()
        });
        
        await page.waitForTimeout(config.delayBetweenActions * 3);
      }
    }
    
    // 3. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï–ô
    console.log(`üë§ User ${userIndex}: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π`);
    
    await page.goto(`${config.targetUrl}/`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userIndex}: –û—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–ê–ö–ê–ó–ê–¢–¨ –≠–¢–£ –ú–ï–ë–ï–õ–¨"
    const orderButtons = await page.locator('button:has-text("–ó–ê–ö–ê–ó–ê–¢–¨ –≠–¢–£ –ú–ï–ë–ï–õ–¨")').all();
    if (orderButtons.length > 0) {
      try {
        await orderButtons[0].click();
        console.log(`üë§ User ${userIndex}: –ù–∞–∂–∞–ª "–ó–ê–ö–ê–ó–ê–¢–¨ –≠–¢–£ –ú–ï–ë–ï–õ–¨"`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      } catch (error) {
        console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ - ${error.message}`);
        failedActions++;
        totalActions++;
      }
    }
    
    // –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏
    const likeButtons = await page.locator('button:has-text("1"), button:has-text("0")').all();
    if (likeButtons.length > 0) {
      for (let i = 0; i < Math.min(2, likeButtons.length); i++) {
        try {
          await likeButtons[i].click();
          console.log(`üë§ User ${userIndex}: –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ ${i + 1}`);
          successfulActions++;
          totalActions++;
          globalData.likes.push({ userId: userIndex, likeIndex: i });
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const saveButtons = await page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")').all();
    if (saveButtons.length > 0) {
      for (let i = 0; i < Math.min(2, saveButtons.length); i++) {
        try {
          await saveButtons[i].click();
          console.log(`üë§ User ${userIndex}: –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // 4. –ü–û–ò–°–ö –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï
    console.log(`üë§ User ${userIndex}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫`);
    
    const searchQueries = [
      '–∫—É—Ö–Ω—è',
      '—à–∫–∞—Ñ',
      '–¥–∏–≤–∞–Ω',
      '—Å—Ç–æ–ª',
      '–∫—Ä–æ–≤–∞—Ç—å',
      '–º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑',
      '–º–∞—Å—Ç–µ—Ä –ø–æ –º–µ–±–µ–ª–∏'
    ];
    
    const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
    
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ"]').first();
    if (await searchInput.count() > 0) {
      await searchInput.fill(randomQuery);
      console.log(`üë§ User ${userIndex}: –í–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${randomQuery}`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      await searchInput.press('Enter');
      console.log(`üë§ User ${userIndex}: –í—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫`);
      successfulActions++;
      totalActions++;
      
      globalData.searches.push({ userId: userIndex, query: randomQuery, timestamp: new Date() });
      
      await page.waitForTimeout(config.delayBetweenActions * 2);
    }
    
    // 5. –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
    console.log(`üë§ User ${userIndex}: –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å`);
    
    await page.goto(`${config.targetUrl}/profile`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userIndex}: –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
    if (await nameInput.count() > 0) {
      await nameInput.fill(`${user.username} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å`);
      console.log(`üë§ User ${userIndex}: –û–±–Ω–æ–≤–∏–ª –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
    if (await bioInput.count() > 0) {
      await bioInput.fill(`–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${user.username}. –ò–Ω—Ç–µ—Ä–µ—Å—ã: –º–µ–±–µ–ª—å, –¥–∏–∑–∞–π–Ω, –∫–∞—á–µ—Å—Ç–≤–æ.`);
      console.log(`üë§ User ${userIndex}: –û–±–Ω–æ–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const saveProfileButton = page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), button:has-text("Update")').first();
    if (await saveProfileButton.count() > 0) {
      await saveProfileButton.click();
      console.log(`üë§ User ${userIndex}: –°–æ—Ö—Ä–∞–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
  } catch (error) {
    console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ —Ñ–ª–æ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runImprovedFullFlowTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await getExistingUsers();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 0; i < config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    testFullFlowWithUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log(`üîê –£—Å–ø–µ—à–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤: ${globalData.logins.length}`);
    console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${globalData.registrations.length}`);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
    console.log(`üé• –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
    console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
    console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${globalData.searches.length}`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –§–õ–û–£ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log(`üîê –£—Å–ø–µ—à–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤: ${globalData.logins.length}`);
  console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${globalData.registrations.length}`);
  console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
  console.log(`üé• –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
  console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
  console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${globalData.searches.length}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runImprovedFullFlowTest().catch(console.error);
