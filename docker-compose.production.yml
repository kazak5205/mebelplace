version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:16-3.4-alpine
    container_name: mebelplace-postgres-prod
    environment:
      POSTGRES_DB: mebelplace_prod
      POSTGRES_USER: mebelplace_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:?DB_PASSWORD is required}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mebelplace
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mebelplace_user -d mebelplace_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mebelplace-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - mebelplace
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: mebelplace-backend-prod
    environment:
      - APP_ENV=production
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    volumes:
      - hls_data:/var/www/hls
      - uploads_data:/var/www/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mebelplace
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./apps/frontend-nextjs
      dockerfile: Dockerfile.production
    container_name: mebelplace-frontend-prod
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - mebelplace

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mebelplace-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - mebelplace

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mebelplace-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - mebelplace

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mebelplace-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?GRAFANA_PASSWORD is required}
      - GF_SERVER_ROOT_URL=https://grafana.mebelplace.kz
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mebelplace

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  hls_data:
    driver: local
  uploads_data:
    driver: local

networks:
  mebelplace:
    driver: bridge

