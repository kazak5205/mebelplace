# Codemagic configuration for MebelPlace iOS App Store build and Android APK
# This file configures automatic building and uploading to App Store Connect

workflows:
  mebelplace-android:
    name: MebelPlace Android APK
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      groups:
        - Grand
      vars:
        FLUTTER_VERSION: stable
      
    scripts:
      - name: Set up Flutter
        script: |
          flutter sdk install $FLUTTER_VERSION
          
      - name: Get Flutter packages
        script: |
          cd mebelplace_demo
          flutter packages pub get
          
      - name: Flutter analyze
        script: |
          cd mebelplace_demo
          flutter analyze --no-fatal-infos || true
          
      - name: Build APK
        script: |
          cd mebelplace_demo
          flutter build apk --release \
            --build-name=1.0.0 \
            --build-number=59
            
    artifacts:
      - mebelplace_demo/build/app/outputs/flutter-apk/*.apk
      
    publishing:
      email:
        recipients:
          - bekaron.company@gmail.com
        notify:
          success: true
          failure: true
  
  mebelplace-ios:
    name: MebelPlace iOS App Store
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      groups:
        - Grand
      vars:
        FLUTTER_VERSION: stable
        BUNDLE_ID: "com.mebelplace.mebelplaceDemo"
        APP_STORE_CONNECT_ISSUER_ID: "94ce68e4-bd5a-4bf4-b266-46f0b9bd0596"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "7R2G5C786A"
      xcode: latest
      cocoapods: default
      
    integrations:
      app_store_connect: mebelplace-integration
      
    scripts:
      - name: Set up code signing
        script: |
          echo "========================================="
          echo "🔧 Setting up iOS Code Signing"
          echo "========================================="
          
          cd $CM_BUILD_DIR/mebelplace_demo/ios
          
          # Initialize keychain and get its path
          keychain initialize
          
          # Get the keychain path from environment
          KEYCHAIN_PATH=$(security default-keychain | tr -d '"' | xargs)
          echo "Using keychain: $KEYCHAIN_PATH"
          
          # Check what's in the p12 file
          echo "Checking distribution.p12 contents..."
          openssl pkcs12 -in distribution.p12 -passin pass: -nokeys -clcerts 2>&1 | grep -A 5 "subject"
          
          # Import distribution certificate to the correct keychain
          echo "Importing distribution certificate..."
          # Try with empty password first
          security import distribution.p12 -k "$KEYCHAIN_PATH" -P "" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild -A 2>&1 | tee /tmp/import_result.txt
          
          # If failed, try with temp123456 password
          if grep -q "MAC verification failed" /tmp/import_result.txt; then
            echo "Empty password failed, trying with password..."
            security import distribution.p12 -k "$KEYCHAIN_PATH" -P "temp123456" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild -A
          fi
          
          # Unlock keychain
          security unlock-keychain -p "" "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign:,productbuild: -s -k "" "$KEYCHAIN_PATH"
          
          # Check what certificates are available
          echo "Checking imported certificates..."
          security find-identity -p codesigning -v "$KEYCHAIN_PATH"
          
          echo "Checking for 'iPhone Distribution' or 'Apple Distribution'..."
          security find-identity -p codesigning -v "$KEYCHAIN_PATH" | grep -i distribution || echo "No distribution certificate found"
          
          # Install provisioning profiles
          echo "Installing provisioning profiles..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Get UUID and install profiles
          for profile in *.mobileprovision; do
            if [ -f "$profile" ]; then
              UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i "$profile"))
              echo "Installing $profile with UUID: $UUID"
              cp "$profile" ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID.mobileprovision"
            fi
          done
          
          # Use xcode-project command to apply profiles to Xcode project
          echo "Applying profiles to Xcode project..."
          cd $CM_BUILD_DIR/mebelplace_demo
          xcode-project use-profiles
          
          # Verify
          echo "========================================="
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "========================================="
            
          
      - name: Set up Flutter
        script: |
          flutter sdk install $FLUTTER_VERSION
          flutter config --enable-web
          
      - name: Get Flutter packages
        script: |
          cd mebelplace_demo
          flutter packages pub get
          
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
          
      - name: Flutter analyze
        script: |
          cd mebelplace_demo
          flutter analyze --no-fatal-infos || true
          
      - name: Flutter unit tests
        script: |
          cd mebelplace_demo
          echo "Skipping tests for App Store build"
          
      - name: Build ipa for distribution
        script: |
          cd mebelplace_demo
          flutter build ipa --release \
            --build-name=1.0.0 \
            --build-number=59 \
            --export-options-plist=$CM_BUILD_DIR/mebelplace_demo/export_options.plist
            
    artifacts:
      - mebelplace_demo/build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      
    publishing:
      app_store_connect:
        auth: integration
        
        submit_to_testflight: true
        beta_groups:
          - "MebelPlace Beta Testers"
          
        submit_to_app_store: false # Измените на true для автоматической отправки в App Store
