const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

// üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–õ–ê–¢–§–û–†–ú–´ MEBELPLACE
class PlatformAuditor {
  constructor() {
    this.auditResults = {
      timestamp: new Date().toISOString(),
      systemHealth: {},
      performanceMetrics: {},
      securityAssessment: {},
      scalabilityAnalysis: {},
      recommendations: []
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞—É–¥–∏—Ç–∞
  async performFullAudit() {
    console.log('üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–õ–ê–¢–§–û–†–ú–´ MEBELPLACE');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    await this.checkSystemHealth();
    await this.analyzePerformance();
    await this.assessSecurity();
    await this.analyzeScalability();
    await this.generateRecommendations();
    
    this.printAuditReport();
    return this.auditResults;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
  async checkSystemHealth() {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      const containersResult = await execAsync('docker ps --format "{{.Names}}\t{{.Status}}\t{{.Ports}}"');
      const containers = containersResult.stdout.trim().split('\n').map(line => {
        const parts = line.split('\t');
        return {
          name: parts[0],
          status: parts[1],
          ports: parts[2]
        };
      });
      
      this.auditResults.systemHealth.containers = containers;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT version();"');
      this.auditResults.systemHealth.database = {
        status: 'healthy',
        version: dbResult.stdout.trim()
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
      const redisResult = await execAsync('docker exec mebelplace-redis-prod redis-cli ping');
      this.auditResults.systemHealth.redis = {
        status: redisResult.stdout.trim() === 'PONG' ? 'healthy' : 'unhealthy'
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
      const siteResult = await execAsync('curl -s -o /dev/null -w "%{http_code}" https://mebelplace.com.kz');
      this.auditResults.systemHealth.website = {
        status: siteResult.stdout.trim() === '200' ? 'accessible' : 'inaccessible',
        httpCode: siteResult.stdout.trim()
      };
      
      console.log('‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
      this.auditResults.systemHealth.error = error.message;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async analyzePerformance() {
    console.log('‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    try {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      const statsResult = await execAsync('docker stats --no-stream --format "{{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"');
      const stats = statsResult.stdout.trim().split('\n').map(line => {
        const parts = line.split('\t');
        return {
          container: parts[0],
          cpuPercent: parseFloat(parts[1]) || 0,
          memoryUsage: parts[2],
          memoryPercent: parseFloat(parts[3]) || 0
        };
      });
      
      this.auditResults.performanceMetrics.containerStats = stats;
      
      // –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const dbStatsResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users; SELECT COUNT(*) FROM orders; SELECT COUNT(*) FROM videos; SELECT COUNT(*) FROM messages; SELECT COUNT(*) FROM support_tickets;"');
      const dbStats = dbStatsResult.stdout.trim().split('\n').map(line => parseInt(line.trim()) || 0);
      
      this.auditResults.performanceMetrics.databaseStats = {
        users: dbStats[0],
        orders: dbStats[1],
        videos: dbStats[2],
        messages: dbStats[3],
        supportTickets: dbStats[4]
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API
      const apiResponseTime = await this.measureApiResponseTime();
      this.auditResults.performanceMetrics.apiResponseTime = apiResponseTime;
      
      console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
      this.auditResults.performanceMetrics.error = error.message;
    }
  }

  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API
  async measureApiResponseTime() {
    try {
      const startTime = Date.now();
      await execAsync('curl -s -o /dev/null https://mebelplace.com.kz/api/health');
      const responseTime = Date.now() - startTime;
      
      return {
        healthEndpoint: responseTime,
        status: responseTime < 1000 ? 'excellent' : responseTime < 3000 ? 'good' : 'slow'
      };
    } catch (error) {
      return {
        healthEndpoint: -1,
        status: 'error',
        error: error.message
      };
    }
  }

  // –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  async assessSecurity() {
    console.log('üîí –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      const sslResult = await execAsync('curl -s -I https://mebelplace.com.kz | grep -i "strict-transport-security"');
      this.auditResults.securityAssessment.ssl = {
        hstsEnabled: sslResult.stdout.includes('strict-transport-security'),
        status: sslResult.stdout.includes('strict-transport-security') ? 'secure' : 'needs_improvement'
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
      const nginxConfigResult = await execAsync('docker exec mebelplace-nginx-prod cat /etc/nginx/nginx.conf | grep -E "(rate_limit|limit_req)"');
      this.auditResults.securityAssessment.rateLimiting = {
        enabled: nginxConfigResult.stdout.includes('limit_req'),
        status: nginxConfigResult.stdout.includes('limit_req') ? 'configured' : 'not_configured'
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const envResult = await execAsync('docker exec mebelplace-backend-prod env | grep -E "(PASSWORD|SECRET|KEY)" | wc -l');
      this.auditResults.securityAssessment.environmentVariables = {
        sensitiveVariablesCount: parseInt(envResult.stdout.trim()) || 0,
        status: parseInt(envResult.stdout.trim()) > 0 ? 'configured' : 'needs_review'
      };
      
      console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–µ–Ω–∞');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${error.message}`);
      this.auditResults.securityAssessment.error = error.message;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
  async analyzeScalability() {
    console.log('üìà –ê–Ω–∞–ª–∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏...');
    
    try {
      // –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
      const systemResources = await this.getSystemResources();
      this.auditResults.scalabilityAnalysis.systemResources = systemResources;
      
      // –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
      this.auditResults.scalabilityAnalysis.architecture = {
        database: 'PostgreSQL (scalable)',
        cache: 'Redis (scalable)',
        backend: 'Node.js (horizontal scaling possible)',
        frontend: 'Static files (CDN ready)',
        loadBalancer: 'Nginx (scalable)',
        containerization: 'Docker (orchestration ready)'
      };
      
      // –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
      const loadAnalysis = await this.analyzeLoadCapacity();
      this.auditResults.scalabilityAnalysis.loadCapacity = loadAnalysis;
      
      console.log('‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏: ${error.message}`);
      this.auditResults.scalabilityAnalysis.error = error.message;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  async getSystemResources() {
    try {
      const memoryResult = await execAsync('free -h');
      const diskResult = await execAsync('df -h /');
      const cpuResult = await execAsync('nproc');
      
      return {
        memory: memoryResult.stdout.trim(),
        disk: diskResult.stdout.trim(),
        cpuCores: parseInt(cpuResult.stdout.trim()) || 0
      };
    } catch (error) {
      return { error: error.message };
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  async analyzeLoadCapacity() {
    const dbStats = this.auditResults.performanceMetrics.databaseStats;
    const containerStats = this.auditResults.performanceMetrics.containerStats;
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
    const analysis = {
      currentLoad: {
        users: dbStats.users,
        orders: dbStats.orders,
        videos: dbStats.videos,
        messages: dbStats.messages
      },
      capacityEstimate: {
        maxConcurrentUsers: this.estimateMaxUsers(containerStats),
        maxOrdersPerMinute: this.estimateMaxOrders(containerStats),
        maxVideosPerHour: this.estimateMaxVideos(containerStats)
      },
      bottlenecks: this.identifyBottlenecks(containerStats),
      recommendations: []
    };
    
    return analysis;
  }

  // –û—Ü–µ–Ω–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  estimateMaxUsers(containerStats) {
    const backendStats = containerStats.find(s => s.container.includes('backend'));
    if (!backendStats) return 'unknown';
    
    const cpuUsage = backendStats.cpuPercent;
    const memoryUsage = backendStats.memoryPercent;
    
    if (cpuUsage < 50 && memoryUsage < 50) return '1000+';
    if (cpuUsage < 80 && memoryUsage < 80) return '500-1000';
    return '100-500';
  }

  // –û—Ü–µ–Ω–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
  estimateMaxOrders(containerStats) {
    const dbStats = containerStats.find(s => s.container.includes('postgres'));
    if (!dbStats) return 'unknown';
    
    const cpuUsage = dbStats.cpuPercent;
    const memoryUsage = dbStats.memoryPercent;
    
    if (cpuUsage < 50 && memoryUsage < 50) return '100+';
    if (cpuUsage < 80 && memoryUsage < 80) return '50-100';
    return '10-50';
  }

  // –û—Ü–µ–Ω–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
  estimateMaxVideos(containerStats) {
    const backendStats = containerStats.find(s => s.container.includes('backend'));
    if (!backendStats) return 'unknown';
    
    const cpuUsage = backendStats.cpuPercent;
    const memoryUsage = backendStats.memoryPercent;
    
    if (cpuUsage < 50 && memoryUsage < 50) return '50+';
    if (cpuUsage < 80 && memoryUsage < 80) return '20-50';
    return '5-20';
  }

  // –í—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
  identifyBottlenecks(containerStats) {
    const bottlenecks = [];
    
    containerStats.forEach(stat => {
      if (stat.cpuPercent > 80) {
        bottlenecks.push(`${stat.container}: High CPU usage (${stat.cpuPercent}%)`);
      }
      if (stat.memoryPercent > 80) {
        bottlenecks.push(`${stat.container}: High memory usage (${stat.memoryPercent}%)`);
      }
    });
    
    return bottlenecks;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  async generateRecommendations() {
    console.log('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const containerStats = this.auditResults.performanceMetrics.containerStats;
    if (containerStats) {
      containerStats.forEach(stat => {
        if (stat.cpuPercent > 70) {
          recommendations.push({
            category: 'Performance',
            priority: 'High',
            recommendation: `Optimize ${stat.container} - CPU usage is ${stat.cpuPercent}%`,
            action: 'Consider scaling or optimization'
          });
        }
        if (stat.memoryPercent > 70) {
          recommendations.push({
            category: 'Performance',
            priority: 'High',
            recommendation: `Increase memory for ${stat.container} - usage is ${stat.memoryPercent}%`,
            action: 'Increase memory limits'
          });
        }
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!this.auditResults.securityAssessment.ssl?.hstsEnabled) {
      recommendations.push({
        category: 'Security',
        priority: 'Medium',
        recommendation: 'Enable HSTS headers for better security',
        action: 'Add Strict-Transport-Security header'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    const dbStats = this.auditResults.performanceMetrics.databaseStats;
    if (dbStats.users > 1000) {
      recommendations.push({
        category: 'Scalability',
        priority: 'Medium',
        recommendation: 'Consider database sharding for large user base',
        action: 'Implement horizontal database scaling'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
    recommendations.push({
      category: 'Monitoring',
      priority: 'Low',
      recommendation: 'Implement comprehensive monitoring and alerting',
      action: 'Set up Prometheus + Grafana monitoring'
    });
    
    this.auditResults.recommendations = recommendations;
    console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  }

  // –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞ –∞—É–¥–∏—Ç–∞
  printAuditReport() {
    console.log('üìä –û–¢–ß–ï–¢ –ü–û–õ–ù–û–ì–û –ê–£–î–ò–¢–ê –ü–õ–ê–¢–§–û–†–ú–´ MEBELPLACE');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    // –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    console.log('üè• –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´:');
    console.log(`   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: ${this.auditResults.systemHealth.containers?.length || 0} –∑–∞–ø—É—â–µ–Ω–æ`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.auditResults.systemHealth.database?.status || 'unknown'}`);
    console.log(`   Redis: ${this.auditResults.systemHealth.redis?.status || 'unknown'}`);
    console.log(`   –°–∞–π—Ç: ${this.auditResults.systemHealth.website?.status || 'unknown'}`);
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:');
    const dbStats = this.auditResults.performanceMetrics.databaseStats;
    if (dbStats) {
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${dbStats.users}`);
      console.log(`   –ó–∞–∫–∞–∑—ã: ${dbStats.orders}`);
      console.log(`   –í–∏–¥–µ–æ: ${dbStats.videos}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏—è: ${dbStats.messages}`);
      console.log(`   –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${dbStats.supportTickets}`);
    }
    
    const apiTime = this.auditResults.performanceMetrics.apiResponseTime;
    if (apiTime) {
      console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: ${apiTime.healthEndpoint}ms (${apiTime.status})`);
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    console.log('\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:');
    console.log(`   SSL/HSTS: ${this.auditResults.securityAssessment.ssl?.status || 'unknown'}`);
    console.log(`   Rate Limiting: ${this.auditResults.securityAssessment.rateLimiting?.status || 'unknown'}`);
    console.log(`   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${this.auditResults.securityAssessment.environmentVariables?.status || 'unknown'}`);
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
    console.log('\nüìà –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨:');
    const loadCapacity = this.auditResults.scalabilityAnalysis.loadCapacity;
    if (loadCapacity) {
      console.log(`   –ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${loadCapacity.capacityEstimate.maxConcurrentUsers}`);
      console.log(`   –ú–∞–∫—Å. –∑–∞–∫–∞–∑–æ–≤/–º–∏–Ω: ${loadCapacity.capacityEstimate.maxOrdersPerMinute}`);
      console.log(`   –ú–∞–∫—Å. –≤–∏–¥–µ–æ/—á–∞—Å: ${loadCapacity.capacityEstimate.maxVideosPerHour}`);
      
      if (loadCapacity.bottlenecks.length > 0) {
        console.log(`   –£–∑–∫–∏–µ –º–µ—Å—Ç–∞: ${loadCapacity.bottlenecks.length}`);
        loadCapacity.bottlenecks.forEach(bottleneck => {
          console.log(`     - ${bottleneck}`);
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    this.auditResults.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. [${rec.priority}] ${rec.recommendation}`);
      console.log(`      –î–µ–π—Å—Ç–≤–∏–µ: ${rec.action}`);
    });
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    // –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const overallScore = this.calculateOverallScore();
    console.log(`üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–õ–ê–¢–§–û–†–ú–´: ${overallScore}/100`);
    
    if (overallScore >= 90) {
      console.log('üåü –û–¢–õ–ò–ß–ù–û! –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ');
    } else if (overallScore >= 70) {
      console.log('‚úÖ –•–û–†–û–®–û! –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    } else if (overallScore >= 50) {
      console.log('‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
    } else {
      console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    }
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  }

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
  calculateOverallScore() {
    let score = 100;
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
    const containerStats = this.auditResults.performanceMetrics.containerStats;
    if (containerStats) {
      containerStats.forEach(stat => {
        if (stat.cpuPercent > 80) score -= 15;
        else if (stat.cpuPercent > 60) score -= 10;
        
        if (stat.memoryPercent > 80) score -= 15;
        else if (stat.memoryPercent > 60) score -= 10;
      });
    }
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if (this.auditResults.securityAssessment.ssl?.status !== 'secure') score -= 10;
    if (this.auditResults.securityAssessment.rateLimiting?.status !== 'configured') score -= 5;
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if (this.auditResults.systemHealth.website?.status !== 'accessible') score -= 20;
    
    return Math.max(0, score);
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
async function runPlatformAudit() {
  const auditor = new PlatformAuditor();
  const results = await auditor.performFullAudit();
  return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { PlatformAuditor, runPlatformAudit };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runPlatformAudit().catch(console.error);
}
