const Bull = require('bull');
const videoService = require('./videoService');
const redisClient = require('../config/redis');

// –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∏ (—á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ç—å CPU)
const videoQueue = new Bull('video-processing', {
  redis: {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || undefined,
  },
  defaultJobOptions: {
    removeOnComplete: 100, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á
    removeOnFail: 200,     // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    attempts: 3,           // 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    backoff: {
      type: 'exponential',
      delay: 5000          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: 5—Å, 10—Å, 20—Å
    }
  }
});

// üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞)
videoQueue.process(2, async (job) => {
  const { videoId, videoPath } = job.data;
  
  console.log(`[VIDEO QUEUE] üöÄ Processing video ${videoId} (Job ${job.id})`);
  
  try {
    // Mark as processing
    try {
      await require('../config/database').pool.query(
        "UPDATE videos SET processing_status = 'processing' WHERE id = $1",
        [videoId]
      );
    } catch (e) {
      console.warn('[VIDEO QUEUE] Failed to set processing_status=processing:', e.message);
    }

    // 1. –°–∂–∞—Ç–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (—Å–∞–º–∞—è —Ç—è–∂—ë–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    await job.progress(10);
    console.log(`[VIDEO QUEUE] Step 1/3: Compressing video ${videoId}...`);
    await videoService.compressAndOptimizeVideo(videoPath);
    await job.progress(60);
    console.log(`[VIDEO QUEUE] ‚úÖ Compression completed for ${videoId}`);
    
    // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é
    await job.progress(70);
    console.log(`[VIDEO QUEUE] Step 2/3: Generating thumbnail for ${videoId}...`);
    await videoService.generateThumbnail(videoPath, videoId);
    await job.progress(85);
    console.log(`[VIDEO QUEUE] ‚úÖ Thumbnail generated for ${videoId}`);
    
    // 3. –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await job.progress(90);
    console.log(`[VIDEO QUEUE] Step 3/3: Calculating duration for ${videoId}...`);
    await videoService.calculateDuration(videoPath, videoId);
    await job.progress(100);
    console.log(`[VIDEO QUEUE] ‚úÖ Duration calculated for ${videoId}`);
    
    // Mark as completed
    try {
      await require('../config/database').pool.query(
        "UPDATE videos SET processing_status = 'completed' WHERE id = $1",
        [videoId]
      );
    } catch (e) {
      console.warn('[VIDEO QUEUE] Failed to set processing_status=completed:', e.message);
    }

    console.log(`[VIDEO QUEUE] ‚úÖ Video ${videoId} processed successfully`);
    
    return { 
      success: true, 
      videoId,
      message: 'Video processed successfully' 
    };
    
  } catch (error) {
    console.error(`[VIDEO QUEUE] ‚ùå Error processing video ${videoId}:`, error);
    // Mark as failed
    try {
      await require('../config/database').pool.query(
        "UPDATE videos SET processing_status = 'failed' WHERE id = $1",
        [videoId]
      );
    } catch (e) {
      console.warn('[VIDEO QUEUE] Failed to set processing_status=failed:', e.message);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å)
    throw new Error(`Video processing failed: ${error.message}`);
  }
});

// –°–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
videoQueue.on('completed', (job, result) => {
  console.log(`[VIDEO QUEUE] ‚úÖ Job ${job.id} completed:`, result);
});

videoQueue.on('failed', (job, err) => {
  console.error(`[VIDEO QUEUE] ‚ùå Job ${job.id} failed:`, err.message);
});

videoQueue.on('stalled', (job) => {
  console.warn(`[VIDEO QUEUE] ‚ö†Ô∏è Job ${job.id} stalled, restarting...`);
});

videoQueue.on('active', (job) => {
  console.log(`[VIDEO QUEUE] üîÑ Job ${job.id} started processing`);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å
async function addVideoToQueue(videoId, videoPath) {
  try {
    const job = await videoQueue.add(
      { videoId, videoPath },
      {
        jobId: `video-${videoId}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        priority: 1, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 = –≤—ã—Å–æ–∫–∏–π, 10 = –Ω–∏–∑–∫–∏–π)
        timeout: 600000, // 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
      }
    );
    
    console.log(`[VIDEO QUEUE] ‚úÖ Video ${videoId} added to queue (Job ${job.id})`);
    
    return {
      jobId: job.id,
      status: 'queued',
      position: await job.getPosition(),
    };
  } catch (error) {
    console.error(`[VIDEO QUEUE] ‚ùå Failed to add video ${videoId} to queue:`, error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function getVideoProcessingStatus(videoId) {
  try {
    const job = await videoQueue.getJob(`video-${videoId}`);
    
    if (!job) {
      return { status: 'not_found' };
    }
    
    const state = await job.getState();
    const progress = job.progress();
    
    return {
      status: state, // 'waiting', 'active', 'completed', 'failed'
      progress,
      position: state === 'waiting' ? await job.getPosition() : null,
    };
  } catch (error) {
    console.error(`[VIDEO QUEUE] Error getting status for video ${videoId}:`, error);
    return { status: 'error', message: error.message };
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
async function getQueueStats() {
  try {
    const [waiting, active, completed, failed] = await Promise.all([
      videoQueue.getWaitingCount(),
      videoQueue.getActiveCount(),
      videoQueue.getCompletedCount(),
      videoQueue.getFailedCount(),
    ]);
    
    return {
      waiting,
      active,
      completed,
      failed,
      total: waiting + active,
    };
  } catch (error) {
    console.error('[VIDEO QUEUE] Error getting queue stats:', error);
    return null;
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ cron)
async function cleanOldJobs() {
  try {
    await videoQueue.clean(24 * 3600 * 1000, 'completed'); // –£–¥–∞–ª—è–µ–º completed —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    await videoQueue.clean(7 * 24 * 3600 * 1000, 'failed'); // –£–¥–∞–ª—è–µ–º failed —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    console.log('[VIDEO QUEUE] ‚úÖ Old jobs cleaned');
  } catch (error) {
    console.error('[VIDEO QUEUE] Error cleaning jobs:', error);
  }
}

// Graceful shutdown
async function closeQueue() {
  await videoQueue.close();
  console.log('[VIDEO QUEUE] Queue closed');
}

module.exports = {
  videoQueue,
  addVideoToQueue,
  getVideoProcessingStatus,
  getQueueStats,
  cleanOldJobs,
  closeQueue,
};

