const axios = require('axios');

class SMSService {
  constructor() {
    this.apiKey = 'kz8a6b114a5eecbbdffcb1f0ea6a00189b81d6e6b7eaf6e6646e86bc8e77eb2e98a488';
    this.baseUrl = 'https://api.mobizon.kz/service';
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendSMS(phone, message, sender = null) {
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º + –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const formattedPhone = this.formatPhoneNumber(phone);
      
      console.log(`üì± Sending SMS to: ${formattedPhone}${sender ? ', from: ' + sender : ' (default sender)'}`);
      
      // Mobizon API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã
      const params = new URLSearchParams();
      params.append('apiKey', this.apiKey);
      params.append('recipient', formattedPhone);
      params.append('text', message);
      // –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º sender - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π shortcode –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
      
      const response = await axios.post(
        `${this.baseUrl}/message/sendsmsmessage`,
        params,
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }
      );

      console.log(`üì° Mobizon API response:`, JSON.stringify(response.data));

      if (response.data.code === 0) {
        console.log(`‚úÖ SMS sent successfully to ${formattedPhone}`);
        return {
          success: true,
          messageId: response.data.data?.messageId,
          cost: response.data.data?.cost
        };
      } else {
        console.error(`‚ùå SMS sending failed: ${response.data.message}`);
        return {
          success: false,
          error: response.data.message
        };
      }
    } catch (error) {
      console.error('SMS service error:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async sendVerificationCode(phone, code) {
    const message = `[MebelPlace]\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É.`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –∑–∞—è–≤–∫—É
  async sendNewResponseNotification(phone, orderTitle, masterName) {
    const message = `MebelPlace: –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É "${orderTitle}" –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${masterName}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
  async sendNewMessageNotification(phone, senderName) {
    const message = `MebelPlace: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName} –≤ —á–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–∫–ª–∏–∫–∞
  async sendResponseAcceptedNotification(phone, orderTitle, clientName) {
    const message = `MebelPlace: –í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É "${orderTitle}" –ø—Ä–∏–Ω—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–º ${clientName}. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É!`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–∏–¥–µ–æ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  async sendNewVideoNotification(phone, masterName, videoTitle) {
    const message = `MebelPlace: ${masterName} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ "${videoTitle}". –°–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
  async sendNewSubscriberNotification(phone, subscriberName) {
    const message = `MebelPlace: –£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${subscriberName}!`;
    return await this.sendSMS(phone, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
  async sendSystemNotification(phone, message) {
    return await this.sendSMS(phone, `MebelPlace: ${message}`);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  formatPhoneNumber(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let cleanPhone = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleanPhone.startsWith('8')) {
      cleanPhone = '7' + cleanPhone.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º 7
    if (!cleanPhone.startsWith('7')) {
      cleanPhone = '7' + cleanPhone;
    }
    
    return cleanPhone;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  async getBalance() {
    try {
      const response = await axios.get(`${this.baseUrl}/user/getownbalance`, {
        params: {
          apiKey: this.apiKey,
          output: 'json'
        }
      });

      if (response.data.code === 0) {
        return {
          success: true,
          balance: response.data.data.balance,
          currency: response.data.data.currency
        };
      } else {
        return {
          success: false,
          error: response.data.message
        };
      }
    } catch (error) {
      console.error('Balance check error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ SMS
  async getSMSHistory(fromDate, toDate, limit = 100) {
    try {
      const response = await axios.get(`${this.baseUrl}/message/list`, {
        params: {
          apiKey: this.apiKey,
          from: fromDate,
          to: toDate,
          limit: limit,
          output: 'json'
        }
      });

      if (response.data.code === 0) {
        return {
          success: true,
          messages: response.data.data
        };
      } else {
        return {
          success: false,
          error: response.data.message
        };
      }
    } catch (error) {
      console.error('SMS history error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  async sendBulkSMS(recipients, message, sender = 'MebelPlace') {
    try {
      const formattedRecipients = recipients.map(phone => this.formatPhoneNumber(phone));
      
      const response = await axios.get(`${this.baseUrl}/message/sendsmsmessage`, {
        params: {
          apiKey: this.apiKey,
          recipient: formattedRecipients.join(','),
          from: sender,
          text: message,
          output: 'json'
        }
      });

      if (response.data.code === 0) {
        console.log(`‚úÖ Bulk SMS sent successfully to ${formattedRecipients.length} recipients`);
        return {
          success: true,
          campaignId: response.data.data?.campaignId,
          cost: response.data.data?.cost
        };
      } else {
        console.error(`‚ùå Bulk SMS sending failed: ${response.data.message}`);
        return {
          success: false,
          error: response.data.message
        };
      }
    } catch (error) {
      console.error('Bulk SMS service error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = new SMSService();
