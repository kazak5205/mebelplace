const { chromium } = require('playwright');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

// üöÄ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –¢–ï–°–¢ –° –ü–û–õ–ù–´–ú–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø–ú–ò
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 15,
  concurrentUsers: 3,
  testDuration: 600,
  databaseCheckInterval: 20,
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 1500,
  smsDelay: 6000,
  realUIMode: true
};

console.log('üöÄ AGGRESSIVE INTERACTION TEST - FULL USER ENGAGEMENT');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–ø–æ–¥–ø–∏—Å–∫–∏, –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞)`);
console.log(`‚è∞ SMS Delay: ${config.smsDelay}ms`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };
let lastSmsTime = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
let globalData = {
  createdOrders: [],
  createdVideos: [],
  activeChats: [],
  subscriptions: [],
  likes: [],
  comments: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∫–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getSmsCodeFromDatabase(phoneNumber) {
  try {
    console.log(`üîç –ò—â–µ–º SMS –∫–æ–¥ –≤ –ë–î –¥–ª—è ${phoneNumber}...`);
    
    const result = await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT code FROM sms_verifications WHERE phone = '${phoneNumber}' AND is_used = false ORDER BY created_at DESC LIMIT 1;"`);
    
    if (result.stdout.trim()) {
      const code = result.stdout.trim();
      console.log(`üì± –ù–∞–π–¥–µ–Ω SMS –∫–æ–¥ –≤ –ë–î: ${code}`);
      
      await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -c "UPDATE sms_verifications SET is_used = true WHERE phone = '${phoneNumber}' AND code = '${code}';"`);
      
      return code;
    }
    
    const lastResult = await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT code FROM sms_verifications WHERE is_used = false ORDER BY created_at DESC LIMIT 1;"`);
    
    if (lastResult.stdout.trim()) {
      const code = lastResult.stdout.trim();
      console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π SMS –∫–æ–¥ –∏–∑ –ë–î: ${code}`);
      
      await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -c "UPDATE sms_verifications SET is_used = true WHERE code = '${code}' AND is_used = false LIMIT 1;"`);
      
      return code;
    }
    
    return null;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SMS –≤ –ë–î: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function closeModal(page) {
  try {
    const modalExists = await page.evaluate(() => {
      const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
      return !!modal;
    });
    
    if (modalExists) {
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');
      
      await page.keyboard.press('Escape');
      await page.waitForTimeout(500);
      
      await page.click('body', { position: { x: 10, y: 10 } });
      await page.waitForTimeout(500);
      
      await page.evaluate(() => {
        const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
        if (modal) {
          modal.style.display = 'none';
          modal.remove();
        }
      });
      
      await page.waitForTimeout(1000);
      
      const stillExists = await page.evaluate(() => {
        const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
        return !!modal;
      });
      
      if (!stillExists) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
        return true;
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å');
        return false;
      }
    }
    
    return true;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è SMS rate limit
async function waitForSmsRateLimit() {
  const now = Date.now();
  const timeSinceLastSms = now - lastSmsTime;
  
  if (timeSinceLastSms < config.smsDelay) {
    const waitTime = config.smsDelay - timeSinceLastSms;
    console.log(`‚è∞ –ñ–¥–µ–º ${waitTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º SMS –∑–∞–ø—Ä–æ—Å–æ–º...`);
    await new Promise(resolve => setTimeout(resolve, waitTime));
  }
  
  lastSmsTime = Date.now();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
async function createAggressiveUser(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log(`üåê User ${userId}: –ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç...`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
    let retries = 0;
    while (retries < config.maxRetries) {
      try {
        await page.goto(config.targetUrl, { 
          waitUntil: 'networkidle',
          timeout: config.browserTimeout 
        });
        break;
      } catch (error) {
        retries++;
        console.log(`üîÑ User ${userId}: –ü–æ–ø—ã—Ç–∫–∞ ${retries}/${config.maxRetries} - ${error.message}`);
        if (retries >= config.maxRetries) throw error;
        await page.waitForTimeout(2000);
      }
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalClosed = await closeModal(page);
    if (!modalClosed) {
      console.log(`‚ùå User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
      failedActions++;
      totalActions++;
      return;
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = userId % 2 === 0 ? 'client' : 'master';
    console.log(`üë§ User ${userId}: –†–æ–ª—å - ${userRole}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    await page.goto(`${config.targetUrl}/register`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneNumber = `+7777${String(userId).padStart(7, '0')}`;
    const username = userRole === 'client' ? `Client${userId}` : `Master${userId}`;
    
    console.log(`üìù User ${userId}: –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('input[placeholder="+7XXXXXXXXXX"]', phoneNumber);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="username"]', username);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"]', 'testpass123');
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"]', 'testpass123');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS
    await waitForSmsRateLimit();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    console.log(`üöÄ User ${userId}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É...`);
    await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º SMS –∫–æ–¥
    console.log(`üì± User ${userId}: –ñ–¥–µ—Ç SMS –∫–æ–¥...`);
    
    let smsCode = null;
    page.on('response', async response => {
      if (response.url().includes('/api/auth/send-sms-code') && response.status() === 200) {
        try {
          const result = await response.json();
          if (result.success && result.code) {
            smsCode = result.code;
            console.log(`üì± User ${userId}: –ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥ –∏–∑ API: ${smsCode}`);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    });
    
    // –ñ–¥–µ–º SMS –∫–æ–¥ –¥–æ 15 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    while (!smsCode && attempts < 30) {
      await page.waitForTimeout(500);
      attempts++;
    }
    
    // –ï—Å–ª–∏ SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ API, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    if (!smsCode) {
      console.log(`üîç User ${userId}: SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ API, –ø—Ä–æ–±—É–µ–º –ë–î...`);
      smsCode = await getSmsCodeFromDatabase(phoneNumber);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–¥–∞, –ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π
    if (!smsCode) {
      console.log(`‚ö†Ô∏è  User ${userId}: SMS –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥`);
      smsCode = '123456';
    }
    
    // –í–≤–æ–¥–∏–º SMS –∫–æ–¥
    console.log(`üî¢ User ${userId}: –í–≤–æ–¥–∏—Ç SMS –∫–æ–¥: ${smsCode}`);
    await page.fill('input[placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"]', smsCode);
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥
    await page.click('button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const currentUrl = page.url();
    if (currentUrl.includes('/sms-verification')) {
      const errorText = await page.textContent('body');
      if (errorText.includes('already exists') || errorText.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        console.log(`‚úÖ User ${userId}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!)`);
        successfulActions++;
      } else {
        console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
        failedActions++;
      }
    } else {
      console.log(`‚úÖ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      successfulActions++;
    }
    
    totalActions++;
    
    // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (userRole === 'client') {
      await executeAggressiveClientScenario(page, userId);
    } else {
      await executeAggressiveMasterScenario(page, userId);
    }
    
    console.log(`üéâ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
async function executeAggressiveClientScenario(page, userId) {
  console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π –ö–õ–ò–ï–ù–¢–ê`);
  
  // 1. –ü–†–û–°–ú–û–¢–† –ò –ü–û–î–ü–ò–°–ö–ò –ù–ê –ú–ê–°–¢–ï–†–û–í
  console.log(`üë§ User ${userId}: –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è`);
  
  try {
    await page.goto(`${config.targetUrl}/masters`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å—Ç–µ—Ä–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeButtons = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), button:has-text("Subscribe"), .subscribe-btn, [data-testid="subscribe"]');
    const subscribeCount = await subscribeButtons.count();
    
    if (subscribeCount > 0) {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–æ–≤
      for (let i = 0; i < Math.min(3, subscribeCount); i++) {
        try {
          await subscribeButtons.nth(i).click();
          console.log(`üë§ User ${userId}: –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ ${i + 1}`);
          successfulActions++;
          totalActions++;
          globalData.subscriptions.push({ clientId: userId, masterIndex: i });
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    const masterCards = page.locator('.master-card, [data-testid="master-card"], a[href*="/master/"]');
    const masterCount = await masterCards.count();
    if (masterCount > 0) {
      for (let i = 0; i < Math.min(2, masterCount); i++) {
        try {
          await masterCards.nth(i).click();
          await page.waitForLoadState('networkidle');
          console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
          
          // –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä–∞
          const likeButtons = page.locator('button:has-text("‚ù§"), .like-btn, [data-testid="like"], button[class*="like"]');
          const likeCount = await likeButtons.count();
          if (likeCount > 0) {
            for (let j = 0; j < Math.min(2, likeCount); j++) {
              try {
                await likeButtons.nth(j).click();
                console.log(`üë§ User ${userId}: –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ ${j + 1}`);
                successfulActions++;
                totalActions++;
                globalData.likes.push({ clientId: userId, masterIndex: i, likeIndex: j });
                
                await page.waitForTimeout(config.delayBetweenActions);
              } catch (error) {
                console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ ${j + 1} - ${error.message}`);
                failedActions++;
                totalActions++;
              }
            }
          }
          
          // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
          const commentInputs = page.locator('input[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"], textarea[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"], .comment-input');
          const commentCount = await commentInputs.count();
          if (commentCount > 0) {
            for (let k = 0; k < Math.min(2, commentCount); k++) {
              try {
                const comments = [
                  `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –û—á–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!`,
                  `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞?`,
                  `–ö—Ä–∞—Å–∏–≤–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å.`,
                  `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ! –†–µ–∫–æ–º–µ–Ω–¥—É—é!`
                ];
                const randomComment = comments[Math.floor(Math.random() * comments.length)];
                
                await commentInputs.nth(k).fill(randomComment);
                await page.waitForTimeout(500);
                
                const submitCommentButtons = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:has-text("Comment"), .comment-submit');
                if (await submitCommentButtons.count() > 0) {
                  await submitCommentButtons.nth(0).click();
                  console.log(`üë§ User ${userId}: –û—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${k + 1}`);
                  successfulActions++;
                  totalActions++;
                  globalData.comments.push({ clientId: userId, masterIndex: i, comment: randomComment });
                  
                  await page.waitForTimeout(config.delayBetweenActions);
                }
              } catch (error) {
                console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ${k + 1} - ${error.message}`);
                failedActions++;
                totalActions++;
              }
            }
          }
          
          await page.goBack();
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–∞—Å—Ç–µ—Ä–æ–≤ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 2. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê –° –î–ï–¢–ê–õ–¨–ù–´–ú –û–ü–ò–°–ê–ù–ò–ï–ú
  console.log(`üë§ User ${userId}: –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑`);
  
  try {
    await page.goto(`${config.targetUrl}/orders/create`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderData = {
      title: `–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ –∫—É—Ö–Ω–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
      description: `–ù—É–∂–Ω–∞ –∫—É—Ö–Ω—è 3 –º–µ—Ç—Ä–∞, —Ü–≤–µ—Ç –±–µ–ª—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª –ú–î–§, –±—é–¥–∂–µ—Ç 150000 —Ç–µ–Ω–≥–µ. –°—Ä–æ–∫ –¥–æ 1 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ—Ä –Ω–∞ –¥–æ–º—É.`,
      budget: '150000',
      region: '–ê–ª–º–∞—Ç—ã'
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const budgetInput = page.locator('input[name*="budget"], input[placeholder*="–±—é–¥–∂–µ—Ç"]').first();
    if (await budgetInput.count() > 0) {
      await budgetInput.fill(orderData.budget);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –±—é–¥–∂–µ—Ç`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    const categorySelect = page.locator('select[name*="category"]').first();
    if (await categorySelect.count() > 0) {
      try {
        await categorySelect.selectOption('furniture');
        console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
        successfulActions++;
        totalActions++;
      } catch (error) {
        console.log(`‚ùå User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é - ${error.message}`);
        failedActions++;
        totalActions++;
      }
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      successfulActions++;
      totalActions++;
      
      globalData.createdOrders.push({
        id: `order_${userId}_${Date.now()}`,
        clientId: userId,
        title: orderData.title,
        description: orderData.description,
        status: 'pending',
        createdAt: new Date()
      });
      
      await page.waitForTimeout(config.delayBetweenActions * 3);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 3. –ß–ê–¢ –ß–ï–†–ï–ó –ó–ê–Ø–í–ö–ò
  console.log(`üë§ User ${userId}: –û–±—â–∞–µ—Ç—Å—è –≤ —á–∞—Ç–∞—Ö —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫–∏`);
  
  try {
    await page.goto(`${config.targetUrl}/user/orders`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º –∑–∞–∫–∞–∑—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    const responseCards = page.locator('.response-card, [data-testid="response-card"], .order-response');
    const responseCount = await responseCards.count();
    
    if (responseCount > 0) {
      for (let i = 0; i < Math.min(2, responseCount); i++) {
        try {
          const responseCard = responseCards.nth(i);
          
          // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞
          await responseCard.click();
          await page.waitForLoadState('networkidle');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
          
          // –ò—â–µ–º —á–∞—Ç —Å –º–∞—Å—Ç–µ—Ä–æ–º
          const chatInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .chat-input');
          if (await chatInput.count() > 0) {
            const chatMessages = [
              `–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –æ—Ç–∫–ª–∏–∫. –ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`,
              `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É. –ö–æ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å?`,
              `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è. –ö–∞–∫–∞—è —Ü–µ–Ω–∞?`,
              `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç?`
            ];
            const randomMessage = chatMessages[Math.floor(Math.random() * chatMessages.length)];
            
            await chatInput.nth(0).fill(randomMessage);
            console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É ${i + 1}`);
            successfulActions++;
            totalActions++;
            
            await page.waitForTimeout(config.delayBetweenActions);
            
            await chatInput.nth(0).press('Enter');
            console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É ${i + 1}`);
            successfulActions++;
            totalActions++;
            
            globalData.activeChats.push({
              clientId: userId,
              masterIndex: i,
              message: randomMessage,
              timestamp: new Date()
            });
            
            await page.waitForTimeout(config.delayBetweenActions);
          }
          
          // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
          const acceptButton = page.locator('button:has-text("–ü—Ä–∏–Ω—è—Ç—å"), button:has-text("Accept"), .accept-btn');
          if (await acceptButton.count() > 0) {
            await acceptButton.nth(0).click();
            console.log(`üë§ User ${userId}: –ü—Ä–∏–Ω—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ${i + 1}`);
            successfulActions++;
            totalActions++;
            
            await page.waitForTimeout(config.delayBetweenActions);
          }
          
          await page.goBack();
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –º–∞—Å—Ç–µ—Ä–æ–º ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 4. –ü–û–î–î–ï–†–ñ–ö–ê
  console.log(`üë§ User ${userId}: –û–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
  
  try {
    await page.goto(`${config.targetUrl}/support`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const supportMessages = [
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º. –ù–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º.`,
      `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?`,
      `–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ.`,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–∞—Å—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.`
    ];
    const randomSupportMessage = supportMessages[Math.floor(Math.random() * supportMessages.length)];
    
    const supportInput = page.locator('textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .support-input');
    if (await supportInput.count() > 0) {
      await supportInput.nth(0).fill(randomSupportMessage);
      console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      const submitSupportButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:has-text("Submit"), .support-submit');
      if (await submitSupportButton.count() > 0) {
        await submitSupportButton.nth(0).click();
        console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
async function executeAggressiveMasterScenario(page, userId) {
  console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π –ú–ê–°–¢–ï–†–ê`);
  
  // 1. –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø –ú–ê–°–¢–ï–†–ê
  console.log(`üë§ User ${userId}: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
  
  try {
    await page.goto(`${config.targetUrl}/profile`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
    if (await nameInput.count() > 0) {
      await nameInput.fill(`–ú–∞—Å—Ç–µ—Ä ${userId} - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª`);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∏–º—è –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
    if (await bioInput.count() > 0) {
      await bioInput.fill(`–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –º–µ–±–µ–ª–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫—É—Ö–Ω—è—Ö, —à–∫–∞—Ñ–∞—Ö, —Å–ø–∞–ª—å–Ω—è—Ö. –†–∞–±–æ—Ç–∞—é —Å –ú–î–§, –º–∞—Å—Å–∏–≤–æ–º –¥–µ—Ä–µ–≤–∞, –õ–î–°–ü. –û–ø—ã—Ç 8 –ª–µ—Ç. –ì–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞. –ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ–¥–æ—Ä–æ–≥–æ!`);
      console.log(`üë§ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const saveButton = page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), button:has-text("Update")').first();
    if (await saveButton.count() > 0) {
      await saveButton.click();
      console.log(`üë§ User ${userId}: –°–æ—Ö—Ä–∞–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 2. –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –ü–û–†–¢–§–û–õ–ò–û
  console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ`);
  
  try {
    await page.goto(`${config.targetUrl}/create-video-ad`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const videoData = {
      title: `–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ ${userId} - –ö—É—Ö–Ω—è –∏–∑ –ú–î–§ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞`,
      description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—É—Ö–Ω–∏ –∏–∑ –ú–î–§ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞. –û—Ç –∑–∞–º–µ—Ä–æ–≤ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞!`,
      tags: '–º–µ–±–µ–ª—å, –∫—É—Ö–Ω—è, –ú–î–§, –Ω–∞ –∑–∞–∫–∞–∑, —Ä—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ø—Ä–µ–º–∏—É–º'
    };
    
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(videoData.title);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(videoData.description);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const tagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
    if (await tagsInput.count() > 0) {
      await tagsInput.fill(videoData.tags);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª —Ç–µ–≥–∏ –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const submitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      globalData.createdVideos.push({
        id: `video_${userId}_${Date.now()}`,
        masterId: userId,
        title: videoData.title,
        description: videoData.description,
        createdAt: new Date()
      });
      
      await page.waitForTimeout(config.delayBetweenActions * 5);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 3. –û–¢–í–ï–¢–´ –ù–ê –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–û–í
  console.log(`üë§ User ${userId}: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  
  try {
    await page.goto(`${config.targetUrl}/master/orders`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderCards = page.locator('.order-card, [data-testid="order-card"], .client-order');
    const orderCount = await orderCards.count();
    
    if (orderCount > 0) {
      for (let i = 0; i < Math.min(3, orderCount); i++) {
        try {
          const orderCard = orderCards.nth(i);
          
          const respondButton = orderCard.locator('button:has-text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"), button:has-text("Respond"), .respond-btn');
          if (await respondButton.count() > 0) {
            await respondButton.click();
            console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' –Ω–∞ –∑–∞–∫–∞–∑ ${i + 1}`);
            successfulActions++;
            totalActions++;
            
            await page.waitForLoadState('networkidle');
            await page.waitForTimeout(config.delayBetweenActions);
            
            const responseTexts = [
              `–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑! –û–ø—ã—Ç 8 –ª–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°—Ä–æ–∫ 2 –Ω–µ–¥–µ–ª–∏. –¶–µ–Ω–∞ 120000 —Ç–µ–Ω–≥–µ. –ì–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞.`,
              `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫. –¶–µ–Ω–∞ 100000 —Ç–µ–Ω–≥–µ. –°—Ä–æ–∫ 10 –¥–Ω–µ–π.`,
              `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–∫–∏–¥–∫—É 10%. –¶–µ–Ω–∞ 135000 —Ç–µ–Ω–≥–µ. –°—Ä–æ–∫ 3 –Ω–µ–¥–µ–ª–∏.`
            ];
            const randomResponseText = responseTexts[Math.floor(Math.random() * responseTexts.length)];
            
            const responseInput = page.locator('textarea[placeholder*="–æ—Ç–∫–ª–∏–∫"], textarea[placeholder*="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"], .response-input');
            if (await responseInput.count() > 0) {
              await responseInput.nth(0).fill(randomResponseText);
              console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ ${i + 1}`);
              successfulActions++;
              totalActions++;
              
              await page.waitForTimeout(config.delayBetweenActions);
            }
            
            const submitResponseButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫"), button:has-text("Submit"), .submit-response');
            if (await submitResponseButton.count() > 0) {
              await submitResponseButton.click();
              console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ ${i + 1}`);
              successfulActions++;
              totalActions++;
              
              await page.waitForTimeout(config.delayBetweenActions);
            }
          }
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 4. –ß–ê–¢ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò
  console.log(`üë§ User ${userId}: –û–±—â–∞–µ—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —á–∞—Ç–∞—Ö`);
  
  try {
    await page.goto(`${config.targetUrl}/chat`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .chat-input');
    if (await messageInput.count() > 0) {
      const masterMessages = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É? –ú–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.`,
        `–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–∞ —Å—É–º–º—É —Å–≤—ã—à–µ 100000 —Ç–µ–Ω–≥–µ.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫. –ì–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞!`
      ];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
      for (let i = 0; i < 3; i++) {
        try {
          const randomMessage = masterMessages[Math.floor(Math.random() * masterMessages.length)];
          
          await messageInput.nth(0).fill(randomMessage);
          console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
          
          await messageInput.nth(0).press('Enter');
          console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          globalData.activeChats.push({
            masterId: userId,
            clientIndex: i,
            message: randomMessage,
            timestamp: new Date()
          });
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 5. –û–¢–í–ï–¢–´ –ù–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
  console.log(`üë§ User ${userId}: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ`);
  
  try {
    await page.goto(`${config.targetUrl}/videos`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º —Å–≤–æ–∏ –≤–∏–¥–µ–æ
    const videoCards = page.locator('.video-card, [data-testid="video-card"], .my-video');
    const videoCount = await videoCards.count();
    
    if (videoCount > 0) {
      for (let i = 0; i < Math.min(2, videoCount); i++) {
        try {
          await videoCards.nth(i).click();
          await page.waitForLoadState('networkidle');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –≤–∏–¥–µ–æ ${i + 1}`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
          
          // –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          const commentInputs = page.locator('input[placeholder*="–æ—Ç–≤–µ—Ç"], textarea[placeholder*="–æ—Ç–≤–µ—Ç"], .reply-input');
          const commentCount = await commentInputs.count();
          
          if (commentCount > 0) {
            for (let j = 0; j < Math.min(2, commentCount); j++) {
              try {
                const replyMessages = [
                  `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!`,
                  `–î–∞, –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑. –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`,
                  `–°–ø–∞—Å–∏–±–æ! –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –û–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏.`,
                  `–ö–æ–Ω–µ—á–Ω–æ! –ü–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π.`
                ];
                const randomReply = replyMessages[Math.floor(Math.random() * replyMessages.length)];
                
                await commentInputs.nth(j).fill(randomReply);
                console.log(`üë§ User ${userId}: –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${j + 1}`);
                successfulActions++;
                totalActions++;
                
                await page.waitForTimeout(config.delayBetweenActions);
                
                const submitReplyButtons = page.locator('button:has-text("–û—Ç–≤–µ—Ç–∏—Ç—å"), button:has-text("Reply"), .reply-submit');
                if (await submitReplyButtons.count() > 0) {
                  await submitReplyButtons.nth(0).click();
                  console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${j + 1}`);
                  successfulActions++;
                  totalActions++;
                  
                  await page.waitForTimeout(config.delayBetweenActions);
                }
              } catch (error) {
                console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${j + 1} - ${error.message}`);
                failedActions++;
                totalActions++;
              }
            }
          }
          
          await page.goBack();
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 6. –ü–û–î–î–ï–†–ñ–ö–ê
  console.log(`üë§ User ${userId}: –û–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
  
  try {
    await page.goto(`${config.targetUrl}/support`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const masterSupportMessages = [
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º. –ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
      `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è?`,
      `–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?`
    ];
    const randomSupportMessage = masterSupportMessages[Math.floor(Math.random() * masterSupportMessages.length)];
    
    const supportInput = page.locator('textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .support-input');
    if (await supportInput.count() > 0) {
      await supportInput.nth(0).fill(randomSupportMessage);
      console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      const submitSupportButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:has-text("Submit"), .support-submit');
      if (await submitSupportButton.count() > 0) {
        await submitSupportButton.nth(0).click();
        console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 1; i <= config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    createAggressiveUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log(`üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: ${globalData.activeChats.length}`);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
    console.log(`üé• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
    console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
    console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${globalData.comments.length}`);
    console.log(`üë• –ü–æ–¥–ø–∏—Å–æ–∫: ${globalData.subscriptions.length}`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log(`üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: ${globalData.activeChats.length}`);
  console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
  console.log(`üé• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
  console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
  console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${globalData.comments.length}`);
  console.log(`üë• –ü–æ–¥–ø–∏—Å–æ–∫: ${globalData.subscriptions.length}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLoadTest().catch(console.error);
