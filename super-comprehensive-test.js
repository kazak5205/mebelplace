#!/usr/bin/env node

const { chromium } = require('playwright');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  target: 'https://mebelplace.com.kz',
  totalUsers: 50,
  concurrentUsers: 10,
  testDuration: 1200, // 20 –º–∏–Ω—É—Ç
  interactionDelay: 5000 // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  users: [],
  interactions: [],
  totalRequests: 0,
  totalErrors: 0,
  startTime: Date.now()
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const createTestFiles = () => {
  const fs = require('fs');
  const path = require('path');
  
  const testVideoPath = path.join(__dirname, 'test-video.mp4');
  const testImagePath = path.join(__dirname, 'test-image.jpg');
  const testAvatarPath = path.join(__dirname, 'test-avatar.jpg');
  
  if (!fs.existsSync(testVideoPath)) {
    fs.writeFileSync(testVideoPath, 'fake video content for testing');
  }
  if (!fs.existsSync(testImagePath)) {
    fs.writeFileSync(testImagePath, 'fake image content for testing');
  }
  if (!fs.existsSync(testAvatarPath)) {
    fs.writeFileSync(testAvatarPath, 'fake avatar content for testing');
  }
  
  return { testVideoPath, testImagePath, testAvatarPath };
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
const globalData = {
  createdOrders: [],
  createdVideos: [],
  createdUsers: [],
  activeChats: [],
  supportTickets: []
};

// –°–£–ü–ï–†-–ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø–ú–ò
async function simulateSuperUserJourney(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  const userStats = {
    id: userId,
    startTime: Date.now(),
    actions: [],
    errors: [],
    uploadedContent: [],
    interactions: [],
    role: null,
    authToken: null
  };
  
  const { testVideoPath, testImagePath, testAvatarPath } = createTestFiles();
  
  try {
    console.log(`üåê User ${userId}: Starting SUPER journey...`);
    
    // 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    await page.goto(CONFIG.target, { waitUntil: 'networkidle' });
    userStats.actions.push('visited_homepage');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await page.click('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    await page.waitForLoadState('networkidle');
    
    const phone = `+7778${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`;
    const username = `testuser${userId}`;
    const password = 'testpass123';
    const isMaster = Math.random() > 0.6; // 40% –º–∞—Å—Ç–µ—Ä–æ–≤, 60% –∫–ª–∏–µ–Ω—Ç–æ–≤
    userStats.role = isMaster ? 'master' : 'client';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try {
      await page.selectOption('select', isMaster ? 'master' : 'client');
      await page.fill('input[placeholder*="+7"]', phone);
      await page.fill('input[placeholder*="username"]', username);
      await page.fill('input[placeholder*="–ø–∞—Ä–æ–ª—å"]', password);
      await page.fill('input[placeholder*="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ"]', password);
      
      userStats.actions.push('filled_registration_form');
      console.log(`üë§ User ${userId}: Filled registration (${userStats.role})`);
      
      await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")');
      await page.waitForTimeout(2000);
      userStats.actions.push('submitted_registration');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      globalData.createdUsers.push({
        id: userId,
        username,
        phone,
        role: userStats.role,
        registeredAt: new Date()
      });
      
    } catch (error) {
      userStats.errors.push(`Registration failed: ${error.message}`);
      console.log(`‚ùå User ${userId}: Registration failed - ${error.message}`);
    }
    
    // 2. –í–•–û–î –í –°–ò–°–¢–ï–ú–£
    try {
      await page.click('text=–í–æ–π—Ç–∏');
      await page.waitForLoadState('networkidle');
      await page.fill('input[placeholder*="+7"]', phone);
      await page.fill('input[type="password"]', password);
      await page.click('button:has-text("–í–æ–π—Ç–∏")');
      await page.waitForTimeout(3000);
      userStats.actions.push('attempted_login');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = await page.evaluate(() => localStorage.getItem('accessToken'));
      if (token) {
        userStats.authToken = token;
        console.log(`üë§ User ${userId}: Successfully authenticated`);
      }
      
    } catch (error) {
      userStats.errors.push(`Login failed: ${error.message}`);
    }
    
    // 3. –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
    if (!isMaster) {
      console.log(`üë§ User ${userId}: Starting CLIENT SUPER scenario...`);
      
      // 3.1 –ü–†–û–°–ú–û–¢–† –ö–ê–¢–ê–õ–û–ì–ê –ú–ê–°–¢–ï–†–û–í –ò –ü–û–î–ü–ò–°–ö–ò
      try {
        await page.goto(`${CONFIG.target}/masters`, { waitUntil: 'networkidle' });
        userStats.actions.push('viewed_masters_catalog');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        const masterCards = await page.locator('.master-card, [data-testid="master-card"]').count();
        if (masterCards > 0) {
          const randomMaster = Math.floor(Math.random() * Math.min(masterCards, 3));
          const masterCard = page.locator('.master-card, [data-testid="master-card"]').nth(randomMaster);
          
          // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞
          const subscribeButton = masterCard.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), button:has-text("Subscribe")').first();
          if (await subscribeButton.count() > 0) {
            await subscribeButton.click();
            await page.waitForTimeout(1000);
            userStats.actions.push('subscribed_to_master');
            userStats.interactions.push('master_subscription');
            console.log(`üë§ User ${userId}: Subscribed to master`);
          }
        }
        
        console.log(`üë§ User ${userId}: Viewed masters catalog`);
      } catch (error) {
        console.log(`üë§ User ${userId}: Masters catalog failed - ${error.message}`);
      }
      
      // 3.2 –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –ó–ê–ö–ê–ó–ê
      try {
        await page.goto(`${CONFIG.target}/orders/create`, { waitUntil: 'networkidle' });
        
        const orderData = {
          title: `–ó–∞–∫–∞–∑ –∫—É—Ö–Ω–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
          description: `–ù—É–∂–Ω–∞ –∫—É—Ö–Ω—è 3 –º–µ—Ç—Ä–∞, —Ü–≤–µ—Ç –±–µ–ª—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª –ú–î–§, –±—é–¥–∂–µ—Ç 150000 —Ç–µ–Ω–≥–µ. –°—Ä–æ–∫ –¥–æ 1 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞.`,
          category: 'furniture',
          region: '–ê–ª–º–∞—Ç—ã',
          budget: '150000'
        };
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
        const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
        if (await titleInput.count() > 0) {
          await titleInput.fill(orderData.title);
        }
        
        const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
        if (await descInput.count() > 0) {
          await descInput.fill(orderData.description);
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏)
        const categorySelect = page.locator('select[name*="category"]').first();
        if (await categorySelect.count() > 0) {
          await categorySelect.selectOption('furniture');
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω
        const regionSelect = page.locator('select[name*="region"]').first();
        if (await regionSelect.count() > 0) {
          await regionSelect.selectOption('–ê–ª–º–∞—Ç—ã');
        }
        
        // –ë—é–¥–∂–µ—Ç
        const budgetInput = page.locator('input[name*="budget"], input[placeholder*="–±—é–¥–∂–µ—Ç"]').first();
        if (await budgetInput.count() > 0) {
          await budgetInput.fill(orderData.budget);
        }
        
        userStats.actions.push('filled_detailed_order_form');
        console.log(`üë§ User ${userId}: Filled detailed order form`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
        const fileInput = page.locator('input[type="file"]').first();
        if (await fileInput.count() > 0) {
          await fileInput.setInputFiles(testImagePath);
          userStats.actions.push('uploaded_order_photo');
          userStats.uploadedContent.push('order_photo');
          console.log(`üë§ User ${userId}: Uploaded order photo`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")').first();
        if (await submitButton.count() > 0) {
          await submitButton.click();
          await page.waitForTimeout(3000);
          userStats.actions.push('submitted_detailed_order');
          userStats.uploadedContent.push('order_created');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
          globalData.createdOrders.push({
            id: `order_${userId}_${Date.now()}`,
            clientId: userId,
            title: orderData.title,
            description: orderData.description,
            status: 'pending',
            createdAt: new Date()
          });
          
          console.log(`üë§ User ${userId}: Created detailed order`);
        }
      } catch (error) {
        userStats.errors.push(`Order creation failed: ${error.message}`);
        console.log(`‚ùå User ${userId}: Order creation failed - ${error.message}`);
      }
      
      // 3.3 –ü–†–û–°–ú–û–¢–† –°–í–û–ò–• –ó–ê–ö–ê–ó–û–í –ò –û–¢–í–ï–¢–û–í –ú–ê–°–¢–ï–†–û–í
      try {
        await page.goto(`${CONFIG.target}/user/orders`, { waitUntil: 'networkidle' });
        userStats.actions.push('viewed_my_orders');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤
        const responseCards = await page.locator('.response-card, [data-testid="response-card"]').count();
        if (responseCards > 0) {
          // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
          const acceptButton = page.locator('button:has-text("–ü—Ä–∏–Ω—è—Ç—å"), button:has-text("Accept")').first();
          if (await acceptButton.count() > 0) {
            await acceptButton.click();
            await page.waitForTimeout(2000);
            userStats.actions.push('accepted_master_response');
            userStats.interactions.push('order_acceptance');
            console.log(`üë§ User ${userId}: Accepted master response`);
          }
        }
        
        console.log(`üë§ User ${userId}: Viewed my orders`);
      } catch (error) {
        console.log(`üë§ User ${userId}: My orders failed - ${error.message}`);
      }
      
      // 3.4 –ß–ê–¢ –° –ú–ê–°–¢–ï–†–ê–ú–ò
      try {
        await page.goto(`${CONFIG.target}/chat`, { waitUntil: 'networkidle' });
        userStats.actions.push('accessed_chat');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
        if (await messageInput.count() > 0) {
          const messages = [
            `–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`,
            `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª –±—ã —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`,
            `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∏–¥–∫–∏?`,
            `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç?`
          ];
          const randomMessage = messages[Math.floor(Math.random() * messages.length)];
          
          await messageInput.fill(randomMessage);
          await messageInput.press('Enter');
          userStats.actions.push('sent_chat_message');
          userStats.interactions.push('chat_message');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
          globalData.activeChats.push({
            clientId: userId,
            message: randomMessage,
            timestamp: new Date()
          });
          
          console.log(`üë§ User ${userId}: Sent chat message`);
        }
      } catch (error) {
        console.log(`üë§ User ${userId}: Chat failed - ${error.message}`);
      }
      
      // 3.5 –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ò –ê–í–ê–¢–ê–†–ö–ê
      try {
        await page.goto(`${CONFIG.target}/profile`, { waitUntil: 'networkidle' });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        const avatarInput = page.locator('input[type="file"][accept*="image"]').first();
        if (await avatarInput.count() > 0) {
          await avatarInput.setInputFiles(testAvatarPath);
          userStats.actions.push('uploaded_avatar');
          userStats.uploadedContent.push('avatar');
          console.log(`üë§ User ${userId}: Uploaded avatar`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
        if (await bioInput.count() > 0) {
          await bioInput.fill(`–ö–ª–∏–µ–Ω—Ç ${userId}. –ò—â—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞.`);
        }
        
        userStats.actions.push('updated_profile');
        console.log(`üë§ User ${userId}: Updated profile`);
      } catch (error) {
        console.log(`üë§ User ${userId}: Profile update failed - ${error.message}`);
      }
      
      // 3.6 –û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£
      try {
        await page.goto(`${CONFIG.target}/support`, { waitUntil: 'networkidle' });
        userStats.actions.push('accessed_support');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const ticketForm = page.locator('form, [data-testid="support-form"]').first();
        if (await ticketForm.count() > 0) {
          const subjectInput = page.locator('input[name*="subject"], input[placeholder*="—Ç–µ–º–∞"]').first();
          if (await subjectInput.count() > 0) {
            await subjectInput.fill(`–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`);
          }
          
          const messageInput = page.locator('textarea[name*="message"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
          if (await messageInput.count() > 0) {
            await messageInput.fill(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É. –ö–∞–∫ –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏?`);
          }
          
          const submitButton = page.locator('button[type="submit"], button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
          if (await submitButton.count() > 0) {
            await submitButton.click();
            userStats.actions.push('created_support_ticket');
            userStats.interactions.push('support_ticket');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            globalData.supportTickets.push({
              clientId: userId,
              subject: `–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
              message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É. –ö–∞–∫ –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏?`,
              status: 'open',
              createdAt: new Date()
            });
            
            console.log(`üë§ User ${userId}: Created support ticket`);
          }
        }
      } catch (error) {
        console.log(`üë§ User ${userId}: Support failed - ${error.message}`);
      }
    }
    
    // 4. –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ú–ê–°–¢–ï–†–û–í
    if (isMaster) {
      console.log(`üë§ User ${userId}: Starting MASTER SUPER scenario...`);
      
      // 4.1 –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø –ú–ê–°–¢–ï–†–ê –ò –ê–í–ê–¢–ê–†–ö–ê
      try {
        await page.goto(`${CONFIG.target}/profile`, { waitUntil: 'networkidle' });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
        const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
        if (await nameInput.count() > 0) {
          await nameInput.fill(`–ú–∞—Å—Ç–µ—Ä ${userId}`);
        }
        
        const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
        if (await bioInput.count() > 0) {
          await bioInput.fill(`–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –º–µ–±–µ–ª–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫—É—Ö–Ω—è—Ö –∏ —à–∫–∞—Ñ–∞—Ö. –†–∞–±–æ—Ç–∞—é —Å –ú–î–§, –º–∞—Å—Å–∏–≤–æ–º –¥–µ—Ä–µ–≤–∞. –û–ø—ã—Ç 5 –ª–µ—Ç.`);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        const avatarInput = page.locator('input[type="file"][accept*="image"]').first();
        if (await avatarInput.count() > 0) {
          await avatarInput.setInputFiles(testAvatarPath);
          userStats.actions.push('uploaded_avatar');
          userStats.uploadedContent.push('master_avatar');
        }
        
        userStats.actions.push('updated_master_profile');
        console.log(`üë§ User ${userId}: Updated master profile`);
      } catch (error) {
        console.log(`üë§ User ${userId}: Profile update failed - ${error.message}`);
      }
      
      // 4.2 –ó–ê–ì–†–£–ó–ö–ê –ü–û–†–¢–§–û–õ–ò–û –í–ò–î–ï–û
      try {
        await page.goto(`${CONFIG.target}/create-video-ad`, { waitUntil: 'networkidle' });
        
        const videoData = {
          title: `–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ ${userId} - –ö—É—Ö–Ω—è –∏–∑ –ú–î–§`,
          description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—É—Ö–Ω–∏ –∏–∑ –ú–î–§. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –∑–∞–º–µ—Ä–æ–≤ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≥–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞.`,
          category: 'furniture',
          tags: '–º–µ–±–µ–ª—å, –∫—É—Ö–Ω—è, –ú–î–§, –Ω–∞ –∑–∞–∫–∞–∑, —Ä—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
        };
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤–∏–¥–µ–æ
        const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
        if (await titleInput.count() > 0) {
          await titleInput.fill(videoData.title);
        }
        
        const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
        if (await descInput.count() > 0) {
          await descInput.fill(videoData.description);
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const categorySelect = page.locator('select[name*="category"]').first();
        if (await categorySelect.count() > 0) {
          await categorySelect.selectOption('furniture');
        }
        
        // –¢–µ–≥–∏
        const tagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
        if (await tagsInput.count() > 0) {
          await tagsInput.fill(videoData.tags);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        const videoInput = page.locator('input[type="file"][accept*="video"]').first();
        if (await videoInput.count() > 0) {
          await videoInput.setInputFiles(testVideoPath);
          userStats.actions.push('selected_video_file');
          console.log(`üë§ User ${userId}: Selected video file`);
        }
        
        userStats.actions.push('filled_video_form');
        console.log(`üë§ User ${userId}: Filled video form`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        const submitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å")').first();
        if (await submitButton.count() > 0) {
          await submitButton.click();
          await page.waitForTimeout(5000);
          userStats.actions.push('submitted_video');
          userStats.uploadedContent.push('video_uploaded');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
          globalData.createdVideos.push({
            id: `video_${userId}_${Date.now()}`,
            masterId: userId,
            title: videoData.title,
            description: videoData.description,
            category: videoData.category,
            createdAt: new Date()
          });
          
          console.log(`üë§ User ${userId}: Uploaded portfolio video`);
        }
      } catch (error) {
        userStats.errors.push(`Video upload failed: ${error.message}`);
        console.log(`‚ùå User ${userId}: Video upload failed - ${error.message}`);
      }
      
      // 4.3 –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–û–í –ö–õ–ò–ï–ù–¢–û–í –ò –û–¢–í–ï–¢–´
      try {
        await page.goto(`${CONFIG.target}/master/orders`, { waitUntil: 'networkidle' });
        userStats.actions.push('viewed_client_orders');
        
        // –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –∑–∞–∫–∞–∑—ã
        const orderCards = await page.locator('.order-card, [data-testid="order-card"]').count();
        if (orderCards > 0) {
          const randomOrder = Math.floor(Math.random() * Math.min(orderCards, 2));
          const orderCard = page.locator('.order-card, [data-testid="order-card"]').nth(randomOrder);
          
          // –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑
          const respondButton = orderCard.locator('button:has-text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"), button:has-text("Respond")').first();
          if (await respondButton.count() > 0) {
            await respondButton.click();
            await page.waitForLoadState('networkidle');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫
            const responseText = `–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑! –û–ø—ã—Ç 5 –ª–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°—Ä–æ–∫ 2 –Ω–µ–¥–µ–ª–∏. –¶–µ–Ω–∞ 120000 —Ç–µ–Ω–≥–µ.`;
            const responseInput = page.locator('textarea[placeholder*="–æ—Ç–∫–ª–∏–∫"], textarea[placeholder*="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]').first();
            if (await responseInput.count() > 0) {
              await responseInput.fill(responseText);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫
            const submitResponseButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫")').first();
            if (await submitResponseButton.count() > 0) {
              await submitResponseButton.click();
              userStats.actions.push('responded_to_order');
              userStats.uploadedContent.push('order_response');
              userStats.interactions.push('order_response');
              console.log(`üë§ User ${userId}: Responded to order`);
            }
          }
        }
        
        console.log(`üë§ User ${userId}: Viewed client orders`);
      } catch (error) {
        console.log(`üë§ User ${userId}: Order response failed - ${error.message}`);
      }
      
      // 4.4 –ß–ê–¢ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò
      try {
        await page.goto(`${CONFIG.target}/chat`, { waitUntil: 'networkidle' });
        userStats.actions.push('accessed_master_chat');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
        if (await messageInput.count() > 0) {
          const messages = [
            `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.`,
            `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É? –ú–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.`,
            `–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?`,
            `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–∞ —Å—É–º–º—É —Å–≤—ã—à–µ 100000 —Ç–µ–Ω–≥–µ.`
          ];
          const randomMessage = messages[Math.floor(Math.random() * messages.length)];
          
          await messageInput.fill(randomMessage);
          await messageInput.press('Enter');
          userStats.actions.push('sent_master_message');
          userStats.interactions.push('master_chat_message');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
          globalData.activeChats.push({
            masterId: userId,
            message: randomMessage,
            timestamp: new Date()
          });
          
          console.log(`üë§ User ${userId}: Sent master message`);
        }
      } catch (error) {
        console.log(`üë§ User ${userId}: Master chat failed - ${error.message}`);
      }
      
      // 4.5 –ü–†–û–°–ú–û–¢–† –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
      try {
        await page.goto(`${CONFIG.target}/master/analytics`, { waitUntil: 'networkidle' });
        userStats.actions.push('viewed_analytics');
        console.log(`üë§ User ${userId}: Viewed analytics`);
      } catch (error) {
        console.log(`üë§ User ${userId}: Analytics failed - ${error.message}`);
      }
      
      // 4.6 –û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£
      try {
        await page.goto(`${CONFIG.target}/support`, { waitUntil: 'networkidle' });
        userStats.actions.push('accessed_support');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const ticketForm = page.locator('form, [data-testid="support-form"]').first();
        if (await ticketForm.count() > 0) {
          const subjectInput = page.locator('input[name*="subject"], input[placeholder*="—Ç–µ–º–∞"]').first();
          if (await subjectInput.count() > 0) {
            await subjectInput.fill(`–í–æ–ø—Ä–æ—Å –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${userId}`);
          }
          
          const messageInput = page.locator('textarea[name*="message"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
          if (await messageInput.count() > 0) {
            await messageInput.fill(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è? –ï—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?`);
          }
          
          const submitButton = page.locator('button[type="submit"], button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
          if (await submitButton.count() > 0) {
            await submitButton.click();
            userStats.actions.push('created_support_ticket');
            userStats.interactions.push('support_ticket');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            globalData.supportTickets.push({
              masterId: userId,
              subject: `–í–æ–ø—Ä–æ—Å –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${userId}`,
              message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è? –ï—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?`,
              status: 'open',
              createdAt: new Date()
            });
            
            console.log(`üë§ User ${userId}: Created support ticket`);
          }
        }
      } catch (error) {
        console.log(`üë§ User ${userId}: Support failed - ${error.message}`);
      }
    }
    
    // 5. –û–ë–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –í–°–ï–•
    try {
      // –ü—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await page.goto(`${CONFIG.target}/notifications`, { waitUntil: 'networkidle' });
      userStats.actions.push('viewed_notifications');
      console.log(`üë§ User ${userId}: Viewed notifications`);
    } catch (error) {
      console.log(`üë§ User ${userId}: Notifications failed - ${error.message}`);
    }
    
    // 6. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° –î–†–£–ì–ò–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    if (globalData.createdOrders.length > 0 && isMaster) {
      // –ú–∞—Å—Ç–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
      const randomOrder = globalData.createdOrders[Math.floor(Math.random() * globalData.createdOrders.length)];
      if (randomOrder && randomOrder.clientId !== userId) {
        userStats.interactions.push(`responded_to_order_${randomOrder.id}`);
        console.log(`üë§ User ${userId}: Interacted with order from user ${randomOrder.clientId}`);
      }
    }
    
    if (globalData.createdVideos.length > 0 && !isMaster) {
      // –ö–ª–∏–µ–Ω—Ç –ª–∞–π–∫–∞–µ—Ç –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä–æ–≤
      const randomVideo = globalData.createdVideos[Math.floor(Math.random() * globalData.createdVideos.length)];
      if (randomVideo && randomVideo.masterId !== userId) {
        userStats.interactions.push(`liked_video_${randomVideo.id}`);
        console.log(`üë§ User ${userId}: Liked video from master ${randomVideo.masterId}`);
      }
    }
    
    userStats.endTime = Date.now();
    userStats.duration = userStats.endTime - userStats.startTime;
    
    console.log(`‚úÖ User ${userId}: Completed ${userStats.role} SUPER journey in ${userStats.duration}ms`);
    console.log(`üìä User ${userId}: Actions: ${userStats.actions.join(', ')}`);
    console.log(`üìä User ${userId}: Content: ${userStats.uploadedContent.join(', ')}`);
    console.log(`üìä User ${userId}: Interactions: ${userStats.interactions.join(', ')}`);
    
    return userStats;
    
  } catch (error) {
    console.log(`üí• User ${userId}: Critical error - ${error.message}`);
    userStats.errors.push(`Critical error: ${error.message}`);
    userStats.endTime = Date.now();
    return userStats;
  } finally {
    await browser.close();
  }
}

// –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–î–î–ï–†–ñ–ö–ò
async function simulateSupportResponse() {
  console.log('üéß Support: Starting response simulation...');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç—ã
  for (const ticket of globalData.supportTickets) {
    if (ticket.status === 'open') {
      console.log(`üéß Support: Responding to ticket from ${ticket.clientId || ticket.masterId}`);
      ticket.status = 'responded';
      ticket.responseAt = new Date();
      ticket.response = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.';
    }
  }
}

// –ó–∞–ø—É—Å–∫ –°–£–ü–ï–†-–ü–û–õ–ù–û–ì–û —Ç–µ—Å—Ç–∞
async function runSuperComprehensiveTest() {
  console.log('üöÄ STARTING SUPER COMPREHENSIVE LOAD TEST FOR MEBELPLACE');
  console.log('‚ïê'.repeat(80));
  console.log(`üéØ Target: ${CONFIG.target}`);
  console.log(`üë• Total Users: ${CONFIG.totalUsers}`);
  console.log(`‚è±Ô∏è  Duration: ${CONFIG.testDuration}s`);
  console.log(`üîÑ Concurrent: ${CONFIG.concurrentUsers}`);
  console.log(`ü§ù Interactions: ENABLED`);
  console.log('‚ïê'.repeat(80));
  
  const startTime = Date.now();
  const users = [];
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  for (let i = 0; i < CONFIG.totalUsers; i++) {
    const delay = i * 15000; // 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    setTimeout(async () => {
      const user = await simulateSuperUserJourney(i + 1);
      users.push(user);
      stats.users.push(user);
      
      console.log(`üë§ User ${i + 1} completed (${stats.users.length} total users)`);
    }, delay);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  setTimeout(() => {
    simulateSupportResponse();
  }, CONFIG.testDuration * 1000 / 2);
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  await new Promise(resolve => setTimeout(resolve, CONFIG.testDuration * 1000));
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const endTime = Date.now();
  const totalDuration = (endTime - startTime) / 1000;
  
  const totalActions = users.reduce((sum, user) => sum + user.actions.length, 0);
  const totalErrors = users.reduce((sum, user) => sum + user.errors.length, 0);
  const totalContent = users.reduce((sum, user) => sum + user.uploadedContent.length, 0);
  const totalInteractions = users.reduce((sum, user) => sum + user.interactions.length, 0);
  const avgDuration = users.reduce((sum, user) => sum + (user.duration || 0), 0) / users.length;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
  const clients = users.filter(u => u.role === 'client');
  const masters = users.filter(u => u.role === 'master');
  
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('üìä SUPER COMPREHENSIVE LOAD TEST RESULTS');
  console.log('‚ïê'.repeat(80));
  console.log(`‚è±Ô∏è  Test Duration: ${totalDuration.toFixed(2)}s`);
  console.log(`üë• Total Users: ${stats.users.length}`);
  console.log(`üë§ Clients: ${clients.length}`);
  console.log(`üî® Masters: ${masters.length}`);
  console.log(`üé¨ Total Actions: ${totalActions}`);
  console.log(`‚ùå Total Errors: ${totalErrors}`);
  console.log(`üìÅ Content Created: ${totalContent}`);
  console.log(`ü§ù Total Interactions: ${totalInteractions}`);
  console.log(`üìä Avg User Duration: ${avgDuration.toFixed(2)}ms`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const actionCounts = {};
  const contentCounts = {};
  const interactionCounts = {};
  const roleStats = { client: { actions: 0, content: 0, interactions: 0 }, master: { actions: 0, content: 0, interactions: 0 } };
  
  users.forEach(user => {
    user.actions.forEach(action => {
      actionCounts[action] = (actionCounts[action] || 0) + 1;
    });
    user.uploadedContent.forEach(content => {
      contentCounts[content] = (contentCounts[content] || 0) + 1;
    });
    user.interactions.forEach(interaction => {
      interactionCounts[interaction] = (interactionCounts[interaction] || 0) + 1;
    });
    
    if (user.role) {
      roleStats[user.role].actions += user.actions.length;
      roleStats[user.role].content += user.uploadedContent.length;
      roleStats[user.role].interactions += user.interactions.length;
    }
  });
  
  console.log('\nüìã ACTION BREAKDOWN:');
  Object.entries(actionCounts).forEach(([action, count]) => {
    console.log(`  ${action}: ${count} times`);
  });
  
  console.log('\nüìÅ CONTENT CREATED:');
  Object.entries(contentCounts).forEach(([content, count]) => {
    console.log(`  ${content}: ${count} items`);
  });
  
  console.log('\nü§ù INTERACTIONS:');
  Object.entries(interactionCounts).forEach(([interaction, count]) => {
    console.log(`  ${interaction}: ${count} times`);
  });
  
  console.log('\nüë• ROLE STATISTICS:');
  console.log(`  Clients: ${roleStats.client.actions} actions, ${roleStats.client.content} content, ${roleStats.client.interactions} interactions`);
  console.log(`  Masters: ${roleStats.master.actions} actions, ${roleStats.master.content} content, ${roleStats.master.interactions} interactions`);
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('\nüåç GLOBAL DATA:');
  console.log(`  Created Orders: ${globalData.createdOrders.length}`);
  console.log(`  Created Videos: ${globalData.createdVideos.length}`);
  console.log(`  Active Chats: ${globalData.activeChats.length}`);
  console.log(`  Support Tickets: ${globalData.supportTickets.length}`);
  
  // –û—Ü–µ–Ω–∫–∞
  console.log('\nüéØ PERFORMANCE ASSESSMENT:');
  if (totalErrors < totalActions * 0.1) {
    console.log('‚úÖ EXCELLENT - Site handles all user scenarios perfectly!');
  } else if (totalErrors < totalActions * 0.3) {
    console.log('‚ö†Ô∏è  GOOD - Some issues detected, but generally working');
  } else {
    console.log('‚ùå NEEDS OPTIMIZATION - Significant issues detected');
  }
  
  console.log('‚ïê'.repeat(80));
}

// –ó–∞–ø—É—Å–∫
runSuperComprehensiveTest().catch(console.error);
