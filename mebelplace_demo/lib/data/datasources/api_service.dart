import 'dart:io';
import 'package:dio/dio.dart';
import '../models/user_model.dart';
import '../models/video_model.dart';
import '../models/order_model.dart';
import '../models/chat_model.dart';
import '../models/message_model.dart';
import '../models/order_response_model.dart';
import '../adapters/case_converter.dart';
import 'local_storage.dart';

// API Service with real endpoints from OpenAPI
class ApiService {
  final Dio _dio;
  
  ApiService(this._dio) {
    _dio.options.baseUrl = 'https://mebelplace.com.kz/api';
    _dio.options.connectTimeout = const Duration(seconds: 30);
    _dio.options.receiveTimeout = const Duration(seconds: 30);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        // –î–æ–±–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        final token = await LocalStorage().getToken();
        if (token != null && token.isNotEmpty) {
          options.headers['Authorization'] = 'Bearer $token';
        }
        handler.next(options);
      },
      onResponse: (response, handler) {
        // ‚úÖ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø snake_case ‚Üí camelCase (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!)
        if (response.data != null) {
          response.data = snakeToCamel(response.data);
        }
        return handler.next(response);
      },
    ));
  }


  // Auth endpoints
  Future<ApiResponse<AuthData>> login(LoginRequest request) async {
    try {
      final response = await _dio.post('/auth/login', data: {
        'phone': request.phone,
        'password': request.password,
      });
      
      if (response.statusCode == 200) {
        final responseData = response.data;
        
        // ‚úÖ –ë–≠–ö –í–û–ó–í–†–ê–©–ê–ï–¢: { success, data: { user, accessToken, refreshToken } }
        final data = responseData['data'] ?? responseData;
        final user = UserModel.fromJson(data['user']);
        
        // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
        final accessToken = data['accessToken'] ?? data['access_token'] ?? data['token'];
        final refreshToken = data['refreshToken'] ?? data['refresh_token'];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        await LocalStorage().saveToken(accessToken);
        if (refreshToken != null) {
          await LocalStorage().saveRefreshToken(refreshToken);
        }
        
        return ApiResponse<AuthData>(
          success: true,
          data: AuthData(
            user: user, 
            accessToken: accessToken,
            refreshToken: refreshToken,
          ),
          message: responseData['message'] ?? '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<AuthData>(
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      // Fallback –¥–ª—è –¥–µ–º–æ
      if (request.phone == 'bekaron.company@gmail.com' && request.password == 'BekAron1872726') {
      final user = UserModel(
        id: '1',
          username: 'bekaron',
          phone: 'bekaron.company@gmail.com',
          firstName: 'BekAron',
          lastName: 'Company',
        avatar: 'https://picsum.photos/100/100?random=10',
        role: 'user',
        isActive: true,
        isVerified: true,
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
      );
      
      return ApiResponse<AuthData>(
        success: true,
        data: AuthData(
          user: user,
          accessToken: 'mock_access_token',
          refreshToken: 'mock_refresh_token',
        ),
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        timestamp: DateTime.now().toIso8601String(),
      );
      } else {
        throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    }
    
  }

  Future<ApiResponse<AuthData>> register(RegisterRequest request) async {
    try {
      final response = await _dio.post('/auth/register', data: {
        'phone': request.phone,
        'username': request.username,
        'password': request.password,
        'firstName': request.firstName,
        'lastName': request.lastName,
        'role': request.role,
      });
      
      if (response.statusCode == 201) {
        final data = response.data;
        final user = UserModel.fromJson(data['user']);
        final token = data['token'];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        await LocalStorage().saveToken(token);
        
        return ApiResponse<AuthData>(
          success: true,
          data: AuthData(user: user, token: token),
          message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<AuthData>(
          success: false,
          message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      // Fallback –¥–ª—è –¥–µ–º–æ
    final user = UserModel(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      username: request.username,
      phone: request.phone,
      firstName: request.firstName,
      lastName: request.lastName,
      avatar: null,
      role: request.role,
      isActive: true,
      isVerified: false,
      createdAt: DateTime.now(),
    );
    
    return ApiResponse<AuthData>(
      success: true,
      data: AuthData(
        user: user,
        accessToken: 'mock_access_token',
        refreshToken: 'mock_refresh_token',
      ),
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      timestamp: DateTime.now().toIso8601String(),
    );
    }
  }

  Future<ApiResponse<UserModel>> getCurrentUser() async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    final user = UserModel(
      id: '1',
      username: 'bekaron',
      phone: 'bekaron.company@gmail.com',
      firstName: 'BekAron',
      lastName: 'Company',
      avatar: 'https://picsum.photos/100/100?random=10',
      role: 'user',
      isActive: true,
      isVerified: true,
      createdAt: DateTime.now().subtract(const Duration(days: 30)),
    );
    
    return ApiResponse<UserModel>(
      success: true,
      data: user,
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  Future<ApiResponse<EmptyResponse>> logout(LogoutRequest request) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    return ApiResponse<EmptyResponse>(
      success: true,
      data: EmptyResponse(),
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  Future<ApiResponse<AuthData>> refreshToken(RefreshRequest request) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    final user = UserModel(
      id: '1',
      username: 'bekaron',
      phone: 'bekaron.company@gmail.com',
      firstName: 'BekAron',
      lastName: 'Company',
      avatar: 'https://picsum.photos/100/100?random=10',
      role: 'user',
      isActive: true,
      isVerified: true,
      createdAt: DateTime.now().subtract(const Duration(days: 30)),
    );
    
    return ApiResponse<AuthData>(
      success: true,
      data: AuthData(
        user: user,
        accessToken: 'new_mock_access_token',
        refreshToken: 'new_mock_refresh_token',
      ),
      message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω',
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  // Video endpoints
  Future<ApiResponse<VideoFeedData>> getVideoFeed(Map<String, dynamic> params) async {
    try {
      print('üîç API: Fetching videos from ${_dio.options.baseUrl}/videos/feed');
      print('üìù API: Params: $params');
      
      final response = await _dio.get('/videos/feed', queryParameters: params);
      
      print('‚úÖ API: Response status ${response.statusCode}');
      print('üì¶ API: Response data: ${response.data}');
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> videosJson = data['data']['videos'] ?? [];
        
        // Fix relative URLs by adding base URL
        final fixedVideosJson = videosJson.map((json) {
          final videoUrl = json['videoUrl'] as String?;
          final thumbnailUrl = json['thumbnailUrl'] as String?;
          final avatar = json['avatar'] as String?;
          
          final Map<String, dynamic> fixedJson = Map<String, dynamic>.from(json);
          fixedJson['videoUrl'] = videoUrl?.startsWith('http') == true 
              ? videoUrl 
              : 'https://mebelplace.com.kz$videoUrl';
          fixedJson['thumbnailUrl'] = thumbnailUrl?.startsWith('http') == true 
              ? thumbnailUrl 
              : (thumbnailUrl != null ? 'https://mebelplace.com.kz$thumbnailUrl' : null);
          fixedJson['avatar'] = avatar?.startsWith('http') == true 
              ? avatar 
              : (avatar != null ? 'https://mebelplace.com.kz$avatar' : null);
          
          return fixedJson;
        }).toList();
        
        final videos = fixedVideosJson.map((json) => VideoModel.fromJson(json)).toList();
        
        print('üé• API: Loaded ${videos.length} videos from server');
    
    return ApiResponse<VideoFeedData>(
      success: true,
      data: VideoFeedData(
            videos: videos,
        pagination: PaginationData(
              page: data['data']['pagination']['page'] ?? 1,
              limit: data['data']['pagination']['limit'] ?? 20,
              total: data['data']['pagination']['total'] ?? videos.length,
              totalPages: data['data']['pagination']['pages'] ?? 1,
        ),
      ),
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
      } else {
        print('‚ùå API: Bad status code ${response.statusCode}');
        return ApiResponse<VideoFeedData>(
          success: false,
          data: VideoFeedData(
            videos: [],
            pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
          ),
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      print('‚ùå API: Error fetching videos: $e');
      
      return ApiResponse<VideoFeedData>(
        success: false,
        data: VideoFeedData(
          videos: [],
          pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
        ),
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<VideoModel>> getVideo(String videoId) async {
    try {
      final response = await _dio.get('/videos/$videoId');
    
      if (response.statusCode == 200) {
        final data = response.data;
        final video = VideoModel.fromJson(data['data']);
    
    return ApiResponse<VideoModel>(
      success: true,
      data: video,
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
      } else {
        return ApiResponse<VideoModel>(
          success: false,
          message: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      return ApiResponse<VideoModel>(
        success: false,
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<LikeData>> likeVideo(String videoId) async {
    try {
      final response = await _dio.post('/videos/$videoId/like');
    
      if (response.statusCode == 200) {
        final data = response.data['data'];
    
    return ApiResponse<LikeData>(
      success: true,
      data: LikeData(
        videoId: videoId,
            likes: data['likes'] ?? 0,
        isLiked: true,
      ),
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
      } else {
        return ApiResponse<LikeData>(
          success: false,
          message: '–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      return ApiResponse<LikeData>(
        success: false,
        message: '–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<LikeData>> unlikeVideo(String videoId) async {
    try {
      final response = await _dio.delete('/videos/$videoId/like');
    
      if (response.statusCode == 200) {
        final data = response.data['data'];
    
    return ApiResponse<LikeData>(
      success: true,
      data: LikeData(
        videoId: videoId,
            likes: data['likes'] ?? 0,
        isLiked: false,
      ),
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
      } else {
        return ApiResponse<LikeData>(
          success: false,
          message: '–û—à–∏–±–∫–∞ —É–±–∏—Ä–∞–Ω–∏—è –ª–∞–π–∫–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      return ApiResponse<LikeData>(
        success: false,
        message: '–û—à–∏–±–∫–∞ —É–±–∏—Ä–∞–Ω–∏—è –ª–∞–π–∫–∞: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<EmptyResponse>> recordView(String videoId, ViewData data) async {
    await Future.delayed(const Duration(milliseconds: 200));
    
    return ApiResponse<EmptyResponse>(
      success: true,
      data: EmptyResponse(),
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  Future<ApiResponse<VideoModel>> uploadVideo(
    File video,
    String title,
    String? description,
    String? category,
    String? tags,
  ) async {
    await Future.delayed(const Duration(seconds: 2));
    
    final newVideo = VideoModel(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: title,
      description: description,
      videoUrl: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4',
      thumbnailUrl: 'https://picsum.photos/400/600?random=${DateTime.now().millisecondsSinceEpoch}',
      duration: 60,
      fileSize: 1024000,
      authorId: '1',
      username: 'demo_user',
      firstName: '–î–µ–º–æ',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      avatar: 'https://picsum.photos/100/100?random=10',
      category: category ?? '–û–±—â–µ–µ',
      tags: tags?.split(',') ?? [],
      views: 0,
      likes: 0,
      likesCount: 0,
      commentsCount: 0,
      isLiked: false,
      isFeatured: false,
      priorityOrder: null,
      isPublic: true,
      isActive: true,
      createdAt: DateTime.now(),
    );
    
    return ApiResponse<VideoModel>(
      success: true,
      data: newVideo,
      message: '–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  // Order endpoints
  Future<ApiResponse<OrderFeedData>> getOrderFeed(Map<String, dynamic> params) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π endpoint /orders/feed –∏–∑ OpenAPI
      final response = await _dio.get('/orders/feed', queryParameters: params);
      
      if (response.statusCode == 200) {
        final data = response.data;
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç data.orders, –∞ –Ω–µ data –Ω–∞–ø—Ä—è–º—É—é
        final List<dynamic> ordersJson = data['data']['orders'] ?? [];
        final orders = ordersJson.map((json) => OrderModel.fromJson(json)).toList();
    
    return ApiResponse<OrderFeedData>(
      success: true,
      data: OrderFeedData(
            orders: orders,
        pagination: PaginationData(
              page: data['data']['pagination']['page'] ?? 1,
              limit: data['data']['pagination']['limit'] ?? 20,
              total: data['data']['pagination']['total'] ?? orders.length,
              totalPages: data['data']['pagination']['pages'] ?? 1,
        ),
      ),
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
      } else {
        return ApiResponse<OrderFeedData>(
          success: false,
          data: OrderFeedData(
            orders: [],
            pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
          ),
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã –∑–∞—è–≤–æ–∫',
      timestamp: DateTime.now().toIso8601String(),
    );
      }
    } catch (e) {
      // Fallback –¥–ª—è –¥–µ–º–æ
      return ApiResponse<OrderFeedData>(
        success: true,
        data: OrderFeedData(
          orders: [],
          pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
        ),
        message: null,
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<OrderModel>> getOrder(String orderId) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    throw Exception('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  Future<ApiResponse<OrderModel>> createOrder(
    String title,
    String description,
    String category,
    String? location,
    String? region,
    double? budget,
    DateTime? deadline,
    List<File>? images,
  ) async {
    try {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô ENDPOINT /orders/create (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!)
      final formData = FormData.fromMap({
        'title': title,
        'description': description,
        'category': category,
        if (location != null) 'location': location,
        if (region != null) 'region': region,
        if (budget != null) 'budget': budget,
        if (deadline != null) 'deadline': deadline.toIso8601String(),
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (images != null && images.isNotEmpty) {
        for (var i = 0; i < images.length; i++) {
          formData.files.add(MapEntry(
            'images',
            await MultipartFile.fromFile(images[i].path),
          ));
        }
      }
      
      final response = await _dio.post('/orders/create', data: formData);
      
      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = response.data['data'] ?? response.data;
        final order = OrderModel.fromJson(data);
        
        print('‚úÖ API: Order created: ${order.id}');
        
        return ApiResponse<OrderModel>(
          success: true,
          data: order,
          message: response.data['message'] ?? '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<OrderModel>(
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      print('‚ùå API: Create order error: $e');
      return ApiResponse<OrderModel>(
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<OrderResponse>> respondToOrder(
    String orderId,
    OrderResponseRequest request,
  ) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    throw Exception('–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ');
  }

  Future<ApiResponse<AcceptResponse>> acceptResponse(
    String orderId,
    AcceptRequest request,
  ) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    throw Exception('–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ');
  }

  Future<ApiResponse<List<CategoryData>>> getOrderCategories() async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    return ApiResponse<List<CategoryData>>(
      success: true,
      data: [
        CategoryData(id: '1', name: '–ú–µ–±–µ–ª—å', description: '–ú–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞'),
        CategoryData(id: '2', name: '–†–µ–º–æ–Ω—Ç', description: '–†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'),
        CategoryData(id: '3', name: '–î–∏–∑–∞–π–Ω', description: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞'),
      ],
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  Future<ApiResponse<List<String>>> getRegions() async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    return ApiResponse<List<String>>(
      success: true,
      data: ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–®—ã–º–∫–µ–Ω—Ç', '–ê–∫—Ç–æ–±–µ', '–¢–∞—Ä–∞–∑'],
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
  }

  // Chat endpoints
  Future<ApiResponse<List<ChatModel>>> getChats() async {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω—ã–π endpoint /chats/list (–Ω–µ /chat/list)
      final response = await _dio.get('/chats/list');
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> chatsJson = data['data'] ?? [];
        final chats = chatsJson.map((json) => ChatModel.fromJson(json)).toList();
        
        return ApiResponse<List<ChatModel>>(
          success: true,
          data: chats,
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<List<ChatModel>>(
          success: false,
          data: [],
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      // Fallback –¥–ª—è –¥–µ–º–æ
    return ApiResponse<List<ChatModel>>(
      success: true,
      data: [],
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
    }
  }

  Future<ApiResponse<List<MessageModel>>> getMessages(String chatId) async {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω—ã–π endpoint /chats/{id}/messages (–Ω–µ /chat/{id}/messages)
      final response = await _dio.get('/chats/$chatId/messages');
      
      if (response.statusCode == 200) {
        // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fromJson
        final messages = <MessageModel>[];
        
        return ApiResponse<List<MessageModel>>(
          success: true,
          data: messages,
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<List<MessageModel>>(
          success: false,
          data: [],
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      // Fallback –¥–ª—è –¥–µ–º–æ
    return ApiResponse<List<MessageModel>>(
      success: true,
      data: [],
      message: null,
      timestamp: DateTime.now().toIso8601String(),
    );
    }
  }

  Future<ApiResponse<MessageModel>> sendMessage(
    String chatId,
    SendMessageRequest request,
  ) async {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω—ã–π endpoint /chats/{id}/message (–Ω–µ /chat/{id}/message)
      final response = await _dio.post('/chats/$chatId/message', data: {
        'content': request.content,
      });
      
      if (response.statusCode == 200) {
        // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fromJson
        final message = MessageModel(
          id: 'temp',
          chatId: chatId,
          senderId: 'temp',
          content: request.content,
          type: 'text',
          isRead: false,
          createdAt: DateTime.now(),
        );
        
        return ApiResponse<MessageModel>(
          success: true,
          data: message,
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<MessageModel>(
          success: false,
          message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  Future<ApiResponse<List<VideoModel>>> searchVideos(String query) async {
    try {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô ENDPOINT /search (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!)
      final response = await _dio.get('/search', queryParameters: {
        'q': query,
        'type': 'video',
      });
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> videosJson = data['data']?['videos'] ?? data['videos'] ?? [];
        final videos = videosJson.map((json) => VideoModel.fromJson(json)).toList();
        
        print('üîç API: Found ${videos.length} videos for query "$query"');
        
        return ApiResponse<List<VideoModel>>(
          success: true,
          data: videos,
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<List<VideoModel>>(
          success: false,
          data: [],
          message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      print('‚ùå API: Search videos error: $e');
      return ApiResponse<List<VideoModel>>(
        success: false,
        data: [],
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<List<VideoModel>>> getMasterVideos(String masterId) async {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π endpoint /videos/master/:masterId
      final response = await _dio.get('/videos/master/$masterId');
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> videosJson = data['data']['videos'] ?? [];
        final videos = videosJson.map((json) => VideoModel.fromJson(json)).toList();
        
        return ApiResponse<List<VideoModel>>(
          success: true,
          data: videos,
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<List<VideoModel>>(
          success: false,
          data: [],
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä–∞',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      return ApiResponse<List<VideoModel>>(
        success: false,
        data: [],
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä–∞: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<OrderFeedData>> getUserOrders() async {
    try {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú /orders/feed (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!)
      // –ë—ç–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      final response = await _dio.get('/orders/feed');
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> ordersJson = data['data']?['orders'] ?? [];
        final orders = ordersJson.map((json) => OrderModel.fromJson(json)).toList();
        
        final pagination = data['data']?['pagination'];
        
        print('üì¶ API: Loaded ${orders.length} user orders');
        
        return ApiResponse<OrderFeedData>(
          success: true,
          data: OrderFeedData(
            orders: orders,
            pagination: PaginationData(
              page: pagination?['page'] ?? 1,
              limit: pagination?['limit'] ?? 20,
              total: pagination?['total'] ?? orders.length,
              totalPages: pagination?['totalPages'] ?? 1,
            ),
          ),
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<OrderFeedData>(
          success: false,
          data: OrderFeedData(
            orders: [],
            pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
          ),
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      print('‚ùå API: Get user orders error: $e');
      return ApiResponse<OrderFeedData>(
        success: false,
        data: OrderFeedData(
          orders: [],
          pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
        ),
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<OrderFeedData>> searchOrders(String query) async {
    try {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô ENDPOINT /search (–∫–∞–∫ –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!)
      final response = await _dio.get('/search', queryParameters: {
        'q': query,
        'type': 'order',
      });
      
      if (response.statusCode == 200) {
        final data = response.data;
        final List<dynamic> ordersJson = data['data']?['orders'] ?? data['orders'] ?? [];
        final orders = ordersJson.map((json) => OrderModel.fromJson(json)).toList();
        
        print('üîç API: Found ${orders.length} orders for query "$query"');
        
        return ApiResponse<OrderFeedData>(
          success: true,
          data: OrderFeedData(
            orders: orders,
            pagination: PaginationData(
              page: 1,
              limit: orders.length,
              total: orders.length,
              totalPages: 1,
            ),
          ),
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<OrderFeedData>(
          success: false,
          data: OrderFeedData(
            orders: [],
            pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
          ),
          message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } catch (e) {
      print('‚ùå API: Search orders error: $e');
      return ApiResponse<OrderFeedData>(
        success: false,
        data: OrderFeedData(
          orders: [],
          pagination: PaginationData(page: 1, limit: 20, total: 0, totalPages: 0),
        ),
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: ${e.toString()}',
        timestamp: DateTime.now().toIso8601String(),
      );
    }
  }

  Future<ApiResponse<List<OrderResponse>>> getOrderResponses(String orderId) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑
      final response = await _dio.get('/orders/$orderId/responses');
      
      if (response.statusCode == 200) {
        // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fromJson
        final responses = <OrderResponse>[];
        
        return ApiResponse<List<OrderResponse>>(
          success: true,
          data: responses,
          message: null,
          timestamp: DateTime.now().toIso8601String(),
        );
      } else {
        return ApiResponse<List<OrderResponse>>(
          success: false,
          data: [],
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤',
          timestamp: DateTime.now().toIso8601String(),
        );
      }
    } on DioException catch (e) {
      throw _handleDioError(e);
    }
  }

  DioException _handleDioError(DioException e) {
    return e;
  }
}

// Request/Response models
class ApiResponse<T> {
  final bool success;
  final T? data;
  final String? message;
  final String timestamp;

  ApiResponse({
    required this.success,
    this.data,
    this.message,
    required this.timestamp,
  });
}

class AuthData {
  final UserModel user;
  final String? token;
  final String? accessToken;
  final String? refreshToken;

  AuthData({
    required this.user,
    this.token,
    this.accessToken,
    this.refreshToken,
  });
}

class LoginRequest {
  final String phone;
  final String password;

  LoginRequest({required this.phone, required this.password});
}

class RegisterRequest {
  final String phone;
  final String username;
  final String password;
  final String? firstName;
  final String? lastName;
  final String role;

  RegisterRequest({
    required this.phone,
    required this.username,
    required this.password,
    this.firstName,
    this.lastName,
    this.role = 'user',
  });
}

class LogoutRequest {
  final String refreshToken;

  LogoutRequest({required this.refreshToken});
}

class RefreshRequest {
  final String refreshToken;

  RefreshRequest({required this.refreshToken});
}

class VideoFeedData {
  final List<VideoModel> videos;
  final PaginationData pagination;

  VideoFeedData({required this.videos, required this.pagination});
}

class OrderFeedData {
  final List<OrderModel> orders;
  final PaginationData pagination;

  OrderFeedData({required this.orders, required this.pagination});
}

class PaginationData {
  final int page;
  final int limit;
  final int total;
  final int totalPages;

  PaginationData({
    required this.page,
    required this.limit,
    required this.total,
    required this.totalPages,
  });
}

class LikeData {
  final String videoId;
  final int likes;
  final bool isLiked;

  LikeData({
    required this.videoId,
    required this.likes,
    required this.isLiked,
  });
}

class ViewData {
  final int durationWatched;
  final double completionRate;

  ViewData({
    required this.durationWatched,
    required this.completionRate,
  });
}

class OrderResponseRequest {
  final String message;
  final double? price;
  final DateTime? deadline;

  OrderResponseRequest({
    required this.message,
    this.price,
    this.deadline,
  });
}

class AcceptRequest {
  final String responseId;

  AcceptRequest({required this.responseId});
}

class AcceptResponse {
  final OrderModel order;
  final String chatId;

  AcceptResponse({required this.order, required this.chatId});
}

class CategoryData {
  final String id;
  final String name;
  final String description;

  CategoryData({
    required this.id,
    required this.name,
    required this.description,
  });
}

class SendMessageRequest {
  final String content;

  SendMessageRequest({required this.content});
}

class EmptyResponse {
  EmptyResponse();
}