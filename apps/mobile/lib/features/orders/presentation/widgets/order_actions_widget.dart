import 'package:flutter/material.dart';
import '../../data/models/order_model.dart';
import '../../data/repositories/order_repository.dart';

class OrderActionsWidget extends StatefulWidget {
  final OrderModel order;
  final String userRole; // 'user' or 'master'
  final OrderRepository repository;
  final VoidCallback onUpdate;

  const OrderActionsWidget({
    super.key,
    required this.order,
    required this.userRole,
    required this.repository,
    required this.onUpdate,
  });

  @override
  State<OrderActionsWidget> createState() => _OrderActionsWidgetState();
}

class _OrderActionsWidgetState extends State<OrderActionsWidget> {
  bool _loading = false;
  String? _error;
  String? _success;

  Future<void> _handleAction(
    Future<dynamic> Function() action,
    String successMsg,
  ) async {
    setState(() {
      _loading = true;
      _error = null;
      _success = null;
    });

    try {
      await action();
      setState(() => _success = successMsg);
      await Future.delayed(const Duration(seconds: 1));
      widget.onUpdate();
    } catch (e) {
      setState(() => _error = '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        if (_error != null) ...[
          Container(
            padding: const EdgeInsets.all(12),
            margin: const EdgeInsets.only(bottom: 12),
            decoration: BoxDecoration(
              color: Colors.red.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.red.shade200),
            ),
            child: Text(_error!, style: TextStyle(color: Colors.red.shade800)),
          ),
        ],

        if (_success != null) ...[
          Container(
            padding: const EdgeInsets.all(12),
            margin: const EdgeInsets.only(bottom: 12),
            decoration: BoxDecoration(
              color: Colors.green.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.green.shade200),
            ),
            child: Text(_success!, style: TextStyle(color: Colors.green.shade800)),
          ),
        ],

        if (widget.userRole == 'user')
          ..._buildUserActions()
        else
          ..._buildMasterActions(),

        if (_loading) ...[
          const SizedBox(height: 16),
          const Center(
            child: Column(
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 8),
                Text('–û–±—Ä–∞–±–æ—Ç–∫–∞...', style: TextStyle(color: Colors.grey)),
              ],
            ),
          ),
        ],
      ],
    );
  }

  List<Widget> _buildUserActions() {
    if (widget.order.canBePaid) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.payOrder(widget.order.id),
                    '–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Å–∫—Ä–æ—É.',
                  ),
          icon: const Icon(Icons.payment),
          label: const Text('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
        const SizedBox(height: 8),
        OutlinedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.cancelOrder(widget.order.id),
                    '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',
                  ),
          icon: const Icon(Icons.close),
          label: const Text('‚úó –û—Ç–º–µ–Ω–∏—Ç—å'),
          style: OutlinedButton.styleFrom(
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    if (widget.order.status == 'paid') {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.cancelOrder(widget.order.id),
                    '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã',
                  ),
          icon: const Icon(Icons.close),
          label: const Text('‚úó –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    if (widget.order.canBeApproved) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.approveOrder(widget.order.id),
                    '–†–∞–±–æ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –º–∞—Å—Ç–µ—Ä—É.',
                  ),
          icon: const Icon(Icons.check),
          label: const Text('‚úì –û–¥–æ–±—Ä–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
        const SizedBox(height: 8),
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.openDispute(widget.order.id),
                    '–°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.',
                  ),
          icon: const Icon(Icons.warning),
          label: const Text('‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    if (widget.order.canOpenDispute) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.openDispute(widget.order.id),
                    '–°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç',
                  ),
          icon: const Icon(Icons.warning),
          label: const Text('‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    return [];
  }

  List<Widget> _buildMasterActions() {
    if (widget.order.canBeAccepted) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.acceptOrder(widget.order.id),
                    '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!',
                  ),
          icon: const Icon(Icons.check_circle),
          label: const Text('‚úì –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    if (widget.order.canBeStarted) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.startWork(widget.order.id),
                    '–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!',
                  ),
          icon: const Icon(Icons.play_arrow),
          label: const Text('üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.purple,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    if (widget.order.canBeCompleted) {
      return [
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.completeOrder(widget.order.id),
                    '–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.',
                  ),
          icon: const Icon(Icons.done_all),
          label: const Text('‚úì –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
        const SizedBox(height: 8),
        ElevatedButton.icon(
          onPressed: _loading
              ? null
              : () => _handleAction(
                    () => widget.repository.openDispute(widget.order.id),
                    '–°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç',
                  ),
          icon: const Icon(Icons.warning),
          label: const Text('‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
          ),
        ),
      ];
    }

    return [];
  }
}

