openapi: 3.0.3
info:
  title: MebelPlace Mobile App API
  description: |
    MebelPlace Mobile Application API - мобильный клиент для платформы торговли мебелью
    
    ## Основные возможности:
    - Регистрация и аутентификация пользователей
    - Просмотр видео с мебелью и HLS streaming
    - Система заявок и предложений
    - Чат и голосовые комнаты
    - AR/3D модели мебели
    - Геймификация и достижения
    - Аналитика и модерация
    - Интеграции с платежными системами
    
    ## Основные возможности:
    - Регистрация и аутентификация пользователей
    - Загрузка и просмотр видео с мебелью
    - HLS (HTTP Live Streaming) для адаптивного видео
    - Multi-variant HLS с разными качествами (360p, 720p, 1080p)
    - Автоматическое создание thumbnail и HLS сегментов
    - Асинхронная обработка видео с отслеживанием статуса
    - WebRTC интеграция для live streaming
    - Система заявок и предложений
    - Чаты и групповые чаты
    - Каналы и подписки
    - Система уведомлений
    - Звонки и голосовые комнаты
    - AR/3D модели
    - Аналитика и геймификация
    
    ## Rate Limiting:
    - HLS endpoints: 100 запросов/минуту на пользователя
    - Live streaming: 10 запросов/минуту на пользователя
    - Thumbnail: 200 запросов/минуту на пользователя
    - Общие API: 1000 запросов/минуту на пользователя
    
  version: 2.4.0
  contact:
    name: MebelPlace Support
    email: support@mebelplace.com.kz
  license:
    name: Proprietary

servers:
  - url: https://mebelplace.com.kz/api/v2
    description: Production server
  - url: http://localhost:8080/api/v2
    description: Development server

tags:
  - name: System
    description: Системные эндпоинты
  - name: Authentication
    description: Аутентификация и регистрация
  - name: Users
    description: Управление пользователями
  - name: Videos
    description: Видео контент
  - name: Requests
    description: Заявки и предложения
  - name: Chats
    description: Чаты и сообщения
  - name: Channels
    description: Каналы и подписки
  - name: Notifications
    description: Уведомления
  - name: Calls
    description: Звонки и голосовые комнаты
  - name: Analytics
    description: Аналитика
  - name: Admin
    description: Административные функции
  - name: Stories
    description: Истории (временный контент)
  - name: Group Chats
    description: Групповые чаты
  - name: Written Channels
    description: Письменные каналы
  - name: Support
    description: Система поддержки
  - name: Comments
    description: Комментарии
  - name: Gamification
    description: Геймификация и достижения
  - name: AR/3D Models
    description: AR и 3D модели
  - name: Maps
    description: Карты и геолокация
  - name: Integrations
    description: Интеграции с внешними сервисами
  - name: Referrals
    description: Реферальная система
  - name: Live Streams
    description: Прямые трансляции
  - name: Voice Rooms
    description: Голосовые комнаты
  - name: HLS Streaming
    description: HTTP Live Streaming для видео
  - name: WebRTC
    description: WebRTC signaling и real-time коммуникация
  - name: WebSocket
    description: WebSocket соединения для real-time данных
  - name: AI
    description: AI анализ и машинное обучение
  - name: Payments
    description: Платежи и монетизация

security:
  - BearerAuth: []

paths:
  # Rate Limiting
  /ratelimit/status:
    get:
      tags: [System]
      summary: Статус Rate Limiting
      description: Получить информацию о текущих лимитах запросов
      responses:
        '200':
          description: Статус Rate Limiting
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_limit:
                    type: object
                    properties:
                      current:
                        type: integer
                        description: Текущее количество запросов
                      limit:
                        type: integer
                        description: Лимит запросов
                      remaining:
                        type: integer
                        description: Оставшиеся запросы
                      reset_time:
                        type: string
                        format: date-time
                        description: Время сброса лимита
                  general_limit:
                    type: object
                    properties:
                      current:
                        type: integer
                      limit:
                        type: integer
                      remaining:
                        type: integer
                      reset_time:
                        type: string
                        format: date-time
          headers:
            X-RateLimit-Limit:
              description: Лимит запросов в минуту
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: Оставшиеся запросы
              schema:
                type: integer
            X-RateLimit-Reset:
              description: Время сброса лимита (Unix timestamp)
              schema:
                type: integer

  # Системные эндпоинты
  /health:
    get:
      tags: [System]
      summary: Health Check
      description: Проверка состояния системы
      security: []
      responses:
        '200':
          description: Система работает
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "mebelplace-api"
                  version:
                    type: string
                    example: "1.0.0"
                  timestamp:
                    type: string
                    format: date-time
                  components:
                    type: object
                    properties:
                      database:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "healthy"
                          error:
                            type: boolean
                            example: false
                          message:
                            type: string
                            example: "OK"
                      redis:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "healthy"
                          error:
                            type: boolean
                            example: false
                          message:
                            type: string
                            example: "OK"

  /live:
    get:
      tags: [System]
      summary: Liveness Probe
      description: Проверка жизнеспособности приложения
      security: []
      responses:
        '200':
          description: Приложение живо
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "alive"
                  timestamp:
                    type: string
                    format: date-time

  /ready:
    get:
      tags: [System]
      summary: Readiness Probe
      description: Проверка готовности приложения
      security: []
      responses:
        '200':
          description: Приложение готово
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  timestamp:
                    type: string
                    format: date-time

  /metrics:
    get:
      tags: [System]
      summary: Prometheus Metrics
      description: Метрики для Prometheus
      security: []
      responses:
        '200':
          description: Метрики в формате Prometheus
          content:
            text/plain:
              schema:
                type: string

  # Аутентификация
  /auth/register:
    post:
      tags: [Authentication]
      summary: Регистрация пользователя
      description: Регистрация нового пользователя по телефону или email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email_or_phone
                - password
              properties:
                email_or_phone:
                  type: string
                  description: Email или номер телефона
                  example: "+77777777777"
                password:
                  type: string
                  description: Пароль
                  minLength: 6
                  example: "password123"
                username:
                  type: string
                  description: Имя пользователя (опционально)
                  example: "john_doe"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT токен
                  access_token:
                    type: string
                    description: Access токен
                  refresh_token:
                    type: string
                    description: Refresh токен
                  expires_in:
                    type: integer
                    description: Время жизни токена в секундах
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Ошибка валидации
        '409':
          description: Пользователь уже существует

  /auth/verify-sms:
    post:
      tags: [Authentication]
      summary: Подтверждение SMS
      description: Подтверждение номера телефона через SMS код
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - code
              properties:
                phone:
                  type: string
                  example: "+77777777777"
                code:
                  type: string
                  example: "1234"
      responses:
        '200':
          description: SMS подтвержден
        '400':
          description: Неверный код

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Подтверждение Email
      description: Подтверждение email адреса
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                code:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Email подтвержден
        '400':
          description: Неверный код

  /auth/login:
    post:
      tags: [Authentication]
      summary: Вход в систему
      description: Аутентификация пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email_or_phone
                - password
              properties:
                email_or_phone:
                  type: string
                  example: "+77777777777"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_in:
                    type: integer
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Неверные учетные данные

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Обновление токена
      description: Обновление access токена с помощью refresh токена
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Токен обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  access_token:
                    type: string
                  expires_in:
                    type: integer
                    example: 3600
        '401':
          description: Неверный refresh токен

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Выход из системы
      description: Выход пользователя из системы
      responses:
        '200':
          description: Успешный выход
        '401':
          description: Неавторизован

  # Пользователи
  /users/me:
    get:
      tags: [Users]
      summary: Получить профиль
      description: Получить информацию о текущем пользователе
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неавторизован

    put:
      tags: [Users]
      summary: Обновить профиль
      description: Обновить информацию профиля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                bio:
                  type: string
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неавторизован

  /users/me/avatar:
    post:
      tags: [Users]
      summary: Загрузить аватар
      description: Загрузка аватара пользователя
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Файл аватара
      responses:
        '200':
          description: Аватар загружен
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar_url:
                    type: string
                    example: "https://mebelplace.com.kz/uploads/avatars/user_1.jpg"
        '401':
          description: Неавторизован
        '400':
          description: Неверный формат файла

  /users/{id}:
    get:
      tags: [Users]
      summary: Получить пользователя по ID
      description: Получить публичную информацию о пользователе
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '404':
          description: Пользователь не найден

  /users/{id}/block:
    post:
      tags: [Users]
      summary: Заблокировать пользователя
      description: Заблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь заблокирован
        '401':
          description: Неавторизован

    delete:
      tags: [Users]
      summary: Разблокировать пользователя
      description: Разблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь разблокирован
        '401':
          description: Неавторизован

  /users/blocked:
    get:
      tags: [Users]
      summary: Получить заблокированных пользователей
      description: Получить список заблокированных пользователей
      responses:
        '200':
          description: Список заблокированных пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'

  # Видео
  /videos/{id}:
    get:
      tags: [Videos]
      summary: Детали видео
      description: Получить детальную информацию о конкретном видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Детали видео
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '404':
          $ref: '#/components/responses/NotFound'

  /videos/feed:
    get:
      tags: [Videos]
      summary: Лента видео
      description: Получить ленту видео
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: user_id
          in: query
          schema:
            type: integer
            description: Фильтр по пользователю
      responses:
        '200':
          description: Лента видео
          content:
            application/json:
              schema:
                type: object
                properties:
                  videos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /videos/upload:
    post:
      tags: [Videos]
      summary: Загрузить видео
      description: Загрузка нового видео
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - video
                - title
              properties:
                video:
                  type: string
                  format: binary
                  description: Файл видео
                title:
                  type: string
                  description: Заголовок видео
                description:
                  type: string
                  description: Описание видео
                hashtags:
                  type: array
                  items:
                    type: string
                  description: Хештеги
                is_product:
                  type: boolean
                  description: Является ли видео товаром
                product_price:
                  type: number
                  description: Цена товара
                product_description:
                  type: string
                  description: Описание товара
      responses:
        '200':
          description: Видео загружено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '401':
          description: Неавторизован
        '400':
          description: Ошибка загрузки

  /videos/{id}/like:
    post:
      tags: [Videos]
      summary: Лайкнуть видео
      description: Поставить лайк видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Лайк поставлен
        '401':
          description: Неавторизован

  /videos/{id}/unlike:
    post:
      tags: [Videos]
      summary: Убрать лайк
      description: Убрать лайк с видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Лайк убран
        '401':
          description: Неавторизован

  /videos/{id}/comments:
    get:
      tags: [Videos]
      summary: Получить комментарии к видео
      description: Получить комментарии к видео
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Комментарии к видео
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Videos]
      summary: Добавить комментарий
      description: Добавить комментарий к видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Текст комментария
                parent_id:
                  type: integer
                  description: ID родительского комментария (для ответа)
      responses:
        '200':
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Неавторизован

  # Заявки
  /requests:
    get:
      tags: [Requests]
      summary: Получить заявки
      description: Получить список заявок
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: region
          in: query
          schema:
            type: string
        - name: budget_min
          in: query
          schema:
            type: number
        - name: budget_max
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Список заявок
          content:
            application/json:
              schema:
                type: object
                properties:
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/Request'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Requests]
      summary: Создать заявку
      description: Создать новую заявку
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - category
              properties:
                title:
                  type: string
                  description: Заголовок заявки
                description:
                  type: string
                  description: Описание заявки
                category:
                  type: string
                  description: Категория мебели
                budget:
                  type: number
                  description: Бюджет
                region:
                  type: string
                  description: Регион
                photos:
                  type: array
                  items:
                    type: string
                  description: Фотографии
      responses:
        '200':
          description: Заявка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '401':
          description: Неавторизован

  /requests/{id}:
    get:
      tags: [Requests]
      summary: Получить заявку по ID
      description: Получить детали заявки
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Детали заявки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '404':
          description: Заявка не найдена

  /requests/{id}/proposals:
    get:
      tags: [Requests]
      summary: Получить предложения к заявке
      description: Получить предложения к заявке
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Предложения к заявке
          content:
            application/json:
              schema:
                type: object
                properties:
                  proposals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposal'

    post:
      tags: [Requests]
      summary: Создать предложение
      description: Создать предложение к заявке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - price
              properties:
                message:
                  type: string
                  description: Сообщение предложения
                price:
                  type: number
                  description: Цена предложения
                photos:
                  type: array
                  items:
                    type: string
                  description: Фотографии товара
      responses:
        '200':
          description: Предложение создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '401':
          description: Неавторизован

  /requests/{id}/proposals/{proposal_id}/accept:
    post:
      tags: [Requests]
      summary: Принять предложение
      description: Принять предложение к заявке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: proposal_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Предложение принято
        '401':
          description: Неавторизован

  # Чаты
  /chats:
    get:
      tags: [Chats]
      summary: Получить чаты
      description: Получить список чатов пользователя
      responses:
        '200':
          description: Список чатов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'

    post:
      tags: [Chats]
      summary: Создать чат
      description: Создать новый чат
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: ID пользователя для чата
      responses:
        '200':
          description: Чат создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /chats/{id}/messages:
    get:
      tags: [Chats]
      summary: Получить сообщения чата
      description: Получить сообщения чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Сообщения чата
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Chats]
      summary: Отправить сообщение
      description: Отправить сообщение в чат
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Текст сообщения
                type:
                  type: string
                  enum: [text, image, video, file]
                  default: text
                file_url:
                  type: string
                  description: URL файла (для файловых сообщений)
      responses:
        '200':
          description: Сообщение отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  # Каналы
  /channels:
    get:
      tags: [Channels]
      summary: Получить каналы
      description: Получить список каналов
      security: []
      responses:
        '200':
          description: Список каналов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'

  /channels/{id}/posts:
    get:
      tags: [Channels]
      summary: Получить посты канала
      description: Получить посты канала
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Посты канала
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChannelPost'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Channels]
      summary: Создать пост в канале
      description: Создать пост в канале
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: Содержимое поста
                media_urls:
                  type: array
                  items:
                    type: string
                  description: URL медиа файлов
      responses:
        '200':
          description: Пост создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPost'

  /channels/{id}/subscribe:
    post:
      tags: [Channels]
      summary: Подписаться на канал
      description: Подписаться на канал
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Подписка создана
        '401':
          description: Неавторизован

  /channels/{id}/unsubscribe:
    post:
      tags: [Channels]
      summary: Отписаться от канала
      description: Отписаться от канала
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Подписка удалена
        '401':
          description: Неавторизован

  # Подписки
  /subscriptions/{channel_id}:
    post:
      tags: [Channels]
      summary: Подписаться на канал
      description: Подписаться на канал с настройками уведомлений
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "ID канала для подписки"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '200':
          description: Подписка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelSubscription'
        '401':
          description: Неавторизован
        '404':
          description: Канал не найден

    delete:
      tags: [Channels]
      summary: Отписаться от канала
      description: Отписаться от канала
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "ID канала для отписки"
      responses:
        '200':
          description: Подписка удалена
        '401':
          description: Неавторизован
        '404':
          description: Подписка не найдена

  /subscriptions/my:
    get:
      tags: [Channels]
      summary: Мои подписки
      description: Получить мои подписки на каналы
      parameters:
        - name: level
          in: query
          schema:
            type: string
            enum: [all, important, off]
          description: "Фильтр по уровню уведомлений"
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список подписок
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChannelSubscription'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Неавторизован

  # Поиск
  /search:
    get:
      tags: [Users]
      summary: Универсальный поиск
      description: Поиск по пользователям, видео, заявкам
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Поисковый запрос
        - name: type
          in: query
          schema:
            type: string
            enum: [all, users, videos, requests]
            default: all
          description: Тип поиска
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUser'
                  videos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/Request'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /search/users:
    get:
      tags: [Users]
      summary: Поиск пользователей
      description: Поиск пользователей
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Результаты поиска пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUser'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /search/masters:
    get:
      tags: [Users]
      summary: Поиск мастеров
      description: Поиск мастеров с фильтром по локации
      security: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: region
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: lat
          in: query
          schema:
            type: number
          description: Широта для поиска по геолокации
        - name: lng
          in: query
          schema:
            type: number
          description: Долгота для поиска по геолокации
        - name: radius
          in: query
          schema:
            type: number
            default: 50
          description: Радиус поиска в км
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Результаты поиска мастеров
          content:
            application/json:
              schema:
                type: object
                properties:
                  masters:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUser'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  # Уведомления
  /notifications:
    get:
      tags: [Notifications]
      summary: Получить уведомления
      description: Получить уведомления пользователя
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [video.published, stream.started, story.published, request.proposal, comment.created, chat.message, achievement.earned, all]
            default: all
          description: "Фильтр по типу уведомления"
      responses:
        '200':
          description: Список уведомлений
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /notifications/{id}/read:
    post:
      tags: [Notifications]
      summary: Отметить уведомление как прочитанное
      description: Отметить уведомление как прочитанное
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Уведомление отмечено как прочитанное
        '401':
          description: Неавторизован

  /notifications/read-all:
    post:
      tags: [Notifications]
      summary: Отметить все уведомления как прочитанные
      description: Отметить все уведомления как прочитанные
      responses:
        '200':
          description: Все уведомления отмечены как прочитанные
        '401':
          description: Неавторизован

  /notifications/settings:
    get:
      tags: [Notifications]
      summary: Получить настройки уведомлений
      description: Получить настройки уведомлений пользователя
      responses:
        '200':
          description: Настройки уведомлений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'

    post:
      tags: [Notifications]
      summary: Обновить настройки уведомлений
      description: Обновить настройки уведомлений
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: Настройки обновлены
        '401':
          description: Неавторизован

  /notifications/push-token:
    post:
      tags: [Notifications]
      summary: Обновить push токен
      description: Обновить push токен для уведомлений
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Push токен
                platform:
                  type: string
                  enum: [ios, android, web]
                  description: Платформа
      responses:
        '200':
          description: Push токен обновлен
        '401':
          description: Неавторизован

  # Истории
  /stories:
    get:
      tags: [Stories]
      summary: Получить истории
      description: Получить ленту историй пользователей
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Лента историй
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'

    post:
      tags: [Stories]
      summary: Создать историю
      description: Создать новую историю (изображение/видео/голос)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл истории
                media_type:
                  type: string
                  enum: [image, video, voice]
                  description: Тип медиа
                caption:
                  type: string
                  description: Подпись к истории
                background_color:
                  type: string
                  description: Цвет фона
                location:
                  type: string
                  description: Местоположение
                is_pinned:
                  type: boolean
                  description: Закрепить историю
      responses:
        '201':
          description: История создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  message:
                    type: string
        '401':
          description: Неавторизован
        '400':
          description: Ошибка валидации

  /stories/{id}/view:
    post:
      tags: [Stories]
      summary: Просмотреть историю
      description: Отметить историю как просмотренную
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: История отмечена как просмотренная
        '401':
          description: Неавторизован

  /stories/{id}:
    get:
      tags: [Stories]
      summary: Детали истории
      description: Получить детальную информацию о конкретной истории
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Детали истории
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        '404':
          $ref: '#/components/responses/NotFound'

  /stories/{id}/like:
    post:
      tags: [Stories]
      summary: Лайкнуть историю
      description: Поставить лайк истории
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Лайк поставлен
        '401':
          description: Неавторизован

  # Групповые чаты
  /group-chats:
    get:
      tags: [Group Chats]
      summary: Получить мои групповые чаты
      description: Получить список групповых чатов пользователя
      responses:
        '200':
          description: Список групповых чатов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupChat'

    post:
      tags: [Group Chats]
      summary: Создать групповой чат
      description: Создать новый групповой чат
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название чата
                description:
                  type: string
                  description: Описание чата
                is_public:
                  type: boolean
                  description: Публичный чат
                max_members:
                  type: integer
                  description: Максимальное количество участников
      responses:
        '201':
          description: Групповой чат создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
        '401':
          description: Неавторизован

  /group-chats/{id}:
    get:
      tags: [Group Chats]
      summary: Получить групповой чат
      description: Получить информацию о групповом чате
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о групповом чате
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
        '404':
          description: Чат не найден

  /group-chats/{id}/members:
    get:
      tags: [Group Chats]
      summary: Получить участников чата
      description: Получить список участников группового чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список участников
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'

    post:
      tags: [Group Chats]
      summary: Добавить участника
      description: Добавить участника в групповой чат
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: ID пользователя
      responses:
        '200':
          description: Участник добавлен
        '401':
          description: Неавторизован

  /group-chats/{id}/messages:
    get:
      tags: [Group Chats]
      summary: Получить сообщения группового чата
      description: Получить сообщения группового чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Сообщения чата
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Group Chats]
      summary: Отправить сообщение в групповой чат
      description: Отправить сообщение в групповой чат
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Текст сообщения
                type:
                  type: string
                  enum: [text, image, video, file]
                  default: text
                file_url:
                  type: string
                  description: URL файла
      responses:
        '200':
          description: Сообщение отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /group-chats/{id}/leave:
    post:
      tags: [Group Chats]
      summary: Покинуть групповой чат
      description: Покинуть групповой чат
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь покинул чат
        '401':
          description: Неавторизован

  # Письменные каналы
  /written-channels:
    get:
      tags: [Written Channels]
      summary: Получить письменные каналы
      description: Получить список письменных каналов
      parameters:
        - name: subscribed
          in: query
          schema:
            type: boolean
          description: Только подписанные каналы
      responses:
        '200':
          description: Список письменных каналов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WrittenChannel'

    post:
      tags: [Written Channels]
      summary: Создать письменный канал
      description: Создать новый письменный канал (только для мастеров)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название канала
                description:
                  type: string
                  description: Описание канала
                is_public:
                  type: boolean
                  description: Публичный канал
      responses:
        '201':
          description: Канал создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WrittenChannel'
        '401':
          description: Неавторизован
        '403':
          description: Только для мастеров

  /written-channels/{id}/subscribe:
    post:
      tags: [Written Channels]
      summary: Подписаться на письменный канал
      description: Подписаться на письменный канал
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Подписка создана
        '401':
          description: Неавторизован

  /written-channels/{id}/unsubscribe:
    post:
      tags: [Written Channels]
      summary: Отписаться от письменного канала
      description: Отписаться от письменного канала
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Подписка удалена
        '401':
          description: Неавторизован

  /written-channels/{id}/posts:
    get:
      tags: [Written Channels]
      summary: Получить посты письменного канала
      description: Получить посты письменного канала
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Посты канала
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChannelPost'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Written Channels]
      summary: Создать пост в письменном канале
      description: Создать пост в письменном канале
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: Содержимое поста
                media_urls:
                  type: array
                  items:
                    type: string
                  description: URL медиа файлов
      responses:
        '201':
          description: Пост создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPost'
        '401':
          description: Неавторизован

  # Система поддержки
  /support/tickets:
    get:
      tags: [Support]
      summary: Получить тикеты поддержки
      description: Получить тикеты поддержки пользователя
      responses:
        '200':
          description: Список тикетов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicket'

    post:
      tags: [Support]
      summary: Создать тикет поддержки
      description: Создать новый тикет поддержки
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject
                - message
              properties:
                subject:
                  type: string
                  description: Тема тикета
                message:
                  type: string
                  description: Сообщение
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
      responses:
        '201':
          description: Тикет создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
        '401':
          description: Неавторизован

  /support/tickets/{id}/replies:
    post:
      tags: [Support]
      summary: Создать ответ на тикет
      description: Создать ответ на тикет поддержки
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Сообщение ответа
      responses:
        '201':
          description: Ответ создан
        '401':
          description: Неавторизован

  # Комментарии
  /comments/{id}/like:
    post:
      tags: [Comments]
      summary: Лайкнуть комментарий
      description: Поставить лайк комментарию
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Лайк поставлен
        '401':
          description: Неавторизован

  /comments/{id}/reply:
    post:
      tags: [Comments]
      summary: Ответить на комментарий
      description: Ответить на комментарий
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Текст ответа
      responses:
        '201':
          description: Ответ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Неавторизован

  /comments/{id}/replies:
    get:
      tags: [Comments]
      summary: Получить ответы на комментарий
      description: Получить ответы на комментарий
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Ответы на комментарий
          content:
            application/json:
              schema:
                type: object
                properties:
                  replies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /comments/{id}:
    delete:
      tags: [Comments]
      summary: Удалить комментарий
      description: Удалить комментарий
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Комментарий удален
        '401':
          description: Неавторизован

  # Геймификация
  /gamification/level:
    get:
      tags: [Gamification]
      summary: Получить уровень пользователя
      description: Получить текущий уровень и прогресс пользователя
      responses:
        '200':
          description: Уровень пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLevel'
        '401':
          description: Неавторизован

  /gamification/achievements:
    get:
      tags: [Gamification]
      summary: Получить достижения пользователя
      description: Получить список достижений пользователя
      responses:
        '200':
          description: Список достижений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'
        '401':
          description: Неавторизован

  /gamification/leaderboard:
    get:
      tags: [Gamification]
      summary: Получить таблицу лидеров
      description: Получить таблицу лидеров по очкам
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Таблица лидеров
          content:
            application/json:
              schema:
                type: object
                properties:
                  leaderboard:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaderboardEntry'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /gamification/award-points:
    post:
      tags: [Gamification]
      summary: Начислить очки
      description: Начислить очки пользователю (админ функция)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - points
                - reason
              properties:
                user_id:
                  type: integer
                  description: ID пользователя
                points:
                  type: integer
                  description: Количество очков
                reason:
                  type: string
                  description: Причина начисления
      responses:
        '200':
          description: Очки начислены
        '401':
          description: Неавторизован

  # AR/3D модели
  /ar3d/models:
    post:
      tags: [AR/3D Models]
      summary: Загрузить 3D модель
      description: Загрузить 3D модель для AR
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - model_file
                - product_id
              properties:
                model_file:
                  type: string
                  format: binary
                  description: Файл 3D модели
                product_id:
                  type: integer
                  description: ID продукта
                preview_image:
                  type: string
                  format: binary
                  description: Превью изображение
      responses:
        '201':
          description: 3D модель загружена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AR3DModel'
        '401':
          description: Неавторизован
        '400':
          description: Ошибка загрузки

  /ar3d/models/{product_id}:
    get:
      tags: [AR/3D Models]
      summary: Получить 3D модели продукта
      description: Получить 3D модели для продукта
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 3D модели продукта
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AR3DModel'

  # Карты и геолокация
  /maps/masters:
    get:
      tags: [Maps]
      summary: Получить мастеров на карте
      description: Получить мастеров с геолокацией
      parameters:
        - name: lat
          in: query
          schema:
            type: number
          description: Широта
        - name: lng
          in: query
          schema:
            type: number
          description: Долгота
        - name: radius
          in: query
          schema:
            type: number
            default: 50
          description: Радиус поиска в км
        - name: category
          in: query
          schema:
            type: string
          description: Категория услуг
      responses:
        '200':
          description: Список мастеров на карте
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterOnMap'

  /maps/location:
    post:
      tags: [Maps]
      summary: Обновить местоположение
      description: Обновить текущее местоположение пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  description: Широта
                longitude:
                  type: number
                  description: Долгота
                address:
                  type: string
                  description: Адрес
      responses:
        '200':
          description: Местоположение обновлено
        '401':
          description: Неавторизован

  # Интеграции
  /integrations/payments/connect:
    post:
      tags: [Integrations]
      summary: Подключить платежного провайдера
      description: Подключить платежного провайдера
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - credentials
              properties:
                provider:
                  type: string
                  enum: [kaspi, halyk, alipay, wechat]
                  description: Провайдер платежей
                credentials:
                  type: object
                  description: Учетные данные провайдера
      responses:
        '200':
          description: Провайдер подключен
        '401':
          description: Неавторизован

  /integrations/payments/providers:
    get:
      tags: [Integrations]
      summary: Получить подключенных провайдеров
      description: Получить список подключенных платежных провайдеров
      responses:
        '200':
          description: Список провайдеров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentProvider'
        '401':
          description: Неавторизован

  # Реферальная система
  /referrals/apply:
    post:
      tags: [Referrals]
      summary: Применить реферальный код
      description: Применить реферальный код
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  description: Реферальный код
      responses:
        '200':
          description: Код применен
        '400':
          description: Неверный код

  /referrals/generate:
    post:
      tags: [Referrals]
      summary: Сгенерировать реферальный код
      description: Сгенерировать реферальный код для пользователя
      responses:
        '200':
          description: Код сгенерирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Реферальный код
        '401':
          description: Неавторизован

  /referrals/stats:
    get:
      tags: [Referrals]
      summary: Получить статистику рефералов
      description: Получить статистику рефералов пользователя
      responses:
        '200':
          description: Статистика рефералов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferralStats'
        '401':
          description: Неавторизован

  # Прямые трансляции
  /livestreams/active:
    get:
      tags: [Live Streams]
      summary: Получить активные трансляции
      description: Получить список активных прямых трансляций
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список активных трансляций
          content:
            application/json:
              schema:
                type: object
                properties:
                  streams:
                    type: array
                    items:
                      $ref: '#/components/schemas/LiveStream'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /livestreams/start:
    post:
      tags: [Live Streams]
      summary: Начать прямую трансляцию
      description: Начать новую прямую трансляцию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: Название трансляции
                description:
                  type: string
                  description: Описание трансляции
                is_public:
                  type: boolean
                  description: Публичная трансляция
      responses:
        '201':
          description: Трансляция начата
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStream'
        '401':
          description: Неавторизован

  /livestreams/{stream_id}/end:
    post:
      tags: [Live Streams]
      summary: Завершить прямую трансляцию
      description: Завершить прямую трансляцию
      parameters:
        - name: stream_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Трансляция завершена
        '401':
          description: Неавторизован

  # Голосовые комнаты
  /voicerooms/create:
    post:
      tags: [Voice Rooms]
      summary: Создать голосовую комнату
      description: Создать новую голосовую комнату
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название комнаты
                description:
                  type: string
                  description: Описание комнаты
                max_participants:
                  type: integer
                  description: Максимальное количество участников
                is_public:
                  type: boolean
                  description: Публичная комната
      responses:
        '201':
          description: Голосовая комната создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceRoom'
        '401':
          description: Неавторизован

  /voicerooms/{room_id}:
    get:
      tags: [Voice Rooms]
      summary: Информация о голосовой комнате
      description: Получить информацию о голосовой комнате
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о голосовой комнате
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceRoom'
        '404':
          $ref: '#/components/responses/NotFound'

  /voicerooms/{room_id}/join:
    post:
      tags: [Voice Rooms]
      summary: Присоединиться к голосовой комнате
      description: Присоединиться к голосовой комнате
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Присоединились к комнате
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Токен для подключения
                  room_info:
                    $ref: '#/components/schemas/VoiceRoom'
        '401':
          description: Неавторизован

  # Звонки
  /calls/initiate:
    post:
      tags: [Calls]
      summary: Инициировать звонок
      description: Инициировать звонок с другим пользователем
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: ID пользователя для звонка
                type:
                  type: string
                  enum: [audio, video]
                  default: audio
                  description: Тип звонка
      responses:
        '200':
          description: Звонок инициирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '401':
          description: Неавторизован

  /calls/initiate-secure:
    post:
      tags: [Calls]
      summary: Инициировать безопасный звонок
      description: Инициировать звонок с дополнительными ограничениями
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: ID пользователя для звонка
                type:
                  type: string
                  enum: [audio, video]
                  default: audio
                  description: Тип звонка
                restrictions:
                  type: object
                  properties:
                    max_duration:
                      type: integer
                      description: Максимальная длительность в минутах
                    require_verification:
                      type: boolean
                      description: Требовать верификацию
      responses:
        '200':
          description: Безопасный звонок инициирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '401':
          description: Неавторизован

  /calls/{id}/answer:
    post:
      tags: [Calls]
      summary: Ответить на звонок
      description: Ответить на входящий звонок
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Звонок принят
        '401':
          description: Неавторизован

  /calls/{id}/end:
    post:
      tags: [Calls]
      summary: Завершить звонок
      description: Завершить активный звонок
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Звонок завершен
        '401':
          description: Неавторизован

  /calls/{id}/cancel:
    post:
      tags: [Calls]
      summary: Отменить звонок
      description: Отменить звонок
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Звонок отменен
        '401':
          description: Неавторизован

  /calls/history:
    get:
      tags: [Calls]
      summary: История звонков
      description: Получить историю звонков пользователя
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: История звонков
          content:
            application/json:
              schema:
                type: object
                properties:
                  calls:
                    type: array
                    items:
                      $ref: '#/components/schemas/Call'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /calls/active:
    get:
      tags: [Calls]
      summary: Активные звонки
      description: Получить активные звонки пользователя
      responses:
        '200':
          description: Активные звонки
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Call'

  /calls/{id}/webrtc-token:
    get:
      tags: [Calls]
      summary: Получить WebRTC токен
      description: Получить токен для WebRTC соединения
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: WebRTC токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: WebRTC токен
                  ice_servers:
                    type: array
                    items:
                      type: object
                      properties:
                        urls:
                          type: array
                          items:
                            type: string
                        username:
                          type: string
                        credential:
                          type: string

  /calls/statistics:
    get:
      tags: [Calls]
      summary: Статистика звонков
      description: Получить статистику звонков пользователя
      responses:
        '200':
          description: Статистика звонков
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_calls:
                    type: integer
                  total_duration:
                    type: integer
                    description: Общая длительность в секундах
                  successful_calls:
                    type: integer
                  failed_calls:
                    type: integer

  /calls/{id}/webrtc-token-enhanced:
    get:
      tags: [Calls]
      summary: Получить расширенный WebRTC токен
      description: Получить расширенный токен для WebRTC соединения
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Расширенный WebRTC токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: WebRTC токен
                  ice_servers:
                    type: array
                    items:
                      type: object
                      properties:
                        urls:
                          type: array
                          items:
                            type: string
                        username:
                          type: string
                        credential:
                          type: string
                  turn_servers:
                    type: array
                    items:
                      type: object
                      properties:
                        urls:
                          type: array
                          items:
                            type: string
                        username:
                          type: string
                        credential:
                          type: string

  /calls/validate-token:
    post:
      tags: [Calls]
      summary: Валидировать WebRTC токен
      description: Валидировать WebRTC токен
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: WebRTC токен для валидации
      responses:
        '200':
          description: Токен валиден
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  expires_at:
                    type: string
                    format: date-time
        '400':
          description: Неверный токен

  /calls/{id}/notify:
    post:
      tags: [Calls]
      summary: Отправить уведомление о звонке
      description: Отправить уведомление о звонке пользователю
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Сообщение уведомления
                type:
                  type: string
                  enum: [incoming_call, call_ended, call_failed]
                  description: Тип уведомления
      responses:
        '200':
          description: Уведомление отправлено
        '401':
          description: Неавторизован

  # Аналитика
  /analytics/user:
    get:
      tags: [Analytics]
      summary: Аналитика пользователя
      description: Получить аналитику для пользователя
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Аналитика пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAnalytics'
        '401':
          description: Неавторизован

  /analytics/platform:
    get:
      tags: [Analytics]
      summary: Аналитика платформы
      description: Получить общую аналитику платформы
      responses:
        '200':
          description: Аналитика платформы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformAnalytics'
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав

  /analytics/revenue:
    get:
      tags: [Analytics]
      summary: Аналитика доходов
      description: Получить аналитику доходов
      responses:
        '200':
          description: Аналитика доходов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueAnalytics'
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав

  /analytics/engagement:
    get:
      tags: [Analytics]
      summary: Метрики вовлеченности
      description: Получить метрики вовлеченности пользователей
      responses:
        '200':
          description: Метрики вовлеченности
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngagementMetrics'
        '401':
          description: Неавторизован

  # Админ панель
  /admin/support/tickets:
    get:
      tags: [Admin]
      summary: Получить все тикеты поддержки
      description: Получить все тикеты поддержки (только для админов)
      responses:
        '200':
          description: Список тикетов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicket'
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав

  /admin/support/tickets/{id}:
    patch:
      tags: [Admin]
      summary: Обновить статус тикета
      description: Обновить статус тикета поддержки
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [open, in_progress, resolved, closed]
      responses:
        '200':
          description: Статус тикета обновлен
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав

  /admin/support/tickets/{id}/replies:
    post:
      tags: [Admin]
      summary: Создать ответ администратора
      description: Создать ответ администратора на тикет
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Сообщение ответа
      responses:
        '200':
          description: Ответ создан
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав

  # HLS Streaming endpoints
  /hls/{video_id}/playlist.m3u8:
    get:
      tags:
        - HLS Streaming
      summary: Получить HLS плейлист для видео
      description: |
        Возвращает HLS (HTTP Live Streaming) плейлист для указанного видео.
        Если видео не было обработано в HLS формат, оно будет автоматически конвертировано.
        Требует аутентификации для приватных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: HLS плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
                example: |
                  #EXTM3U
                  #EXT-X-VERSION:3
                  #EXT-X-TARGETDURATION:17
                  #EXT-X-MEDIA-SEQUENCE:0
                  #EXT-X-PLAYLIST-TYPE:VOD
                  #EXTINF:16.666667,
                  segment_000.ts
                  #EXTINF:8.333333,
                  segment_001.ts
                  #EXT-X-ENDLIST
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (видео приватное)
        '404':
          description: Видео не найдено
        '500':
          description: Ошибка обработки видео

  /hls/{video_id}/{segment}:
    get:
      tags:
        - HLS Streaming
      summary: Получить HLS сегмент
      description: |
        Возвращает HLS сегмент (TS файл) для указанного видео.
        Сегменты создаются автоматически при обработке видео в HLS формат.
        Требует аутентификации для приватных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
        - name: segment
          in: path
          required: true
          description: Имя сегмента (например, segment_000.ts)
          schema:
            type: string
            pattern: '^segment_\d{3}\.ts$'
            example: segment_000.ts
      responses:
        '200':
          description: HLS сегмент
          content:
            video/mp2t:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              description: Кэширование сегмента
              schema:
                type: string
                example: "public, max-age=86400"
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (видео приватное)
        '404':
          description: Сегмент не найден
        '400':
          description: Некорректное имя сегмента

  /hls/{video_id}/thumbnail.jpg:
    get:
      tags:
        - HLS Streaming
      summary: Получить thumbnail видео
      description: |
        Возвращает thumbnail (превью) для указанного видео в формате JPEG.
        Thumbnail создается автоматически при обработке видео в HLS формат.
        Требует аутентификации для приватных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Thumbnail изображение
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              description: Кэширование thumbnail
              schema:
                type: string
                example: "public, max-age=3600"
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (видео приватное)
        '404':
          description: Thumbnail не найден

  /hls/live/{stream_id}/playlist.m3u8:
    get:
      tags:
        - HLS Streaming
      summary: Получить HLS плейлист для live стрима
      description: |
        Возвращает HLS плейлист для live трансляции.
        Требует активного live стрима с указанным stream_id.
        Требует аутентификации для приватных стримов.
      security:
        - BearerAuth: []
      parameters:
        - name: stream_id
          in: path
          required: true
          description: ID live стрима
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Live HLS плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
                example: |
                  #EXTM3U
                  #EXT-X-VERSION:3
                  #EXT-X-TARGETDURATION:10
                  #EXT-X-MEDIA-SEQUENCE:123
                  #EXTINF:10.0,
                  segment_123.ts
                  #EXTINF:10.0,
                  segment_124.ts
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (стрим приватный)
        '404':
          description: Live стрим не найден
        '500':
          description: Ошибка получения live стрима

  /hls/live/{stream_id}/{segment}:
    get:
      tags:
        - HLS Streaming
      summary: Получить HLS сегмент live стрима
      description: |
        Возвращает HLS сегмент для live трансляции.
        Сегменты создаются в реальном времени во время live стрима.
        Требует аутентификации для приватных стримов.
      security:
        - BearerAuth: []
      parameters:
        - name: stream_id
          in: path
          required: true
          description: ID live стрима
          schema:
            type: integer
            format: int64
        - name: segment
          in: path
          required: true
          description: Имя сегмента live стрима
          schema:
            type: string
            pattern: '^segment_\d{3}\.ts$'
            example: segment_123.ts
      responses:
        '200':
          description: Live HLS сегмент
          content:
            video/mp2t:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              description: Кэширование live сегмента
              schema:
                type: string
                example: "public, max-age=10"
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (стрим приватный)
        '404':
          description: Сегмент live стрима не найден
        '400':
          description: Некорректное имя сегмента

  # HLS Extensions
  /hls/{video_id}/preview.mp4:
    get:
      tags:
        - HLS Streaming
      summary: Получить анимированное превью видео
      description: |
        Возвращает анимированное превью видео в формате MP4.
        Превью создается автоматически из первых 5 секунд видео.
        Требует аутентификации для приватных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Анимированное превью видео
          content:
            video/mp4:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              description: Кэширование превью
              schema:
                type: string
                example: "public, max-age=3600"
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (видео приватное)
        '404':
          description: Видео не найдено
        '500':
          description: Ошибка создания превью

  # Multi-variant HLS endpoints
  /hls/{video_id}/master.m3u8:
    get:
      tags:
        - HLS Streaming
      summary: Получить master HLS плейлист с разными качествами
      description: |
        Возвращает master HLS плейлист с разными качествами видео (360p, 720p, 1080p).
        Клиент может выбрать подходящее качество в зависимости от пропускной способности.
        Требует аутентификации для приватных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Master HLS плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                $ref: '#/components/schemas/HLSMasterPlaylist'
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен (видео приватное)
        '404':
          description: Видео не найдено
        '500':
          description: Ошибка обработки видео

  # Async processing endpoints
  /hls/{video_id}/status:
    get:
      tags:
        - HLS Streaming
      summary: Получить статус обработки HLS
      description: |
        Возвращает текущий статус обработки видео в HLS формат.
        Полезно для отслеживания прогресса конвертации длинных видео.
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Статус обработки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HLSProcessingStatus'
        '401':
          description: Неавторизован
        '403':
          description: Доступ запрещен
        '404':
          description: Видео не найдено

  # WebRTC integration for live streaming
  /livestreams/{stream_id}/publish:
    post:
      tags:
        - Live Streams
        - HLS Streaming
      summary: Публикация WebRTC потока для live стрима
      description: |
        Начинает публикацию WebRTC потока для live стрима.
        Поток будет автоматически конвертирован в HLS сегменты для просмотра.
      security:
        - BearerAuth: []
      parameters:
        - name: stream_id
          in: path
          required: true
          description: ID live стрима
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rtmp_url:
                  type: string
                  format: uri
                  description: RTMP URL для публикации потока
                  example: "rtmp://mebelplace.com.kz/live/stream_key_123"
                stream_key:
                  type: string
                  description: Ключ для публикации потока
                  example: "stream_key_123"
                quality:
                  type: string
                  enum: [360p, 720p, 1080p]
                  description: Качество стрима
                  example: "720p"
              required:
                - rtmp_url
                - stream_key
                - quality
      responses:
        '200':
          description: Публикация начата
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "publishing"
                  hls_url:
                    type: string
                    format: uri
                    example: "/api/v2/hls/live/1/playlist.m3u8"
                  rtmp_url:
                    type: string
                    format: uri
                    example: "rtmp://mebelplace.com.kz/live/stream_key_123"
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав для публикации
        '404':
          description: Live стрим не найден
        '409':
          description: Публикация уже активна

  # WebRTC Signaling endpoints
  /calls/{id}/webrtc-signal:
    post:
      tags:
        - Calls
        - WebRTC
      summary: Отправить WebRTC сигнал (SDP/ICE)
      description: |
        Отправляет WebRTC сигнал (SDP offer/answer или ICE candidates) для установки соединения.
        Используется для peer-to-peer связи между участниками звонка.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID звонка
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [offer, answer, ice-candidate]
                  description: Тип WebRTC сигнала
                  example: "offer"
                data:
                  type: object
                  description: Данные сигнала (SDP для offer/answer или ICE candidate)
                  example:
                    sdp: "v=0\r\no=- 1234567890 2 IN IP4 127.0.0.1..."
                    candidate: "candidate:1 1 UDP 2113667326 192.168.1.100 54400 typ host"
                    sdpMLineIndex: 0
                    sdpMid: "0"
              required:
                - type
                - data
      responses:
        '200':
          description: Сигнал отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "signal_sent"
                  timestamp:
                    type: integer
                    format: int64
                    example: 1640995200
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав для участия в звонке
        '404':
          description: Звонок не найден
        '400':
          description: Некорректные данные сигнала

  # WebSocket endpoints
  /ws/calls/{call_id}:
    get:
      tags:
        - Calls
        - WebSocket
      summary: WebSocket соединение для звонка
      description: |
        Устанавливает WebSocket соединение для real-time обмена данными во время звонка.
        Поддерживает WebRTC signaling, чат и управление звонком.
        
        ## Форматы сообщений:
        
        ### Входящие сообщения (от клиента):
        - `{"type": "offer", "sdp": "..."}` - WebRTC offer
        - `{"type": "answer", "sdp": "..."}` - WebRTC answer
        - `{"type": "ice-candidate", "candidate": "..."}` - ICE candidate
        - `{"type": "chat", "message": "..."}` - Сообщение в чате
        - `{"type": "mute", "audio": true/false}` - Управление звуком
        - `{"type": "video", "enabled": true/false}` - Управление видео
        
        ### Исходящие сообщения (к клиенту):
        - `{"type": "offer", "sdp": "...", "from": "user_id"}` - WebRTC offer
        - `{"type": "answer", "sdp": "...", "from": "user_id"}` - WebRTC answer
        - `{"type": "ice-candidate", "candidate": "...", "from": "user_id"}` - ICE candidate
        - `{"type": "chat", "message": "...", "from": "user_id", "timestamp": "..."}` - Сообщение в чате
        - `{"type": "user-joined", "user_id": "..."}` - Пользователь присоединился
        - `{"type": "user-left", "user_id": "..."}` - Пользователь покинул
        - `{"type": "call-ended"}` - Звонок завершен
      security:
        - BearerAuth: []
      parameters:
        - name: call_id
          in: path
          required: true
          description: ID звонка
          schema:
            type: integer
            format: int64
      responses:
        '101':
          description: WebSocket соединение установлено
          headers:
            Upgrade:
              description: WebSocket
              schema:
                type: string
            Connection:
              description: Upgrade
              schema:
                type: string
            Sec-WebSocket-Accept:
              description: WebSocket accept key
              schema:
                type: string
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав для участия в звонке
        '404':
          description: Звонок не найден

  # AI Video Analysis
  /videos/{id}/analyze:
    post:
      tags:
        - Videos
        - AI
      summary: Анализ видео с помощью AI
      description: |
        Запускает AI анализ видео для распознавания мебели, объектов и сцен.
        Результаты анализа сохраняются в базе данных для улучшения поиска.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID видео
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                analysis_type:
                  type: string
                  enum: [furniture, scene, objects, text, sentiment]
                  description: Тип анализа для выполнения
                  example: "furniture"
                options:
                  type: object
                  description: Дополнительные опции анализа
                  example:
                    confidence_threshold: 0.7
                    max_objects: 10
              required:
                - analysis_type
      responses:
        '202':
          description: Анализ запущен
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                    description: ID задачи анализа
                    example: "analysis_123456"
                  status:
                    type: string
                    example: "processing"
                  estimated_time:
                    type: integer
                    description: Ожидаемое время выполнения в секундах
                    example: 30
        '401':
          description: Неавторизован
        '403':
          description: Недостаточно прав для анализа видео
        '404':
          description: Видео не найдено
        '409':
          description: Анализ уже выполняется

  # Live Stream Donations
  /livestreams/{stream_id}/donate:
    post:
      tags:
        - Live Streams
        - Payments
      summary: Донат во время live стрима
      description: |
        Отправляет донат стримеру во время live трансляции.
        Поддерживает различные способы оплаты и анонимные донаты.
      security:
        - BearerAuth: []
      parameters:
        - name: stream_id
          in: path
          required: true
          description: ID live стрима
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                  description: Сумма доната
                  example: 10.50
                message:
                  type: string
                  maxLength: 200
                  description: Сообщение с донатом
                  example: "Отличный стрим! 🎉"
                is_anonymous:
                  type: boolean
                  description: Анонимный донат
                  example: false
                payment_method:
                  type: string
                  enum: [card, wallet, points]
                  description: Способ оплаты
                  example: "wallet"
              required:
                - amount
                - payment_method
      responses:
        '200':
          description: Донат отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  donation_id:
                    type: string
                    example: "donation_789"
                  status:
                    type: string
                    example: "completed"
                  transaction_id:
                    type: string
                    description: ID транзакции в платежной системе
                    example: "txn_abc123"
                  streamer_received:
                    type: number
                    format: float
                    description: Сумма, полученная стримером (с учетом комиссии)
                    example: 9.50
                  commission:
                    type: number
                    format: float
                    description: Комиссия платформы
                    example: 1.00
        '401':
          description: Неавторизован
        '404':
          description: Live стрим не найден
        '402':
          description: Ошибка обработки платежа
        '409':
          description: Стрим не активен

  # Модерация контента (требует роль moderator или admin)
  /moderation/videos:
    get:
      tags: [Moderation]
      summary: Список видео на модерации
      description: Получить список видео, ожидающих модерации
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
            default: pending
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список видео на модерации
          content:
            application/json:
              schema:
                type: object
                properties:
                  videos:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Video'
                        - type: object
                          properties:
                            moderation_status:
                              type: string
                              enum: [pending, approved, rejected]
                            moderation_reason:
                              type: string
                            moderated_at:
                              type: string
                              format: date-time
                            moderated_by:
                              type: integer
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Недостаточно прав для модерации

  /moderation/videos/{id}/approve:
    post:
      tags: [Moderation]
      summary: Одобрить видео
      description: Одобрить видео для публикации
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Причина одобрения
      responses:
        '200':
          description: Видео одобрено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Видео одобрено"
        '403':
          description: Недостаточно прав
        '404':
          description: Видео не найдено

  /moderation/videos/{id}/reject:
    post:
      tags: [Moderation]
      summary: Отклонить видео
      description: Отклонить видео с указанием причины
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  description: Причина отклонения
                  example: "Нарушение правил сообщества"
      responses:
        '200':
          description: Видео отклонено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Видео отклонено"
        '403':
          description: Недостаточно прав
        '404':
          description: Видео не найдено

  /moderation/comments:
    get:
      tags: [Moderation]
      summary: Список комментариев на модерации
      description: Получить список комментариев, ожидающих модерации
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
            default: pending
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список комментариев на модерации
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Comment'
                        - type: object
                          properties:
                            moderation_status:
                              type: string
                              enum: [pending, approved, rejected]
                            moderation_reason:
                              type: string
                            moderated_at:
                              type: string
                              format: date-time
                            moderated_by:
                              type: integer
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Недостаточно прав для модерации

  /moderation/comments/{id}/approve:
    post:
      tags: [Moderation]
      summary: Одобрить комментарий
      description: Одобрить комментарий для публикации
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Комментарий одобрен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Комментарий одобрен"
        '403':
          description: Недостаточно прав
        '404':
          description: Комментарий не найден

  /moderation/comments/{id}/reject:
    post:
      tags: [Moderation]
      summary: Отклонить комментарий
      description: Отклонить комментарий с указанием причины
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  description: Причина отклонения
                  example: "Спам или оскорбления"
      responses:
        '200':
          description: Комментарий отклонен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Комментарий отклонен"
        '403':
          description: Недостаточно прав
        '404':
          description: Комментарий не найден

  /moderation/streams:
    get:
      tags: [Moderation]
      summary: Список стримов на модерации
      description: Получить список live стримов, требующих модерации
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, banned]
            default: active
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список стримов на модерации
          content:
            application/json:
              schema:
                type: object
                properties:
                  streams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user_id:
                          type: integer
                        title:
                          type: string
                        status:
                          type: string
                          enum: [active, suspended, banned]
                        viewers_count:
                          type: integer
                        started_at:
                          type: string
                          format: date-time
                        moderation_reason:
                          type: string
                        moderated_at:
                          type: string
                          format: date-time
                        moderated_by:
                          type: integer
                        author:
                          $ref: '#/components/schemas/PublicUser'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Недостаточно прав для модерации

  /moderation/streams/{id}/suspend:
    post:
      tags: [Moderation]
      summary: Приостановить стрим
      description: Приостановить live стрим с указанием причины
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  description: Причина приостановки
                  example: "Нарушение правил трансляции"
                duration:
                  type: integer
                  description: Длительность приостановки в минутах
                  example: 60
      responses:
        '200':
          description: Стрим приостановлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Стрим приостановлен"
        '403':
          description: Недостаточно прав
        '404':
          description: Стрим не найден

  /moderation/streams/{id}/ban:
    post:
      tags: [Moderation]
      summary: Заблокировать стрим
      description: Заблокировать live стрим с указанием причины
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  description: Причина блокировки
                  example: "Серьезное нарушение правил"
      responses:
        '200':
          description: Стрим заблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Стрим заблокирован"
        '403':
          description: Недостаточно прав
        '404':
          description: Стрим не найден

  # Администрирование пользователей (требует роль admin)
  /admin/users:
    get:
      tags: [Admin]
      summary: Список пользователей
      description: Получить список всех пользователей с возможностью фильтрации
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [buyer, seller, admin, moderator]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, banned, suspended]
        - name: search
          in: query
          schema:
            type: string
            description: Поиск по username или email
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                          properties:
                            status:
                              type: string
                              enum: [active, banned, suspended]
                            banned_at:
                              type: string
                              format: date-time
                            banned_reason:
                              type: string
                            last_login:
                              type: string
                              format: date-time
                            total_videos:
                              type: integer
                            total_views:
                              type: integer
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Недостаточно прав администратора

  /admin/users/{id}/ban:
    post:
      tags: [Admin]
      summary: Заблокировать пользователя
      description: Заблокировать пользователя с указанием причины
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  description: Причина блокировки
                  example: "Нарушение правил сообщества"
                duration:
                  type: integer
                  description: Длительность блокировки в днях (0 = навсегда)
                  example: 30
      responses:
        '200':
          description: Пользователь заблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Пользователь заблокирован"
        '403':
          description: Недостаточно прав
        '404':
          description: Пользователь не найден

  /admin/users/{id}/unban:
    post:
      tags: [Admin]
      summary: Разблокировать пользователя
      description: Разблокировать пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь разблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Пользователь разблокирован"
        '403':
          description: Недостаточно прав
        '404':
          description: Пользователь не найден

  /admin/users/{id}/role:
    put:
      tags: [Admin]
      summary: Изменить роль пользователя
      description: Изменить роль пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role:
                  type: string
                  enum: [buyer, seller, admin, moderator]
                  example: "moderator"
      responses:
        '200':
          description: Роль пользователя изменена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Роль пользователя изменена"
                  user:
                    $ref: '#/components/schemas/User'
        '403':
          description: Недостаточно прав
        '404':
          description: Пользователь не найден

  /admin/users/{id}/suspend:
    post:
      tags: [Admin]
      summary: Приостановить пользователя
      description: Временно приостановить пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason, duration]
              properties:
                reason:
                  type: string
                  description: Причина приостановки
                  example: "Подозрительная активность"
                duration:
                  type: integer
                  description: Длительность приостановки в часах
                  example: 24
      responses:
        '200':
          description: Пользователь приостановлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Пользователь приостановлен"
        '403':
          description: Недостаточно прав
        '404':
          description: Пользователь не найден

  # Расширенная геймификация
  /gamification/rules:
    get:
      tags: [Gamification]
      summary: Получить правила геймификации
      description: Получить все правила начисления очков и достижений
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Правила геймификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  point_rules:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        action:
                          type: string
                          example: "video_upload"
                        points:
                          type: integer
                          example: 10
                        description:
                          type: string
                          example: "Загрузка видео"
                        is_active:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                  achievement_rules:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                          example: "Первое видео"
                        description:
                          type: string
                          example: "Загрузите ваше первое видео"
                        condition:
                          type: object
                          properties:
                            type:
                              type: string
                              example: "video_count"
                            value:
                              type: integer
                              example: 1
                        reward_points:
                          type: integer
                          example: 50
                        badge_url:
                          type: string
                          example: "https://mebelplace.com.kz/badges/first_video.png"
                        is_active:
                          type: boolean

  /gamification/rules:
    post:
      tags: [Gamification]
      summary: Создать правило геймификации
      description: Создать новое правило начисления очков или достижений
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, action, points]
              properties:
                type:
                  type: string
                  enum: [point_rule, achievement_rule]
                action:
                  type: string
                  example: "video_like"
                points:
                  type: integer
                  example: 5
                description:
                  type: string
                  example: "Лайк видео"
                condition:
                  type: object
                  description: Условие для достижения (только для achievement_rule)
                  properties:
                    type:
                      type: string
                      example: "video_likes_count"
                    value:
                      type: integer
                      example: 100
                reward_points:
                  type: integer
                  description: Дополнительные очки за достижение
                  example: 100
                badge_url:
                  type: string
                  description: URL значка достижения
                  example: "https://mebelplace.com.kz/badges/popular_creator.png"
      responses:
        '201':
          description: Правило создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Правило геймификации создано"
                  rule:
                    type: object
                    properties:
                      id:
                        type: integer
                      type:
                        type: string
                      action:
                        type: string
                      points:
                        type: integer
        '403':
          description: Недостаточно прав администратора

  /gamification/rules/{id}:
    put:
      tags: [Gamification]
      summary: Обновить правило геймификации
      description: Обновить существующее правило геймификации
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points:
                  type: integer
                description:
                  type: string
                is_active:
                  type: boolean
                condition:
                  type: object
                reward_points:
                  type: integer
                badge_url:
                  type: string
      responses:
        '200':
          description: Правило обновлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Правило геймификации обновлено"
        '403':
          description: Недостаточно прав администратора
        '404':
          description: Правило не найдено

  /gamification/rules/{id}:
    delete:
      tags: [Gamification]
      summary: Удалить правило геймификации
      description: Удалить правило геймификации
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Правило удалено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Правило геймификации удалено"
        '403':
          description: Недостаточно прав администратора
        '404':
          description: Правило не найдено

  /gamification/leaderboard/advanced:
    get:
      tags: [Gamification]
      summary: Расширенный лидерборд
      description: Получить лидерборд с фильтрами по региону, категории и периоду
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, all_time]
            default: all_time
        - name: region
          in: query
          schema:
            type: string
            description: Фильтр по региону
            example: "Алматы"
        - name: category
          in: query
          schema:
            type: string
            enum: [buyers, sellers, creators, all]
            default: all
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Лидерборд
          content:
            application/json:
              schema:
                type: object
                properties:
                  leaderboard:
                    type: array
                    items:
                      type: object
                      properties:
                        rank:
                          type: integer
                        user:
                          $ref: '#/components/schemas/PublicUser'
                        points:
                          type: integer
                        level:
                          type: integer
                        achievements_count:
                          type: integer
                        region:
                          type: string
                        category:
                          type: string
                        period_stats:
                          type: object
                          properties:
                            videos_uploaded:
                              type: integer
                            total_views:
                              type: integer
                            total_likes:
                              type: integer
                            total_comments:
                              type: integer
                  filters:
                    type: object
                    properties:
                      period:
                        type: string
                      region:
                        type: string
                      category:
                        type: string
                  total_users:
                    type: integer
                  user_rank:
                    type: integer
                    description: Ранг текущего пользователя

  /gamification/achievements/user/{user_id}:
    get:
      tags: [Gamification]
      summary: Достижения пользователя
      description: Получить все достижения конкретного пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Достижения пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/PublicUser'
                  achievements:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        badge_url:
                          type: string
                        earned_at:
                          type: string
                          format: date-time
                        progress:
                          type: object
                          properties:
                            current:
                              type: integer
                            target:
                              type: integer
                            percentage:
                              type: number
                  total_achievements:
                    type: integer
                  earned_achievements:
                    type: integer
                  completion_percentage:
                    type: number

  /gamification/levels:
    get:
      tags: [Gamification]
      summary: Система уровней
      description: Получить информацию о системе уровней
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Система уровней
          content:
            application/json:
              schema:
                type: object
                properties:
                  levels:
                    type: array
                    items:
                      type: object
                      properties:
                        level:
                          type: integer
                        min_points:
                          type: integer
                        max_points:
                          type: integer
                        name:
                          type: string
                          example: "Новичок"
                        description:
                          type: string
                          example: "Только начинаете свой путь"
                        badge_url:
                          type: string
                        benefits:
                          type: array
                          items:
                            type: string
                          example: ["Приоритетная поддержка", "Эксклюзивные стикеры"]
                  current_user_level:
                    type: object
                    properties:
                      level:
                        type: integer
                      points:
                        type: integer
                      points_to_next:
                        type: integer
                      progress_percentage:
                        type: number

  # AR/3D модели - расширенные возможности (требует таблицы: ar3d_models, ar3d_versions)
  /ar3d/models/upload:
    post:
      tags: [AR3D]
      summary: Загрузить 3D модель
      description: Загрузить 3D модель с поддержкой различных форматов
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, product_id, format]
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл 3D модели
                product_id:
                  type: integer
                  description: ID продукта
                format:
                  type: string
                  enum: [gltf, glb, usdz, obj, fbx, dae]
                  description: Формат 3D модели
                version:
                  type: string
                  description: Версия модели
                  example: "1.0.0"
                description:
                  type: string
                  description: Описание модели
                is_public:
                  type: boolean
                  description: Публичная ли модель
                  default: false
                metadata:
                  type: object
                  description: Дополнительные метаданные
                  properties:
                    scale:
                      type: number
                      description: Масштаб модели
                    rotation:
                      type: object
                      properties:
                        x:
                          type: number
                        y:
                          type: number
                        z:
                          type: number
                    position:
                      type: object
                      properties:
                        x:
                          type: number
                        y:
                          type: number
                        z:
                          type: number
      responses:
        '201':
          description: Модель загружена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "3D модель загружена"
                  model:
                    type: object
                    properties:
                      id:
                        type: integer
                      product_id:
                        type: integer
                      format:
                        type: string
                      version:
                        type: string
                      file_url:
                        type: string
                      thumbnail_url:
                        type: string
                      metadata:
                        type: object
                      created_at:
                        type: string
                        format: date-time
        '400':
          description: Неверный формат файла
        '413':
          description: Файл слишком большой

  /ar3d/models/{id}/versions:
    get:
      tags: [AR3D]
      summary: Версии модели
      description: Получить все версии 3D модели
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Версии модели
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        version:
                          type: string
                        format:
                          type: string
                        file_url:
                          type: string
                        thumbnail_url:
                          type: string
                        file_size:
                          type: integer
                        metadata:
                          type: object
                        is_active:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                        created_by:
                          type: integer

  /ar3d/models/{id}/versions:
    post:
      tags: [AR3D]
      summary: Добавить версию модели
      description: Добавить новую версию существующей 3D модели
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, version]
              properties:
                file:
                  type: string
                  format: binary
                version:
                  type: string
                  example: "1.1.0"
                description:
                  type: string
                metadata:
                  type: object
      responses:
        '201':
          description: Версия добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Версия модели добавлена"
                  version:
                    type: object
                    properties:
                      id:
                        type: integer
                      version:
                        type: string
                      file_url:
                        type: string
                      created_at:
                        type: string
                        format: date-time

  /ar3d/models/{id}/versions/{version_id}/activate:
    post:
      tags: [AR3D]
      summary: Активировать версию
      description: Активировать конкретную версию модели
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: version_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Версия активирована
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Версия модели активирована"

  /ar3d/models/validate:
    post:
      tags: [AR3D]
      summary: Валидация 3D модели
      description: Валидировать 3D модель перед загрузкой
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                format:
                  type: string
                  enum: [gltf, glb, usdz, obj, fbx, dae]
      responses:
        '200':
          description: Результат валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string
                  warnings:
                    type: array
                    items:
                      type: string
                  metadata:
                    type: object
                    properties:
                      file_size:
                        type: integer
                      format:
                        type: string
                      vertices_count:
                        type: integer
                      textures_count:
                        type: integer
                      materials_count:
                        type: integer
                      animations_count:
                        type: integer
                      bounding_box:
                        type: object
                        properties:
                          min:
                            type: object
                            properties:
                              x:
                                type: number
                              y:
                                type: number
                              z:
                                type: number
                          max:
                            type: object
                            properties:
                              x:
                                type: number
                              y:
                                type: number
                              z:
                                type: number

  /ar3d/models/{id}/render:
    get:
      tags: [AR3D]
      summary: Рендер модели
      description: Получить рендер 3D модели в различных форматах
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: format
          in: query
          schema:
            type: string
            enum: [png, jpg, webp]
            default: png
        - name: width
          in: query
          schema:
            type: integer
            default: 512
            maximum: 2048
        - name: height
          in: query
          schema:
            type: integer
            default: 512
            maximum: 2048
        - name: angle
          in: query
          schema:
            type: string
            enum: [front, back, left, right, top, bottom, isometric]
            default: isometric
        - name: background
          in: query
          schema:
            type: string
            enum: [transparent, white, black]
            default: transparent
      responses:
        '200':
          description: Рендер модели
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '404':
          description: Модель не найдена

  /ar3d/models/{id}/preview:
    get:
      tags: [AR3D]
      summary: Превью модели
      description: Получить интерактивное превью 3D модели
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: version
          in: query
          schema:
            type: string
            description: Конкретная версия модели
      responses:
        '200':
          description: HTML страница с превью модели
          content:
            text/html:
              schema:
                type: string
        '404':
          description: Модель не найдена

  /ar3d/models/search:
    get:
      tags: [AR3D]
      summary: Поиск 3D моделей
      description: Поиск 3D моделей по различным критериям
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
            description: Поисковый запрос
        - name: format
          in: query
          schema:
            type: string
            enum: [gltf, glb, usdz, obj, fbx, dae]
        - name: category
          in: query
          schema:
            type: string
            description: Категория мебели
        - name: min_vertices
          in: query
          schema:
            type: integer
            description: Минимальное количество вершин
        - name: max_vertices
          in: query
          schema:
            type: integer
            description: Максимальное количество вершин
        - name: has_animations
          in: query
          schema:
            type: boolean
            description: Есть ли анимации
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        product_id:
                          type: integer
                        format:
                          type: string
                        version:
                          type: string
                        thumbnail_url:
                          type: string
                        metadata:
                          type: object
                        created_at:
                          type: string
                          format: date-time
                        product:
                          type: object
                          properties:
                            name:
                              type: string
                            category:
                              type: string
                            price:
                              type: number
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  filters:
                    type: object
                    properties:
                      total_models:
                        type: integer
                      available_formats:
                        type: array
                        items:
                          type: string
                      available_categories:
                        type: array
                        items:
                          type: string

  # Карты и геолокация - расширенные возможности (требует таблицы: geo_objects, geo_reviews)
  /maps/geo-objects:
    get:
      tags: [Maps]
      summary: Список гео-объектов
      description: Получить список всех гео-объектов (магазины, склады, мастерские)
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [store, warehouse, workshop, showroom, service_center]
        - name: region
          in: query
          schema:
            type: string
            description: Регион или город
        - name: category
          in: query
          schema:
            type: string
            description: Категория мебели
        - name: radius
          in: query
          schema:
            type: number
            description: Радиус поиска в км
        - name: lat
          in: query
          schema:
            type: number
            description: Широта центра поиска
        - name: lng
          in: query
          schema:
            type: number
            description: Долгота центра поиска
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список гео-объектов
          content:
            application/json:
              schema:
                type: object
                properties:
                  geo_objects:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                          enum: [store, warehouse, workshop, showroom, service_center]
                        address:
                          type: string
                        coordinates:
                          type: object
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                        phone:
                          type: string
                        email:
                          type: string
                        website:
                          type: string
                        working_hours:
                          type: object
                          properties:
                            monday:
                              type: string
                            tuesday:
                              type: string
                            wednesday:
                              type: string
                            thursday:
                              type: string
                            friday:
                              type: string
                            saturday:
                              type: string
                            sunday:
                              type: string
                        rating:
                          type: number
                        reviews_count:
                          type: integer
                        categories:
                          type: array
                          items:
                            type: string
                        distance:
                          type: number
                          description: Расстояние в км (если указаны координаты)
                        is_verified:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /maps/geo-objects:
    post:
      tags: [Maps]
      summary: Добавить гео-объект
      description: Добавить новый гео-объект (магазин, склад, мастерскую)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type, address, coordinates]
              properties:
                name:
                  type: string
                  example: "Мебельный магазин 'Комфорт'"
                type:
                  type: string
                  enum: [store, warehouse, workshop, showroom, service_center]
                address:
                  type: string
                  example: "ул. Абая, 150, Алматы"
                coordinates:
                  type: object
                  required: [lat, lng]
                  properties:
                    lat:
                      type: number
                      example: 43.2220
                    lng:
                      type: number
                      example: 76.8512
                phone:
                  type: string
                  example: "+7 727 123 45 67"
                email:
                  type: string
                  format: email
                  example: "info@comfort.kz"
                website:
                  type: string
                  example: "https://comfort.kz"
                working_hours:
                  type: object
                  properties:
                    monday:
                      type: string
                      example: "09:00-18:00"
                    tuesday:
                      type: string
                      example: "09:00-18:00"
                    wednesday:
                      type: string
                      example: "09:00-18:00"
                    thursday:
                      type: string
                      example: "09:00-18:00"
                    friday:
                      type: string
                      example: "09:00-18:00"
                    saturday:
                      type: string
                      example: "10:00-16:00"
                    sunday:
                      type: string
                      example: "Выходной"
                categories:
                  type: array
                  items:
                    type: string
                  example: ["диваны", "кресла", "столы"]
                description:
                  type: string
                  example: "Большой выбор качественной мебели"
      responses:
        '201':
          description: Гео-объект добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Гео-объект добавлен"
                  geo_object:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      type:
                        type: string
                      address:
                        type: string
                      coordinates:
                        type: object
                        properties:
                          lat:
                            type: number
                          lng:
                            type: number
        '403':
          description: Недостаточно прав

  /maps/geo-objects/{id}:
    put:
      tags: [Maps]
      summary: Обновить гео-объект
      description: Обновить информацию о гео-объекте
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                coordinates:
                  type: object
                  properties:
                    lat:
                      type: number
                    lng:
                      type: number
                phone:
                  type: string
                email:
                  type: string
                website:
                  type: string
                working_hours:
                  type: object
                categories:
                  type: array
                  items:
                    type: string
                description:
                  type: string
      responses:
        '200':
          description: Гео-объект обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Гео-объект обновлен"
        '403':
          description: Недостаточно прав
        '404':
          description: Гео-объект не найден

  /maps/geo-objects/{id}:
    delete:
      tags: [Maps]
      summary: Удалить гео-объект
      description: Удалить гео-объект
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Гео-объект удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Гео-объект удален"
        '403':
          description: Недостаточно прав
        '404':
          description: Гео-объект не найден

  /maps/search:
    get:
      tags: [Maps]
      summary: Поиск по карте
      description: Поиск объектов по карте с учетом рейтинга и отзывов
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
            description: Поисковый запрос
        - name: lat
          in: query
          required: true
          schema:
            type: number
            description: Широта центра поиска
        - name: lng
          in: query
          required: true
          schema:
            type: number
            description: Долгота центра поиска
        - name: radius
          in: query
          schema:
            type: number
            default: 10
            description: Радиус поиска в км
        - name: type
          in: query
          schema:
            type: string
            enum: [store, warehouse, workshop, showroom, service_center, all]
            default: all
        - name: category
          in: query
          schema:
            type: string
            description: Категория мебели
        - name: min_rating
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 5
            description: Минимальный рейтинг
        - name: has_reviews
          in: query
          schema:
            type: boolean
            description: Только объекты с отзывами
        - name: sort
          in: query
          schema:
            type: string
            enum: [distance, rating, reviews_count, name]
            default: distance
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                        address:
                          type: string
                        coordinates:
                          type: object
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                        distance:
                          type: number
                          description: Расстояние в км
                        rating:
                          type: number
                        reviews_count:
                          type: integer
                        categories:
                          type: array
                          items:
                            type: string
                        phone:
                          type: string
                        working_hours:
                          type: object
                        is_open_now:
                          type: boolean
                        recent_reviews:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              rating:
                                type: number
                              comment:
                                type: string
                              author:
                                $ref: '#/components/schemas/PublicUser'
                              created_at:
                                type: string
                                format: date-time
                  search_info:
                    type: object
                    properties:
                      query:
                        type: string
                      center:
                        type: object
                        properties:
                          lat:
                            type: number
                          lng:
                            type: number
                      radius:
                        type: number
                      total_found:
                        type: integer
                      search_time:
                        type: number
                        description: Время поиска в мс

  /maps/geo-objects/{id}/reviews:
    get:
      tags: [Maps]
      summary: Отзывы о гео-объекте
      description: Получить отзывы о конкретном гео-объекте
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: rating
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
            description: Фильтр по рейтингу
      responses:
        '200':
          description: Отзывы о гео-объекте
          content:
            application/json:
              schema:
                type: object
                properties:
                  geo_object:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      type:
                        type: string
                      address:
                        type: string
                      average_rating:
                        type: number
                      total_reviews:
                        type: integer
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        rating:
                          type: number
                        comment:
                          type: string
                        photos:
                          type: array
                          items:
                            type: string
                        author:
                          $ref: '#/components/schemas/PublicUser'
                        created_at:
                          type: string
                          format: date-time
                        helpful_count:
                          type: integer
                        is_verified_purchase:
                          type: boolean
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  rating_distribution:
                    type: object
                    properties:
                      "5":
                        type: integer
                      "4":
                        type: integer
                      "3":
                        type: integer
                      "2":
                        type: integer
                      "1":
                        type: integer

  /maps/geo-objects/{id}/reviews:
    post:
      tags: [Maps]
      summary: Добавить отзыв
      description: Добавить отзыв о гео-объекте
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  example: "Отличный магазин, большой выбор мебели"
                photos:
                  type: array
                  items:
                    type: string
                  description: URL фотографий
      responses:
        '201':
          description: Отзыв добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Отзыв добавлен"
                  review:
                    type: object
                    properties:
                      id:
                        type: integer
                      rating:
                        type: number
                      comment:
                        type: string
                      author:
                        $ref: '#/components/schemas/PublicUser'
                      created_at:
                        type: string
                        format: date-time
        '403':
          description: Недостаточно прав
        '404':
          description: Гео-объект не найден

  /maps/geo-objects/{id}/verify:
    post:
      tags: [Maps]
      summary: Верифицировать гео-объект
      description: Верифицировать гео-объект (только для администраторов)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [verified]
              properties:
                verified:
                  type: boolean
                  example: true
                verification_notes:
                  type: string
                  example: "Проверен лично, все данные корректны"
      responses:
        '200':
          description: Статус верификации обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Гео-объект верифицирован"
        '403':
          description: Недостаточно прав администратора
        '404':
          description: Гео-объект не найден

  # Расширенные интеграции
  /integrations/payments/transactions:
    get:
      tags: [Integrations]
      summary: История транзакций
      description: Получить историю платежных транзакций
      security:
        - BearerAuth: []
      parameters:
        - name: provider
          in: query
          schema:
            type: string
            enum: [kaspi, halyk, alipay, wechat, paypal]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, completed, failed, refunded]
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: История транзакций
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        provider:
                          type: string
                        amount:
                          type: number
                        currency:
                          type: string
                        status:
                          type: string
                        description:
                          type: string
                        transaction_id:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        completed_at:
                          type: string
                          format: date-time
                        metadata:
                          type: object
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /integrations/payments/transactions/{id}/refund:
    post:
      tags: [Integrations]
      summary: Возврат платежа
      description: Инициировать возврат платежа
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, reason]
              properties:
                amount:
                  type: number
                  description: Сумма возврата
                reason:
                  type: string
                  description: Причина возврата
                  example: "Отмена заказа"
                notify_customer:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Возврат инициирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Возврат инициирован"
                  refund_id:
                    type: string
                  estimated_time:
                    type: string
                    example: "3-5 рабочих дней"

  /integrations/messengers/whatsapp/send:
    post:
      tags: [Integrations]
      summary: Отправить сообщение в WhatsApp
      description: Отправить сообщение через WhatsApp Business API
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, message]
              properties:
                phone:
                  type: string
                  example: "+77771234567"
                message:
                  type: string
                  example: "Ваш заказ готов к получению"
                template:
                  type: string
                  description: Шаблон сообщения
                variables:
                  type: object
                  description: Переменные для шаблона
                  example:
                    order_id: "12345"
                    customer_name: "Иван"
      responses:
        '200':
          description: Сообщение отправлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Сообщение отправлено"
                  message_id:
                    type: string
                  status:
                    type: string
                    example: "sent"

  /integrations/messengers/telegram/send:
    post:
      tags: [Integrations]
      summary: Отправить сообщение в Telegram
      description: Отправить сообщение через Telegram Bot API
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [chat_id, message]
              properties:
                chat_id:
                  type: string
                  example: "123456789"
                message:
                  type: string
                  example: "Новое уведомление о заказе"
                parse_mode:
                  type: string
                  enum: [HTML, Markdown, MarkdownV2]
                  default: HTML
                reply_markup:
                  type: object
                  description: Inline клавиатура
      responses:
        '200':
          description: Сообщение отправлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Сообщение отправлено"
                  message_id:
                    type: integer

  /integrations/crm/contacts:
    get:
      tags: [Integrations]
      summary: Контакты из CRM
      description: Получить контакты из интегрированной CRM системы
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
            description: Поиск по имени или email
        - name: status
          in: query
          schema:
            type: string
            enum: [lead, customer, prospect, inactive]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список контактов
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        phone:
                          type: string
                        status:
                          type: string
                        source:
                          type: string
                        last_activity:
                          type: string
                          format: date-time
                        tags:
                          type: array
                          items:
                            type: string
                        custom_fields:
                          type: object
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /integrations/crm/contacts/{id}/sync:
    post:
      tags: [Integrations]
      summary: Синхронизировать контакт
      description: Синхронизировать данные контакта с CRM
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                status:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                custom_fields:
                  type: object
      responses:
        '200':
          description: Контакт синхронизирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Контакт синхронизирован"
                  contact:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      status:
                        type: string

  # Массовые уведомления
  /notifications/broadcast:
    post:
      tags: [Notifications]
      summary: Массовая рассылка
      description: Отправить массовое уведомление пользователям
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message, target]
              properties:
                title:
                  type: string
                  example: "Новое обновление приложения"
                message:
                  type: string
                  example: "Доступны новые функции для работы с 3D моделями"
                target:
                  type: object
                  required: [type]
                  properties:
                    type:
                      type: string
                      enum: [all, role, region, custom]
                    filters:
                      type: object
                      properties:
                        roles:
                          type: array
                          items:
                            type: string
                        regions:
                          type: array
                          items:
                            type: string
                        user_ids:
                          type: array
                          items:
                            type: integer
                channels:
                  type: array
                  items:
                    type: string
                    enum: [push, email, sms, in_app]
                  default: ["push", "in_app"]
                scheduled_at:
                  type: string
                  format: date-time
                  description: Время отправки (если не указано - немедленно)
                template_id:
                  type: integer
                  description: ID шаблона уведомления
      responses:
        '201':
          description: Рассылка создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Рассылка создана"
                  broadcast_id:
                    type: integer
                  estimated_recipients:
                    type: integer
                  scheduled_at:
                    type: string
                    format: date-time
        '403':
          description: Недостаточно прав администратора

  /notifications/templates:
    get:
      tags: [Notifications]
      summary: Шаблоны уведомлений
      description: Получить список шаблонов уведомлений
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [email, sms, push, in_app]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Список шаблонов
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                        subject:
                          type: string
                        content:
                          type: string
                        variables:
                          type: array
                          items:
                            type: string
                        is_active:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /notifications/templates:
    post:
      tags: [Notifications]
      summary: Создать шаблон
      description: Создать новый шаблон уведомления
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type, subject, content]
              properties:
                name:
                  type: string
                  example: "Приветственное письмо"
                type:
                  type: string
                  enum: [email, sms, push, in_app]
                subject:
                  type: string
                  example: "Добро пожаловать в MebelPlace!"
                content:
                  type: string
                  example: "Привет, {{user_name}}! Добро пожаловать в наше сообщество."
                variables:
                  type: array
                  items:
                    type: string
                  example: ["user_name", "user_email"]
                is_active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Шаблон создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Шаблон создан"
                  template:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      type:
                        type: string
                      subject:
                        type: string
                      content:
                        type: string
                      variables:
                        type: array
                        items:
                          type: string
        '403':
          description: Недостаточно прав администратора

  # Расширенные голосовые комнаты
  /voicerooms/{room_id}/record:
    post:
      tags: [VoiceRooms]
      summary: Начать запись
      description: Начать запись голосовой комнаты
      security:
        - BearerAuth: []
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quality]
              properties:
                quality:
                  type: string
                  enum: [low, medium, high]
                  default: medium
                include_video:
                  type: boolean
                  default: false
                participants:
                  type: array
                  items:
                    type: integer
                  description: ID участников для записи (если не указано - все)
      responses:
        '200':
          description: Запись начата
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Запись начата"
                  recording_id:
                    type: string
                  estimated_duration:
                    type: integer
                    description: Ожидаемая длительность в минутах

  /voicerooms/{room_id}/record/{recording_id}/stop:
    post:
      tags: [VoiceRooms]
      summary: Остановить запись
      description: Остановить запись голосовой комнаты
      security:
        - BearerAuth: []
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            type: integer
        - name: recording_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Запись остановлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Запись остановлена"
                  recording_url:
                    type: string
                  duration:
                    type: integer
                    description: Длительность записи в секундах

  /voicerooms/group/create:
    post:
      tags: [VoiceRooms]
      summary: Создать групповую комнату
      description: Создать голосовую комнату для группового общения
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, max_participants]
              properties:
                name:
                  type: string
                  example: "Обсуждение проекта"
                description:
                  type: string
                  example: "Планирование нового дизайна"
                max_participants:
                  type: integer
                  minimum: 2
                  maximum: 50
                  default: 10
                is_public:
                  type: boolean
                  default: false
                password:
                  type: string
                  description: Пароль для приватной комнаты
                features:
                  type: object
                  properties:
                    screen_sharing:
                      type: boolean
                      default: true
                    recording:
                      type: boolean
                      default: false
                    chat:
                      type: boolean
                      default: true
                    moderation:
                      type: boolean
                      default: false
      responses:
        '201':
          description: Групповая комната создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Групповая комната создана"
                  room:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      join_url:
                        type: string
                      max_participants:
                        type: integer
                      current_participants:
                        type: integer
                      is_public:
                        type: boolean
                      features:
                        type: object

  # Аналитика видео
  /analytics/videos/{id}/heatmap:
    get:
      tags: [Analytics]
      summary: Тепловая карта видео
      description: Получить тепловую карту просмотров видео
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: period
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      responses:
        '200':
          description: Тепловая карта
          content:
            application/json:
              schema:
                type: object
                properties:
                  video_id:
                    type: integer
                  period:
                    type: string
                  heatmap_data:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: number
                          description: Время в секундах от начала видео
                        view_count:
                          type: integer
                        engagement_score:
                          type: number
                        drop_off_rate:
                          type: number
                  total_views:
                    type: integer
                  average_watch_time:
                    type: number
                  completion_rate:
                    type: number
                  peak_engagement:
                    type: object
                    properties:
                      timestamp:
                        type: number
                      engagement_score:
                        type: number

  /analytics/videos/{id}/multicast:
    post:
      tags: [Analytics]
      summary: Настроить мультикаст
      description: Настроить мультикастинг для видео с адаптивным битрейтом
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quality_levels]
              properties:
                quality_levels:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "720p"
                      resolution:
                        type: object
                        properties:
                          width:
                            type: integer
                            example: 1280
                          height:
                            type: integer
                            example: 720
                      bitrate:
                        type: integer
                        example: 2500000
                      codec:
                        type: string
                        example: "h264"
                adaptive_bitrate:
                  type: boolean
                  default: true
                buffer_size:
                  type: integer
                  default: 10
                  description: Размер буфера в секундах
      responses:
        '200':
          description: Мультикаст настроен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Мультикаст настроен"
                  stream_urls:
                    type: object
                    properties:
                      hls:
                        type: string
                      dash:
                        type: string
                      rtmp:
                        type: string
                  quality_levels:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        url:
                          type: string
                        bitrate:
                          type: integer

  # OAuth 2.0 поддержка (требует настройки OAuth клиентов в БД)
  /auth/oauth/authorize:
    get:
      tags: [Auth]
      summary: OAuth авторизация
      description: Начать процесс OAuth авторизации
      security: []
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          schema:
            type: string
            example: "read write"
        - name: state
          in: query
          schema:
            type: string
      responses:
        '302':
          description: Перенаправление на страницу авторизации
        '400':
          description: Неверные параметры запроса

  /auth/oauth/token:
    post:
      tags: [Auth]
      summary: Получить OAuth токен
      description: Обменять код авторизации на токен доступа
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [grant_type, code, client_id, client_secret]
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                code:
                  type: string
                  description: Код авторизации (для authorization_code)
                refresh_token:
                  type: string
                  description: Refresh токен (для refresh_token)
                client_id:
                  type: string
                client_secret:
                  type: string
                redirect_uri:
                  type: string
      responses:
        '200':
          description: Токен получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: "Bearer"
                  expires_in:
                    type: integer
                    example: 3600
                  refresh_token:
                    type: string
                  scope:
                    type: string
        '400':
          description: Неверный запрос
        '401':
          description: Неверные учетные данные

  /auth/oauth/revoke:
    post:
      tags: [Auth]
      summary: Отозвать OAuth токен
      description: Отозвать токен доступа или refresh токен
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  description: Токен для отзыва
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
      responses:
        '200':
          description: Токен отозван
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Токен отозван"

components:
  # Отсутствующие роуты из бэкенда
  
  # AR/3D Models
  /ar3d/models/product/{product_id}:
    get:
      tags: [AR/3D Models]
      summary: Получить 3D модели для продукта
      description: Получить список 3D моделей для конкретного продукта
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список 3D моделей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AR3DModel'

  # Calls
  /calls:
    get:
      tags: [Calls]
      summary: Список звонков
      description: Получить список звонков пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список звонков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Call'

  # Channels
  /channels/{id}/posts:
    get:
      tags: [Channels]
      summary: Посты канала
      description: Получить посты канала
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelPost'

  # Chats
  /chats:
    get:
      tags: [Chats]
      summary: Список чатов
      description: Получить список чатов пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список чатов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'

  /chats/{id}/messages:
    get:
      tags: [Chats]
      summary: Сообщения чата
      description: Получить сообщения чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список сообщений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  # Gamification
  /gamification/achievements/user/{user_id}:
    get:
      tags: [Gamification]
      summary: Достижения пользователя
      description: Получить достижения конкретного пользователя
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список достижений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'

  /gamification/rules/{id}:
    get:
      tags: [Gamification]
      summary: Правило геймификации
      description: Получить правило геймификации по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Правило геймификации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamificationRule'

  # Group Chats
  /group-chats:
    get:
      tags: [Group Chats]
      summary: Список групповых чатов
      description: Получить список групповых чатов
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список групповых чатов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupChat'

  /group-chats/{id}/members:
    get:
      tags: [Group Chats]
      summary: Участники группового чата
      description: Получить список участников группового чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список участников
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /group-chats/{id}/messages:
    get:
      tags: [Group Chats]
      summary: Сообщения группового чата
      description: Получить сообщения группового чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список сообщений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  # HLS Streaming
  /hls/{video_id}/{segment}:
    get:
      tags: [Videos]
      summary: HLS сегмент
      description: Получить HLS сегмент видео
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: integer
        - name: segment
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: HLS сегмент
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string

  /hls/{video_id}/master.m3u8:
    get:
      tags: [Videos]
      summary: HLS master плейлист
      description: Получить master плейлист для видео
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Master плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string

  /hls/{video_id}/playlist.m3u8:
    get:
      tags: [Videos]
      summary: HLS плейлист
      description: Получить плейлист для видео
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: HLS плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string

  /hls/{video_id}/preview.mp4:
    get:
      tags: [Videos]
      summary: Превью видео
      description: Получить превью видео
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Превью видео
          content:
            video/mp4:
              schema:
                type: string
                format: binary

  /hls/{video_id}/thumbnail.jpg:
    get:
      tags: [Videos]
      summary: Thumbnail видео
      description: Получить thumbnail видео
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Thumbnail изображение
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

  /hls/live/{stream_id}/{segment}:
    get:
      tags: [Live Streaming]
      summary: HLS сегмент live стрима
      description: Получить HLS сегмент live стрима
      parameters:
        - name: stream_id
          in: path
          required: true
          schema:
            type: integer
        - name: segment
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: HLS сегмент
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string

  /hls/live/{stream_id}/playlist.m3u8:
    get:
      tags: [Live Streaming]
      summary: HLS плейлист live стрима
      description: Получить плейлист для live стрима
      parameters:
        - name: stream_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: HLS плейлист
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string

  # Live Streams
  /livestreams:
    get:
      tags: [Live Streaming]
      summary: Список live стримов
      description: Получить список активных live стримов
      responses:
        '200':
          description: Список live стримов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveStream'

  /livestreams/{stream_id}/donate:
    post:
      tags: [Live Streaming]
      summary: Донат на стрим
      description: Отправить донат на live стрим
      parameters:
        - name: stream_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: Сумма доната в копейках
                message:
                  type: string
                  description: Сообщение с донатом
      responses:
        '200':
          description: Донат отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /livestreams/{stream_id}/end:
    post:
      tags: [Live Streaming]
      summary: Завершить стрим
      description: Завершить live стрим
      parameters:
        - name: stream_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Стрим завершен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Maps
  /maps/geo-objects/{id}:
    get:
      tags: [Maps]
      summary: Геообъект
      description: Получить информацию о геообъекте
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о геообъекте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoObject'

  # Notifications
  /notifications/settings:
    get:
      tags: [Notifications]
      summary: Настройки уведомлений
      description: Получить настройки уведомлений пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Настройки уведомлений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'

    post:
      tags: [Notifications]
      summary: Обновить настройки уведомлений
      description: Обновить настройки уведомлений пользователя
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: Настройки обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Requests
  /requests:
    get:
      tags: [Requests]
      summary: Список заявок
      description: Получить список заявок
      responses:
        '200':
          description: Список заявок
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'

  /requests/{id}/proposals:
    get:
      tags: [Requests]
      summary: Предложения к заявке
      description: Получить предложения к заявке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'

  /requests/{id}/proposals/{proposal_id}/accept:
    post:
      tags: [Requests]
      summary: Принять предложение
      description: Принять предложение к заявке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: proposal_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Предложение принято
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Stories
  /stories:
    get:
      tags: [Stories]
      summary: Список историй
      description: Получить список активных историй
      responses:
        '200':
          description: Список историй
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'

  # Subscriptions
  /subscriptions/{user_id}:
    post:
      tags: [Users]
      summary: Подписаться на пользователя
      description: Подписаться на пользователя
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Подписка создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

    delete:
      tags: [Users]
      summary: Отписаться от пользователя
      description: Отписаться от пользователя
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Подписка удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Support
  /support/tickets:
    get:
      tags: [Support]
      summary: Список тикетов поддержки
      description: Получить список тикетов поддержки
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список тикетов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicket'

  # Users
  /users/me:
    get:
      tags: [Users]
      summary: Мой профиль
      description: Получить информацию о текущем пользователе
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}/block:
    post:
      tags: [Users]
      summary: Заблокировать пользователя
      description: Заблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Пользователь заблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

    delete:
      tags: [Users]
      summary: Разблокировать пользователя
      description: Разблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Пользователь разблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Videos
  /videos/{id}/comments:
    get:
      tags: [Videos]
      summary: Комментарии к видео
      description: Получить комментарии к видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

  # Voice Rooms
  /voicerooms/{room_id}/join:
    post:
      tags: [Voice Rooms]
      summary: Присоединиться к голосовой комнате
      description: Присоединиться к голосовой комнате
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Присоединился к комнате
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  # Written Channels
  /written-channels:
    get:
      tags: [Written Channels]
      summary: Список письменных каналов
      description: Получить список письменных каналов
      responses:
        '200':
          description: Список каналов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WrittenChannel'

  /written-channels/{id}/posts:
    get:
      tags: [Written Channels]
      summary: Посты письменного канала
      description: Получить посты письменного канала
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelPost'

  # WebSocket
  /ws/calls/{call_id}:
    get:
      tags: [WebSocket]
      summary: WebSocket для звонка
      description: Подключиться к WebSocket для звонка
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '101':
          description: Переключение протоколов на WebSocket
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://mebelplace.com.kz/auth/oauth/authorize
          tokenUrl: https://mebelplace.com.kz/auth/oauth/token
          scopes:
            read: Чтение данных
            write: Запись данных
            admin: Административные права

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        phone:
          type: string
          example: "+77777777777"
        role:
          type: string
          enum: [buyer, seller, admin]
          example: "buyer"
        avatar_url:
          type: string
          example: "https://mebelplace.com.kz/uploads/avatars/user_1.jpg"
        bio:
          type: string
          example: "Люблю качественную мебель"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PublicUser:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatar_url:
          type: string
        bio:
          type: string
        is_online:
          type: boolean
        last_seen:
          type: string
          format: date-time

    Video:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Красивый диван"
        description:
          type: string
          example: "Показываю новый диван"
        path:
          type: string
          example: "https://mebelplace.com.kz/uploads/videos/video_1.mp4"
        thumbnail_path:
          type: string
          example: "https://mebelplace.com.kz/uploads/thumbnails/thumb_1.jpg"
        size_bytes:
          type: integer
          example: 10485760
        hashtags:
          type: array
          items:
            type: string
          example: ["диван", "мебель", "дом"]
        views_count:
          type: integer
          example: 150
        likes_count:
          type: integer
          example: 25
        comments_count:
          type: integer
          example: 5
        shares_count:
          type: integer
          example: 3
        product_price:
          type: number
          example: 150000.00
        product_description:
          type: string
          example: "Диван из натуральной кожи"
        is_product:
          type: boolean
          example: true
        is_ad:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'

    Comment:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        video_id:
          type: integer
        text:
          type: string
        parent_id:
          type: integer
          nullable: true
        likes_count:
          type: integer
        created_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Request:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        budget:
          type: number
        region:
          type: string
        status:
          type: string
          enum: [open, in_progress, completed, cancelled]
        photos:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'
        proposals_count:
          type: integer

    Proposal:
      type: object
      properties:
        id:
          type: integer
        request_id:
          type: integer
        user_id:
          type: integer
        message:
          type: string
        price:
          type: number
        photos:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [pending, accepted, rejected]
        created_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'

    Chat:
      type: object
      properties:
        id:
          type: integer
        user1_id:
          type: integer
        user2_id:
          type: integer
        last_message:
          $ref: '#/components/schemas/Message'
        unread_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: integer
        chat_id:
          type: integer
        user_id:
          type: integer
        text:
          type: string
        type:
          type: string
          enum: [text, image, video, file]
        file_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/PublicUser'

    Channel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        avatar_url:
          type: string
        subscribers_count:
          type: integer
        posts_count:
          type: integer
        is_subscribed:
          type: boolean
        created_at:
          type: string
          format: date-time

    ChannelPost:
      type: object
      properties:
        id:
          type: integer
        channel_id:
          type: integer
        content:
          type: string
        media_urls:
          type: array
          items:
            type: string
        likes_count:
          type: integer
        comments_count:
          type: integer
        created_at:
          type: string
          format: date-time
        channel:
          $ref: '#/components/schemas/Channel'

    Notification:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          type: string
          enum: [video.published, stream.started, story.published, request.proposal, comment.created, chat.message, achievement.earned]
        title:
          type: string
        message:
          type: string
        data:
          type: object
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time

    NotificationSettings:
      type: object
      properties:
        push_enabled:
          type: boolean
        email_enabled:
          type: boolean
        sms_enabled:
          type: boolean
        types:
          type: object
          additionalProperties:
            type: boolean
          description: "Map of notification types to enabled status"
          example:
            messages: true
            orders: true
            likes: false
            comments: true

    ChannelSubscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        channel_id:
          type: string
          format: uuid
        level:
          type: string
          enum: [all, important, off]
          description: "Уровень уведомлений: all (все), important (только важные), off (выключено)"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SubscriptionRequest:
      type: object
      required:
        - channel_id
        - level
      properties:
        channel_id:
          type: string
          format: uuid
          description: "ID канала для подписки"
        level:
          type: string
          enum: [all, important, off]
          description: "Уровень уведомлений"
        push_enabled:
          type: boolean
          description: "Включены ли push уведомления"
        email_enabled:
          type: boolean
          description: "Включены ли email уведомления"
        sms_enabled:
          type: boolean
          description: "Включены ли SMS уведомления"

    Call:
      type: object
      properties:
        id:
          type: integer
        caller_id:
          type: integer
        receiver_id:
          type: integer
        type:
          type: string
          enum: [audio, video]
        status:
          type: string
          enum: [initiated, ringing, active, ended, cancelled]
        duration:
          type: integer
          description: Длительность в секундах
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time
          nullable: true

    UserAnalytics:
      type: object
      properties:
        period:
          type: string
        total_views:
          type: integer
        total_likes:
          type: integer
        total_comments:
          type: integer
        total_shares:
          type: integer
        profile_views:
          type: integer
        new_followers:
          type: integer
        videos_uploaded:
          type: integer
        requests_created:
          type: integer

    PlatformAnalytics:
      type: object
      properties:
        total_users:
          type: integer
        active_users:
          type: integer
        total_videos:
          type: integer
        total_requests:
          type: integer
        total_calls:
          type: integer
        platform_revenue:
          type: number

    RevenueAnalytics:
      type: object
      properties:
        period:
          type: string
        total_revenue:
          type: number
        commission_revenue:
          type: number
        subscription_revenue:
          type: number
        ad_revenue:
          type: number
        growth_rate:
          type: number

    EngagementMetrics:
      type: object
      properties:
        daily_active_users:
          type: integer
        weekly_active_users:
          type: integer
        monthly_active_users:
          type: integer
        average_session_duration:
          type: number
        retention_rate:
          type: number
        engagement_rate:
          type: number

    SupportTicket:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        subject:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/PublicUser'

    Story:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        username:
          type: string
        user_avatar:
          type: string
        media_url:
          type: string
        media_type:
          type: string
          enum: [image, video, voice]
        duration_seconds:
          type: integer
        caption:
          type: string
        views_count:
          type: integer
        likes_count:
          type: integer
        is_pinned:
          type: boolean
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        is_viewed:
          type: boolean

    GroupChat:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_by:
          type: integer
        is_public:
          type: boolean
        max_members:
          type: integer
        members_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    WrittenChannel:
      type: object
      properties:
        id:
          type: integer
        master_id:
          type: integer
        name:
          type: string
        description:
          type: string
        avatar:
          type: string
        is_public:
          type: boolean
        subscribers_count:
          type: integer
        posts_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserLevel:
      type: object
      properties:
        level:
          type: integer
        points:
          type: integer
        points_to_next_level:
          type: integer
        level_name:
          type: string
        badges:
          type: array
          items:
            type: string

    Achievement:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        icon_url:
          type: string
        points_reward:
          type: integer
        is_earned:
          type: boolean
        earned_at:
          type: string
          format: date-time

    LeaderboardEntry:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        avatar_url:
          type: string
        points:
          type: integer
        level:
          type: integer
        rank:
          type: integer

    AR3DModel:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        model_url:
          type: string
        preview_url:
          type: string
        file_size:
          type: integer
        format:
          type: string
        created_at:
          type: string
          format: date-time

    MasterOnMap:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatar_url:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        address:
          type: string
        categories:
          type: array
          items:
            type: string
        rating:
          type: number
        distance_km:
          type: number

    PaymentProvider:
      type: object
      properties:
        id:
          type: integer
        provider:
          type: string
        is_connected:
          type: boolean
        connected_at:
          type: string
          format: date-time
        settings:
          type: object

    ReferralStats:
      type: object
      properties:
        total_referrals:
          type: integer
        successful_referrals:
          type: integer
        total_earned:
          type: number
        referral_code:
          type: string
        referral_link:
          type: string

    LiveStream:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        username:
          type: string
        avatar_url:
          type: string
        title:
          type: string
        description:
          type: string
        stream_url:
          type: string
        thumbnail_url:
          type: string
        viewers_count:
          type: integer
        is_public:
          type: boolean
        started_at:
          type: string
          format: date-time

    VoiceRoom:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_by:
          type: integer
        max_participants:
          type: integer
        current_participants:
          type: integer
        is_public:
          type: boolean
        created_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 5
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        error:
          type: string
          description: Сообщение об ошибке
        code:
          type: integer
          description: Код ошибки
        details:
          type: object
          description: Дополнительные детали ошибки

    HLSPlaylist:
      type: string
      format: m3u8
      description: HLS плейлист в формате M3U8
      example: |
        #EXTM3U
        #EXT-X-VERSION:3
        #EXT-X-TARGETDURATION:17
        #EXT-X-MEDIA-SEQUENCE:0
        #EXT-X-PLAYLIST-TYPE:VOD
        #EXTINF:16.666667,
        segment_000.ts
        #EXTINF:8.333333,
        segment_001.ts
        #EXTINF:5.000000,
        segment_002.ts
        #EXT-X-ENDLIST

    HLSMasterPlaylist:
      type: string
      format: m3u8
      description: Master HLS плейлист с разными качествами
      example: |
        #EXTM3U
        #EXT-X-VERSION:3
        #EXT-X-STREAM-INF:BANDWIDTH=800000,RESOLUTION=640x360,NAME="360p"
        360p/playlist.m3u8
        #EXT-X-STREAM-INF:BANDWIDTH=1400000,RESOLUTION=1280x720,NAME="720p"
        720p/playlist.m3u8
        #EXT-X-STREAM-INF:BANDWIDTH=2800000,RESOLUTION=1920x1080,NAME="1080p"
        1080p/playlist.m3u8

    HLSProcessingStatus:
      type: object
      properties:
        video_id:
          type: integer
          format: int64
          description: ID видео
          example: 1
        status:
          type: string
          enum: [pending, processing, ready, failed]
          description: Статус обработки
          example: "processing"
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Прогресс обработки (0-1)
          example: 0.75
        eta_seconds:
          type: integer
          description: Ожидаемое время завершения в секундах
          example: 30
        error_message:
          type: string
          description: Сообщение об ошибке (если status = failed)
          example: "FFmpeg processing failed"

    HLSSegment:
      type: object
      properties:
        name:
          type: string
          description: Имя сегмента
          example: "segment_000.ts"
        url:
          type: string
          format: uri
          description: URL сегмента
          example: "/api/v2/hls/1/segment_000.ts"
        duration:
          type: number
          format: float
          description: Длительность сегмента в секундах
          example: 16.666667
        size_bytes:
          type: integer
          description: Размер сегмента в байтах
          example: 312456

    HLSThumbnail:
      type: object
      properties:
        video_id:
          type: integer
          format: int64
          description: ID видео
          example: 1
        thumbnail_url:
          type: string
          format: uri
          description: URL thumbnail
          example: "/api/v2/hls/1/thumbnail.jpg"
        size_bytes:
          type: integer
          description: Размер thumbnail в байтах
          example: 23904
        format:
          type: string
          description: Формат изображения
          example: "jpeg"
        width:
          type: integer
          description: Ширина thumbnail в пикселях
          example: 640
        height:
          type: integer
          description: Высота thumbnail в пикселях
          example: 480

  responses:
    BadRequest:
      description: Ошибка валидации запроса
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Validation failed"
            code: 400
            details:
              field: "email"
              message: "Invalid email format"

    Unauthorized:
      description: Неавторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized"
            code: 401

    Forbidden:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Forbidden"
            code: 403

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Not found"
            code: 404

    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: 500
    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: 500