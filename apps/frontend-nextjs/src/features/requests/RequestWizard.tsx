'use client'

/**
 * Request Wizard - 3-step wizard for creating requests (per TZ)
 * Step 1: Photo upload
 * Step 2: Details (size, region, budget)
 * Step 3: Preview & Send
 */

import { useState } from 'react'
import { ChevronLeft, ChevronRight, Upload, Check } from 'lucide-react'
import { Button } from '@/components/ui'

interface RequestData {
  photos: File[]
  title: string
  description: string
  category: string
  region: string
  budget?: number
}

interface RequestWizardProps {
  onSubmit: (data: RequestData) => void
  onCancel: () => void
}

export function RequestWizard({ onSubmit, onCancel }: RequestWizardProps) {
  const [step, setStep] = useState(1)
  const [data, setData] = useState<Partial<RequestData>>({
    photos: [],
  })

  const isStep1Valid = (data.photos?.length ?? 0) > 0
  const isStep2Valid = data.title && data.description && data.category && data.region

  const handleNext = () => {
    if (step < 3) setStep(step + 1)
  }

  const handleBack = () => {
    if (step > 1) setStep(step - 1)
  }

  const handleSubmit = () => {
    if (isStep2Valid) {
      onSubmit(data as RequestData)
    }
  }

  return (
    <div className="w-full max-w-2xl mx-auto p-6">
      {/* Progress indicator */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-2">
          {[1, 2, 3].map((i) => (
            <div key={i} className="flex items-center">
              <div
                className={`w-10 h-10 rounded-full flex items-center justify-center font-bold transition-all ${
                  i === step
                    ? 'bg-primary text-white scale-110'
                    : i < step
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}
              >
                {i < step ? <Check className="w-6 h-6" /> : i}
              </div>
              {i < 3 && (
                <div
                  className={`w-20 h-1 mx-2 ${
                    i < step ? 'bg-green-500' : 'bg-gray-200'
                  }`}
                />
              )}
            </div>
          ))}
        </div>
        <div className="text-center text-sm text-gray-600">
          –®–∞–≥ {step} –∏–∑ 3
        </div>
      </div>

      {/* Step content */}
      <div className="min-h-[400px]">
        {step === 1 && (
          <div className="space-y-4">
            <div className="text-left">
              <h2 className="text-2xl font-bold mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ</h2>
              <p className="text-gray-600">
                –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 10), —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä–∞ –ª—É—á—à–µ –ø–æ–Ω—è–ª–∏ –≤–∞—à—É –∑–∞–¥–∞—á—É
              </p>
            </div>

            <div className="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-primary transition-colors cursor-pointer">
              <Upload className="w-12 h-12 mx-auto mb-4 text-gray-400" />
              <p className="text-gray-600 mb-2">
                –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞
              </p>
              <p className="text-sm text-gray-400">PNG, JPG –¥–æ 10MB</p>
              <input
                type="file"
                multiple
                accept="image/*"
                className="hidden"
                onChange={(e) => {
                  const files = Array.from(e.target.files || [])
                  setData({ ...data, photos: files })
                }}
              />
            </div>

            {(data.photos?.length ?? 0) > 0 && (
              <div className="text-center text-green-600">
                ‚úì {data.photos?.length} —Ñ–æ—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
              </div>
            )}
          </div>
        )}

        {step === 2 && (
          <div className="space-y-4">
            <div className="text-left">
              <h2 className="text-2xl font-bold mb-2">–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É</h2>
              <p className="text-gray-600">
                –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ *
              </label>
              <input
                type="text"
                className="w-full px-4 py-2 border rounded-lg focus-ring"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å –∫—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä"
                value={data.title || ''}
                onChange={(e) => setData({ ...data, title: e.target.value })}
                aria-label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                –û–ø–∏—Å–∞–Ω–∏–µ *
              </label>
              <textarea
                className="w-full px-4 py-2 border rounded-lg focus-ring"
                rows={4}
                placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
                value={data.description || ''}
                onChange={(e) => setData({ ...data, description: e.target.value })}
                aria-label="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                </label>
                <select
                  className="w-full px-4 py-2 border rounded-lg focus-ring"
                  value={data.category || ''}
                  onChange={(e) => setData({ ...data, category: e.target.value })}
                  aria-label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
                  <option value="furniture">–ú–µ–±–µ–ª—å</option>
                  <option value="repair">–†–µ–º–æ–Ω—Ç</option>
                  <option value="design">–î–∏–∑–∞–π–Ω</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  –†–µ–≥–∏–æ–Ω *
                </label>
                <select
                  className="w-full px-4 py-2 border rounded-lg focus-ring"
                  value={data.region || ''}
                  onChange={(e) => setData({ ...data, region: e.target.value })}
                  aria-label="–†–µ–≥–∏–æ–Ω"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
                  <option value="almaty">–ê–ª–º–∞—Ç—ã</option>
                  <option value="astana">–ê—Å—Ç–∞–Ω–∞</option>
                  <option value="shymkent">–®—ã–º–∫–µ–Ω—Ç</option>
                </select>
              </div>
            </div>
          </div>
        )}

        {step === 3 && (
          <div className="space-y-6">
            <div className="text-left">
              <h2 className="text-2xl font-bold mb-2">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ</h2>
              <p className="text-gray-600">
                –ú–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏
              </p>
            </div>

            <div className="bg-gray-50 rounded-lg p-6 space-y-4">
              <div>
                <p className="text-sm text-gray-600">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</p>
                <p className="font-medium">{data.photos?.length} —Ñ–æ—Ç–æ</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">–ù–∞–∑–≤–∞–Ω–∏–µ:</p>
                <p className="font-medium">{data.title}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ:</p>
                <p className="font-medium">{data.description}</p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-600">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</p>
                  <p className="font-medium">{data.category}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600">–†–µ–≥–∏–æ–Ω:</p>
                  <p className="font-medium">{data.region}</p>
                </div>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-800">
                üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ —Å–º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫–∏
              </p>
            </div>
          </div>
        )}
      </div>

      {/* Navigation */}
      <div className="flex items-center justify-between mt-8 pt-6 border-t">
        <button
          onClick={step === 1 ? onCancel : handleBack}
          className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900"
          aria-label={step === 1 ? '–û—Ç–º–µ–Ω–∞' : '–ù–∞–∑–∞–¥'}
        >
          <ChevronLeft className="w-5 h-5" />
          {step === 1 ? '–û—Ç–º–µ–Ω–∞' : '–ù–∞–∑–∞–¥'}
        </button>

        {step < 3 ? (
          <Button
            aria-label="–î–∞–ª–µ–µ"
            onClick={handleNext}
            disabled={step === 1 ? !isStep1Valid : !isStep2Valid}
            variant="primary"
          >
            –î–∞–ª–µ–µ
            <ChevronRight className="w-5 h-5 ml-2" />
          </Button>
        ) : (
          <Button
            aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
            onClick={handleSubmit}
            variant="primary"
          >
            <Check className="w-5 h-5 mr-2" />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
          </Button>
        )}
      </div>
    </div>
  )
}


