'use client';

import React, { useState } from 'react';
import { GlassCard, GlassCardHeader, GlassCardTitle, GlassCardContent, GlassButton } from '@/components/ui/glass';

export default function GlassAwardsScreen() {
  const [activeTab, setActiveTab] = useState('achievements');

  const achievements = [
    {
      id: '1',
      title: '–ú–∞—Å—Ç–µ—Ä –≥–æ–¥–∞ 2023',
      description: '–õ—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –º–µ–±–µ–ª–∏',
      recipient: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      date: '2023-12-15',
      category: 'achievement',
      image: '/api/placeholder/200/200'
    },
    {
      id: '2',
      title: '–õ—É—á—à–∏–π –¥–∏–∑–∞–π–Ω –∫—É—Ö–Ω–∏',
      description: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–∏–∑–∞–π–Ω–∞',
      recipient: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      date: '2023-11-20',
      category: 'design',
      image: '/api/placeholder/200/200'
    },
    {
      id: '3',
      title: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
      description: '–ó–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      recipient: '–ü–µ—Ç—Ä –ö–æ–∑–ª–æ–≤',
      date: '2023-10-10',
      category: 'innovation',
      image: '/api/placeholder/200/200'
    }
  ];

  const badges = [
    {id: '1', name: '–ü–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤', description: '–í—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤', earned: true},
    {id: '2', name: '–û—Ç–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã', description: '–ü–æ–ª—É—á–∏–ª 50+ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤', earned: true},
    {id: '3', name: '–≠–∫—Å–ø–µ—Ä—Ç –∫–∞—á–µ—Å—Ç–≤–∞', description: '–í—Å–µ –∑–∞–∫–∞–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ 5 –∑–≤–µ–∑–¥', earned: false},
    {id: '4', name: '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞', description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã –±—ã—Å—Ç—Ä–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', earned: true}
  ];

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="min-h-screen glass-bg-primary glass-blur-base p-4">
      <div className="max-w-6xl mx-auto">
        <GlassCard variant="elevated" padding="lg" className="mb-6">
          <GlassCardHeader>
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <GlassCardTitle level={1} className="flex items-center gap-3">
                <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                </svg>
                –ù–∞–≥—Ä–∞–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </GlassCardTitle>
            </div>
          </GlassCardHeader>
          <GlassCardContent>
            <div className="flex gap-2">
              {[
                {id: 'achievements', label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', icon: 'üèÜ'},
                {id: 'badges', label: '–ó–Ω–∞—á–∫–∏', icon: 'üéñÔ∏è'},
                {id: 'leaderboard', label: '–†–µ–π—Ç–∏–Ω–≥', icon: 'üìä'}
              ].map(tab => (
                <GlassButton
                  key={tab.id}
                  variant={activeTab === tab.id ? 'gradient' : 'ghost'}
                  size="md"
                  onClick={() => setActiveTab(tab.id)}
                >
                  <span className="mr-2">{tab.icon}</span>
                  {tab.label}
                </GlassButton>
              ))}
            </div>
          </GlassCardContent>
        </GlassCard>

        {activeTab === 'achievements' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {achievements.map(achievement => (
              <GlassCard key={achievement.id} variant="elevated" padding="lg">
                <GlassCardHeader>
                  <div className="text-center">
                    <div className="w-20 h-20 glass-bg-accent-orange-500 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                      </svg>
                    </div>
                    <h3 className="font-semibold glass-text-primary mb-2">
                      {achievement.title}
                    </h3>
                    <p className="glass-text-secondary text-sm mb-3">
                      {achievement.description}
                    </p>
                    <div className="text-sm glass-text-muted mb-3">
                      –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {achievement.recipient}
                    </div>
                    <div className="text-xs glass-text-muted">
                      {formatDate(achievement.date)}
                    </div>
                  </div>
                </GlassCardHeader>
              </GlassCard>
            ))}
          </div>
        )}

        {activeTab === 'badges' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {badges.map(badge => (
              <GlassCard key={badge.id} variant={badge.earned ? "elevated" : "interactive"} padding="lg">
                <GlassCardHeader>
                  <div className="text-center">
                    <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${badge.earned ? 'glass-bg-success' : 'glass-bg-secondary'}`}>
                      <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                      </svg>
                    </div>
                    <h3 className="font-semibold glass-text-primary mb-2 text-sm">
                      {badge.name}
                    </h3>
                    <p className="glass-text-secondary text-xs mb-3">
                      {badge.description}
                    </p>
                    <span className={`px-2 py-1 rounded-full text-xs ${badge.earned ? 'glass-bg-success text-white' : 'glass-bg-secondary text-white'}`}>
                      {badge.earned ? '–ü–æ–ª—É—á–µ–Ω' : '–ù–µ –ø–æ–ª—É—á–µ–Ω'}
                    </span>
                  </div>
                </GlassCardHeader>
              </GlassCard>
            ))}
          </div>
        )}

        {activeTab === 'leaderboard' && (
          <GlassCard variant="elevated" padding="lg">
            <GlassCardHeader>
              <GlassCardTitle level={2}>–†–µ–π—Ç–∏–Ω–≥ –º–∞—Å—Ç–µ—Ä–æ–≤</GlassCardTitle>
            </GlassCardHeader>
            <GlassCardContent>
              <div className="space-y-4">
                {[
                  {rank: 1, name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', rating: 4.9, orders: 156},
                  {rank: 2, name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞', rating: 4.8, orders: 142},
                  {rank: 3, name: '–ü–µ—Ç—Ä –ö–æ–∑–ª–æ–≤', rating: 4.8, orders: 128},
                  {rank: 4, name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', rating: 4.7, orders: 115},
                  {rank: 5, name: '–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤', rating: 4.7, orders: 103}
                ].map(master => (
                  <div key={master.rank} className="flex items-center justify-between glass-bg-secondary p-4 rounded-lg">
                    <div className="flex items-center gap-4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                        master.rank === 1 ? 'glass-bg-accent-orange-500' :
                        master.rank === 2 ? 'glass-bg-accent-blue-500' :
                        master.rank === 3 ? 'glass-bg-success' :
                        'glass-bg-secondary'
                      }`}>
                        {master.rank}
                      </div>
                      <div>
                        <div className="font-semibold glass-text-primary">{master.name}</div>
                        <div className="text-sm glass-text-secondary">{master.orders} –∑–∞–∫–∞–∑–æ–≤</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center gap-1">
                        <svg className="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                        <span className="font-semibold glass-text-primary">{master.rating}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </GlassCardContent>
          </GlassCard>
        )}
      </div>
    </div>
  );
}
