const { chromium } = require('playwright');

// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ü–û–î–î–ï–†–ñ–ö–ò
async function diagnoseSupportPage() {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è...');
    
    // –õ–æ–≥–∏–Ω–∏–º—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await page.goto('https://mebelplace.com.kz/login', { waitUntil: 'networkidle' });
    await page.waitForTimeout(2000);
    
    await page.locator('input[placeholder="+7XXXXXXXXXX"]').fill('+77771234567');
    await page.waitForTimeout(500);
    
    await page.locator('input[type="password"]').fill('testpass123');
    await page.waitForTimeout(500);
    
    await page.locator('button:has-text("–í–æ–π—Ç–∏")').click();
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    console.log('üí¨ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
    await page.goto('https://mebelplace.com.kz/support', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const html = await page.content();
    console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω');
    
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    const buttons = await page.locator('button').all();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫:`);
    
    for (let i = 0; i < Math.min(10, buttons.length); i++) {
      try {
        const text = await buttons[i].textContent();
        const className = await buttons[i].getAttribute('class');
        console.log(`   Button ${i + 1}: text="${text}", class="${className}"`);
      } catch (error) {
        console.log(`   Button ${i + 1}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    const links = await page.locator('a').all();
    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫:`);
    
    for (let i = 0; i < Math.min(10, links.length); i++) {
      try {
        const text = await links[i].textContent();
        const href = await links[i].getAttribute('href');
        console.log(`   Link ${i + 1}: text="${text}", href="${href}"`);
      } catch (error) {
        console.log(`   Link ${i + 1}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –ò—â–µ–º —Ñ–æ—Ä–º—ã
    const forms = await page.locator('form').all();
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${forms.length} —Ñ–æ—Ä–º:`);
    
    for (let i = 0; i < forms.length; i++) {
      try {
        const action = await forms[i].getAttribute('action');
        const method = await forms[i].getAttribute('method');
        console.log(`   Form ${i + 1}: action="${action}", method="${method}"`);
      } catch (error) {
        console.log(`   Form ${i + 1}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputs = await page.locator('input, textarea').all();
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${inputs.length} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞:`);
    
    for (let i = 0; i < Math.min(10, inputs.length); i++) {
      try {
        const type = await inputs[i].getAttribute('type');
        const name = await inputs[i].getAttribute('name');
        const placeholder = await inputs[i].getAttribute('placeholder');
        console.log(`   Input ${i + 1}: type="${type}", name="${name}", placeholder="${placeholder}"`);
      } catch (error) {
        console.log(`   Input ${i + 1}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
    const url = page.url();
    console.log(`üåê –¢–µ–∫—É—â–∏–π URL: "${url}"`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    await browser.close();
  }
}

diagnoseSupportPage().catch(console.error);
