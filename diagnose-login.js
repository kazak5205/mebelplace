const { chromium } = require('playwright');

// üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –õ–û–ì–ò–ù–ê
async function diagnoseLoginPage() {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 }
  });
  
  const page = await context.newPage();
  
  try {
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...');
    await page.goto('https://mebelplace.com.kz/login', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const html = await page.content();
    console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(html.substring(0, 2000));
    
    // –ò—â–µ–º –≤—Å–µ input –ø–æ–ª—è
    const inputs = await page.locator('input').all();
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${inputs.length} input –ø–æ–ª–µ–π:`);
    
    for (let i = 0; i < inputs.length; i++) {
      const input = inputs[i];
      const type = await input.getAttribute('type');
      const name = await input.getAttribute('name');
      const placeholder = await input.getAttribute('placeholder');
      const id = await input.getAttribute('id');
      const className = await input.getAttribute('class');
      
      console.log(`  Input ${i + 1}: type="${type}", name="${name}", placeholder="${placeholder}", id="${id}", class="${className}"`);
    }
    
    // –ò—â–µ–º –≤—Å–µ button —ç–ª–µ–º–µ–Ω—Ç—ã
    const buttons = await page.locator('button').all();
    console.log(`\nüîò –ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫:`);
    
    for (let i = 0; i < buttons.length; i++) {
      const button = buttons[i];
      const text = await button.textContent();
      const type = await button.getAttribute('type');
      const className = await button.getAttribute('class');
      
      console.log(`  Button ${i + 1}: text="${text?.trim()}", type="${type}", class="${className}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const modals = await page.locator('.modal, .fixed, [role="dialog"]').all();
    console.log(`\nü™ü –ù–∞–π–¥–µ–Ω–æ ${modals.length} –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:`);
    
    for (let i = 0; i < modals.length; i++) {
      const modal = modals[i];
      const className = await modal.getAttribute('class');
      const isVisible = await modal.isVisible();
      console.log(`  Modal ${i + 1}: class="${className}", visible=${isVisible}`);
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: '/opt/mebelplace/login-page.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /opt/mebelplace/login-page.png');
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseLoginPage().catch(console.error);
