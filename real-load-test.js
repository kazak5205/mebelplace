#!/usr/bin/env node

const https = require('https');
const http = require('http');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
const CONFIG = {
  target: 'https://mebelplace.com.kz',
  totalUsers: 500,
  rampUpTime: 60, // —Å–µ–∫—É–Ω–¥
  testDuration: 300, // —Å–µ–∫—É–Ω–¥
  concurrentUsers: 50,
  videoIds: [
    '83bf658f-f504-416f-acaf-8b8052b8fe91',
    '20880709-ecc5-41f2-b801-9a7005a27549',
    '3cd91b71-e2ec-4889-b963-0ea2d4329dad'
  ]
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  requests: 0,
  errors: 0,
  responseTimes: [],
  startTime: Date.now(),
  users: 0
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const startTime = performance.now();
    
    const req = https.request(url, {
      method: options.method || 'GET',
      headers: {
        'User-Agent': 'MebelPlace Load Test Bot',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        ...options.headers
      }
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        
        stats.requests++;
        stats.responseTimes.push(responseTime);
        
        if (res.statusCode >= 400) {
          stats.errors++;
        }
        
        resolve({
          statusCode: res.statusCode,
          responseTime,
          data: data.substring(0, 100) // –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        });
      });
    });
    
    req.on('error', (err) => {
      stats.errors++;
      reject(err);
    });
    
    req.setTimeout(10000, () => {
      stats.errors++;
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    if (options.body) {
      req.write(options.body);
    }
    req.end();
  });
}

// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function simulateUser(userId) {
  const userStats = {
    requests: 0,
    errors: 0,
    startTime: Date.now()
  };
  
  try {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log(`üë§ User ${userId}: Loading homepage...`);
    await makeRequest(`${CONFIG.target}/`);
    userStats.requests++;
    
    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ API –≤–∏–¥–µ–æ
    console.log(`üë§ User ${userId}: Loading video feed...`);
    await makeRequest(`${CONFIG.target}/api/videos/feed`);
    userStats.requests++;
    
    // 3. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–∏–¥–µ–æ (TikTok-—Å—Ç–∏–ª—å)
    const videoId = CONFIG.videoIds[Math.floor(Math.random() * CONFIG.videoIds.length)];
    console.log(`üë§ User ${userId}: Watching video ${videoId}...`);
    await makeRequest(`${CONFIG.target}/?videoId=${videoId}`);
    userStats.requests++;
    
    // 4. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    await makeRequest(`${CONFIG.target}/api/videos/${videoId}`);
    userStats.requests++;
    
    // 5. –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
    for (let i = 0; i < 3; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
      await makeRequest(`${CONFIG.target}/api/videos/${videoId}`);
      userStats.requests++;
    }
    
    // 6. –ü–æ–∏—Å–∫
    console.log(`üë§ User ${userId}: Searching...`);
    await makeRequest(`${CONFIG.target}/api/videos/feed?search=–º–µ–±–µ–ª—å`);
    userStats.requests++;
    
    // 7. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    await makeRequest(`${CONFIG.target}/login`);
    userStats.requests++;
    
    console.log(`‚úÖ User ${userId}: Completed ${userStats.requests} requests`);
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: Error - ${error.message}`);
    userStats.errors++;
  }
  
  return userStats;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runLoadTest() {
  console.log('üöÄ Starting REAL Load Test for MebelPlace');
  console.log(`üìä Target: ${CONFIG.target}`);
  console.log(`üë• Users: ${CONFIG.totalUsers}`);
  console.log(`‚è±Ô∏è  Duration: ${CONFIG.testDuration}s`);
  console.log(`üîÑ Concurrent: ${CONFIG.concurrentUsers}`);
  console.log('‚îÄ'.repeat(60));
  
  const startTime = Date.now();
  const users = [];
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  for (let i = 0; i < CONFIG.totalUsers; i++) {
    const delay = (i / CONFIG.totalUsers) * CONFIG.rampUpTime * 1000;
    
    setTimeout(async () => {
      const user = simulateUser(i + 1);
      users.push(user);
      stats.users++;
      
      console.log(`üë§ User ${i + 1} started (${stats.users} active users)`);
    }, delay);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (users.length >= CONFIG.concurrentUsers) {
      await Promise.race(users);
    }
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  await new Promise(resolve => setTimeout(resolve, CONFIG.testDuration * 1000));
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const endTime = Date.now();
  const duration = (endTime - startTime) / 1000;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const avgResponseTime = stats.responseTimes.reduce((a, b) => a + b, 0) / stats.responseTimes.length;
  const maxResponseTime = Math.max(...stats.responseTimes);
  const minResponseTime = Math.min(...stats.responseTimes);
  const requestsPerSecond = stats.requests / duration;
  const errorRate = (stats.errors / stats.requests) * 100;
  
  console.log('\n' + '‚ïê'.repeat(60));
  console.log('üìä LOAD TEST RESULTS');
  console.log('‚ïê'.repeat(60));
  console.log(`‚è±Ô∏è  Test Duration: ${duration.toFixed(2)}s`);
  console.log(`üë• Total Users: ${stats.users}`);
  console.log(`üìà Total Requests: ${stats.requests}`);
  console.log(`‚ö° Requests/sec: ${requestsPerSecond.toFixed(2)}`);
  console.log(`‚ùå Errors: ${stats.errors} (${errorRate.toFixed(2)}%)`);
  console.log(`üìä Avg Response Time: ${avgResponseTime.toFixed(2)}ms`);
  console.log(`üìä Min Response Time: ${minResponseTime.toFixed(2)}ms`);
  console.log(`üìä Max Response Time: ${maxResponseTime.toFixed(2)}ms`);
  
  // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('\nüéØ PERFORMANCE ASSESSMENT:');
  if (errorRate < 1 && avgResponseTime < 1000) {
    console.log('‚úÖ EXCELLENT - Ready for production!');
  } else if (errorRate < 5 && avgResponseTime < 2000) {
    console.log('‚ö†Ô∏è  GOOD - Minor optimizations needed');
  } else {
    console.log('‚ùå NEEDS OPTIMIZATION - Performance issues detected');
  }
  
  console.log('‚ïê'.repeat(60));
}

// –ó–∞–ø—É—Å–∫
runLoadTest().catch(console.error);
