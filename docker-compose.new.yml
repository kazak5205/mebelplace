version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mebelplace-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mebelplace
      POSTGRES_USER: mebelplace
      POSTGRES_PASSWORD: mebelplace123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mebelplace-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mebelplace-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass mebelplace123
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - mebelplace-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - SKIP_MOBILE=true
    container_name: mebelplace-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mebelplace
      DB_USER: mebelplace
      DB_PASSWORD: mebelplace123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: mebelplace123
      JWT_SECRET: mebelplace-super-secret-jwt-key-2025
      JWT_REFRESH_SECRET: mebelplace-refresh-secret-key-2025
      CLIENT_URL: https://mebelplace.com.kz
      SOCKET_URL: https://mebelplace.com.kz
      CORS_ORIGIN: https://mebelplace.com.kz
      SMS_API_KEY: kz8a6b114a5eecbbdffcb1f0ea6a00189b81d6e6b7eaf6e6646e86bc8e77eb2e98a488
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - mebelplace-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mebelplace-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server/uploads:/var/www/uploads:ro
      - ./current-client:/var/www/html:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
    networks:
      - mebelplace-network

  # Frontend (Static files served by Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: mebelplace-frontend
    restart: unless-stopped
    networks:
      - mebelplace-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mebelplace-network:
    driver: bridge

