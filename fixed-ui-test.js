const { chromium } = require('playwright');

// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –° –ó–ê–ö–†–´–¢–ò–ï–ú –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 100,        // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  concurrentUsers: 15,     // –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
  testDuration: 1800,      // 30 –º–∏–Ω—É—Ç
  databaseCheckInterval: 30, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 2000,
  realUIMode: true
};

console.log('üöÄ STARTING FIXED REAL UI LOAD TEST FOR MEBELPLACE');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞)`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function closeModal(page) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalExists = await page.evaluate(() => {
      const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
      return !!modal;
    });
    
    if (modalExists) {
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å Escape
      await page.keyboard.press('Escape');
      await page.waitForTimeout(1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã–ª–æ—Å—å –ª–∏
      const stillExists = await page.evaluate(() => {
        const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
        return !!modal;
      });
      
      if (!stillExists) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
        return true;
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å');
        return false;
      }
    }
    
    return true; // –ú–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –±—ã–ª–æ
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log(`üåê User ${userId}: –ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç...`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let retries = 0;
    while (retries < config.maxRetries) {
      try {
        await page.goto(config.targetUrl, { 
          waitUntil: 'networkidle',
          timeout: config.browserTimeout 
        });
        break;
      } catch (error) {
        retries++;
        console.log(`üîÑ User ${userId}: –ü–æ–ø—ã—Ç–∫–∞ ${retries}/${config.maxRetries} - ${error.message}`);
        if (retries >= config.maxRetries) throw error;
        await page.waitForTimeout(2000);
      }
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    const modalClosed = await closeModal(page);
    if (!modalClosed) {
      console.log(`‚ùå User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
      failedActions++;
      totalActions++;
      return;
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    await page.goto(`${config.targetUrl}/register`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneNumber = `+7777${String(userId).padStart(7, '0')}`;
    const username = `TestUser${userId}`;
    
    console.log(`üìù User ${userId}: –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('input[placeholder="+7XXXXXXXXXX"]', phoneNumber);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="username"]', username);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"]', 'testpass123');
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"]', 'testpass123');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    console.log(`üöÄ User ${userId}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É...`);
    await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º SMS –∫–æ–¥
    console.log(`üì± User ${userId}: –ñ–¥–µ—Ç SMS –∫–æ–¥...`);
    
    // –°–ª—É—à–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∫–æ–¥–∞
    let smsCode = null;
    page.on('console', msg => {
      if (msg.text().includes('SMS code sent')) {
        try {
          const match = msg.text().match(/code:\s*(\d+)/);
          if (match) {
            smsCode = match[1];
            console.log(`üì± User ${userId}: –ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥: ${smsCode}`);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      }
    });
    
    // –ñ–¥–µ–º SMS –∫–æ–¥ –¥–æ 10 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    while (!smsCode && attempts < 20) {
      await page.waitForTimeout(500);
      attempts++;
    }
    
    if (!smsCode) {
      console.log(`‚ùå User ${userId}: SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω`);
      failedActions++;
      totalActions++;
      return;
    }
    
    // –í–≤–æ–¥–∏–º SMS –∫–æ–¥
    console.log(`üî¢ User ${userId}: –í–≤–æ–¥–∏—Ç SMS –∫–æ–¥: ${smsCode}`);
    await page.fill('input[placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"]', smsCode);
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥
    await page.click('button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const currentUrl = page.url();
    if (currentUrl.includes('/sms-verification')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞
      const errorText = await page.textContent('body');
      if (errorText.includes('already exists') || errorText.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        console.log(`‚úÖ User ${userId}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!)`);
        successfulActions++;
      } else {
        console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
        failedActions++;
      }
    } else {
      console.log(`‚úÖ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      successfulActions++;
    }
    
    totalActions++;
    
    console.log(`üéâ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 1; i <= config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    createUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 300));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLoadTest().catch(console.error);
