openapi: 3.0.3
info:
  title: MebelPlace API
  description: |
    REST API для мобильных приложений (Flutter, React Native) MebelPlace.
    Платформа для связи клиентов и мастеров по изготовлению мебели.
    
    ## Особенности:
    - JWT аутентификация
    - Загрузка видео/изображений
    - Real-time чат через WebSocket
    - Push уведомления
    - Подписки на мастеров
    - Система заявок и откликов
  version: 1.0.0
  contact:
    name: MebelPlace Support
    url: https://mebelplace.com.kz
  license:
    name: Proprietary

servers:
  - url: https://mebelplace.com.kz/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Auth
    description: Аутентификация и регистрация
  - name: Users
    description: Управление пользователями
  - name: Videos
    description: Работа с видео
  - name: Orders
    description: Заявки и отклики мастеров
  - name: Chat
    description: Чат между пользователями
  - name: Notifications
    description: Уведомления
  - name: Push
    description: Push-уведомления
  - name: Search
    description: Поиск
  - name: Support
    description: Поддержка
  - name: Admin
    description: Административные функции

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен в формате "Bearer {token}"

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
        username:
          type: string
          description: Имя пользователя
        firstName:
          type: string
          description: Имя
        lastName:
          type: string
          description: Фамилия
        phone:
          type: string
          description: Номер телефона
        avatar:
          type: string
          format: uri
          nullable: true
          description: URL аватара
        role:
          type: string
          enum: [user, master, admin]
          description: Роль пользователя
        isVerified:
          type: boolean
          description: Статус верификации
        createdAt:
          type: string
          format: date-time
          description: Дата регистрации

    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        videoUrl:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
          nullable: true
        duration:
          type: integer
          description: Длительность в секундах
        views:
          type: integer
        likes:
          type: integer
        isLiked:
          type: boolean
        isBookmarked:
          type: boolean
        author:
          $ref: '#/components/schemas/User'
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
          description: URL изображений
        clientId:
          type: string
          format: uuid
        masterId:
          type: string
          format: uuid
          nullable: true
        category:
          type: string
        city:
          type: string
        region:
          type: string
        price:
          type: number
          format: decimal
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [pending, accepted, in_progress, completed, cancelled]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [private, group, order]
        name:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        unreadCount:
          type: integer
        lastMessage:
          $ref: '#/components/schemas/Message'
        createdAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        content:
          type: string
        type:
          type: string
          enum: [text, image, file, video]
        filePath:
          type: string
          nullable: true
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        message:
          type: string
        data:
          type: object
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

security:
  - BearerAuth: []

paths:
  # ============================================
  # AUTH
  # ============================================
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация нового пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, username, password]
              properties:
                phone:
                  type: string
                  example: "+77001234567"
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  format: password
                  minLength: 6
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                role:
                  type: string
                  enum: [user, master]
                  default: user
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
                  timestamp:
                    type: string
        '409':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: Вход в систему
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, password]
              properties:
                phone:
                  type: string
                  example: "+77001234567"
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
        '401':
          description: Неверные credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Обновление access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Токен обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                  message:
                    type: string
        '401':
          description: Невалидный refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags: [Auth]
      summary: Получить текущего пользователя
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string

  # ============================================
  # VIDEOS
  # ============================================
  /videos/feed:
    get:
      tags: [Videos]
      summary: Получить ленту видео
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: authorId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список видео
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /videos/upload:
    post:
      tags: [Videos]
      summary: Загрузить видео (только для мастеров)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [video, title]
              properties:
                video:
                  type: string
                  format: binary
                  description: Видео файл (до 200MB)
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                tags:
                  type: string
                  description: Через запятую
      responses:
        '200':
          description: Видео загружено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Video'
                  message:
                    type: string

  /videos/{id}:
    get:
      tags: [Videos]
      summary: Получить видео по ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные видео
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Video'

  /videos/{id}/like:
    post:
      tags: [Videos]
      summary: Лайкнуть/снять лайк
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Статус лайка изменен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      isLiked:
                        type: boolean

  /videos/{id}/comment:
    post:
      tags: [Videos]
      summary: Добавить комментарий к видео
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                parentId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string

  /videos/{id}/comments:
    get:
      tags: [Videos]
      summary: Получить комментарии к видео
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object

  /videos/trending:
    get:
      tags: [Videos]
      summary: Получить трендовые видео
      security: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Трендовые видео
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'

  # ============================================
  # ORDERS
  # ============================================
  /orders/create:
    post:
      tags: [Orders]
      summary: Создать заявку
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, description]
              properties:
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                city:
                  type: string
                region:
                  type: string
                budget:
                  type: string
                deadline:
                  type: string
                  format: date-time
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
      responses:
        '201':
          description: Заявка создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
                  message:
                    type: string

  /orders/feed:
    get:
      tags: [Orders]
      summary: Получить ленту заявок
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: region
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Список заявок
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Получить заявку по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные заявки
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'

  /orders/{id}/response:
    post:
      tags: [Orders]
      summary: Откликнуться на заявку (для мастеров)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                price:
                  type: number
                deadline:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Отклик отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /orders/{id}/accept:
    post:
      tags: [Orders]
      summary: Принять отклик мастера
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [responseId]
              properties:
                responseId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Отклик принят
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /orders/regions:
    get:
      tags: [Orders]
      summary: Получить список регионов Казахстана
      security: []
      responses:
        '200':
          description: Список регионов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object

  # ============================================
  # CHAT
  # ============================================
  /chat/create:
    post:
      tags: [Chat]
      summary: Создать чат
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [participants]
              properties:
                participants:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Список ID участников
                type:
                  type: string
                  enum: [private, group, order]
                  default: private
                name:
                  type: string
                  description: Имя чата (для групповых)
                orderId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Чат создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Chat'

  /chat/list:
    get:
      tags: [Chat]
      summary: Получить список чатов
      responses:
        '200':
          description: Список чатов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'

  /chat/{id}/messages:
    get:
      tags: [Chat]
      summary: Получить сообщения чата
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Список сообщений
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

  /chat/{id}/message:
    post:
      tags: [Chat]
      summary: Отправить сообщение
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Текст сообщения
                file:
                  type: string
                  format: binary
                  description: Файл (изображение/видео/документ)
      responses:
        '200':
          description: Сообщение отправлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Message'

  /chat/{id}/read:
    put:
      tags: [Chat]
      summary: Отметить чат как прочитанный
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Чат прочитан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # ============================================
  # NOTIFICATIONS
  # ============================================
  /notifications:
    get:
      tags: [Notifications]
      summary: Получить уведомления
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список уведомлений
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

  /notifications/unread-count:
    get:
      tags: [Notifications]
      summary: Получить количество непрочитанных
      responses:
        '200':
          description: Количество непрочитанных
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      count:
                        type: integer

  /notifications/{id}/read:
    put:
      tags: [Notifications]
      summary: Отметить уведомление как прочитанное
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Уведомление прочитано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /notifications/read-all:
    put:
      tags: [Notifications]
      summary: Отметить все уведомления как прочитанные
      responses:
        '200':
          description: Все уведомления прочитаны
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  # ============================================
  # USERS
  # ============================================
  /users:
    get:
      tags: [Users]
      summary: Получить список пользователей
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [user, master, admin]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /users/{id}:
    get:
      tags: [Users]
      summary: Получить пользователя по ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'

  /users/{id}/subscribe:
    post:
      tags: [Users]
      summary: Подписаться на мастера
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Подписка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /users/{id}/unsubscribe:
    delete:
      tags: [Users]
      summary: Отписаться от мастера
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Подписка отменена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  # ============================================
  # PUSH
  # ============================================
  /push/vapid-key:
    get:
      tags: [Push]
      summary: Получить VAPID ключ для push
      security: []
      responses:
        '200':
          description: VAPID ключ
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      publicKey:
                        type: string

  /push/subscribe:
    post:
      tags: [Push]
      summary: Подписаться на push-уведомления
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  type: object
                  description: Push subscription object
      responses:
        '200':
          description: Подписка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  # ============================================
  # SEARCH
  # ============================================
  /search:
    get:
      tags: [Search]
      summary: Глобальный поиск
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Поисковый запрос
        - name: type
          in: query
          schema:
            type: string
            enum: [all, users, videos, orders]
            default: all
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                      videos:
                        type: array
                      orders:
                        type: array

  # ============================================
  # SUPPORT
  # ============================================
  /support/tickets:
    post:
      tags: [Support]
      summary: Создать тикет поддержки
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [subject, message]
              properties:
                subject:
                  type: string
                message:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high]
      responses:
        '201':
          description: Тикет создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /support/tickets:
    get:
      tags: [Support]
      summary: Получить список тикетов
      responses:
        '200':
          description: Список тикетов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
