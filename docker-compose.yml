services:
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=mebelplace_db
      - POSTGRES_USER=mebelplace_user
      - POSTGRES_PASSWORD=MebelPlace2024UltraSecureDBPass987
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/migrations:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mebelplace_user -d mebelplace_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - streaming-network

  redis:
    image: redis:8-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass "Redis2024!UltraSecure#Pass$456"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Redis2024!UltraSecure#Pass$456", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9090"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - streaming-network

  api:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "8082:8081"
    environment:
      - APP_ENV=production
      - PORT=8081
      - PG_DSN=postgres://mebelplace_user:MebelPlace2024UltraSecureDBPass987@db:5432/mebelplace_db?sslmode=disable
      - JWT_PRIVATE_KEY_PATH=/app/jwt-keys/private.pem
      - JWT_PUBLIC_KEY_PATH=/app/jwt-keys/public.pem
      - ACCESS_TOKEN_TTL=15m
      - REFRESH_TOKEN_TTL=720h
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=Redis2024!UltraSecure#Pass$456
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=noreply@mebelplace.com.kz
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=noreply@mebelplace.com.kz
      - SMTP_FROM_NAME=MebelPlace
      - MEDIA_DIR=/media
      - CORS_ORIGIN=https://mebelplace.com.kz
      - CORS_ORIGINS=https://mebelplace.com.kz,https://www.mebelplace.com.kz
      - MOBIZON_KEY=kza709b533060de72b09110d34ca60bee25bad4fd53e2bb6181fe47cb8a7cad16cb0b1
      - MOBIZON_FROM=MebelPlace
      - S3_ENDPOINT=http://minio:9000
      - S3_BUCKET=mebelplace
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_REGION=us-east-1
      - ONESIGNAL_APP_ID=your_onesignal_app_id
      - ONESIGNAL_API_KEY=your_onesignal_api_key
      - TLS_ENABLED=false
      - LOG_LEVEL=info
      - FFMPEG_ENABLED=true
      - HLS_SEGMENT_DURATION=10
      - CHUNK_SIZE=10485760
    volumes:
      - media_uploads:/media
      - ./uploads:/var/www/uploads
      - ./uploads/segments:/var/www/segments
      - ./apps/backend/secrets:/app/secrets:ro
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    depends_on:
      - db
      - redis
    networks:
      - streaming-network

  frontend:
    build:
      context: ./apps/frontend-nextjs
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://mebelplace.com.kz/api/v2
      - NEXT_PUBLIC_SITE_URL=https://mebelplace.com.kz
      - NEXT_PUBLIC_WS_URL=wss://mebelplace.com.kz/api/v2/ws
      - NEXT_PUBLIC_APP_NAME=MebelPlace Streaming
      - NEXT_PUBLIC_APP_VERSION=2.0.0
      - NEXT_PUBLIC_STREAMING_ENABLED=true
      - NEXT_PUBLIC_CHUNK_SIZE=10485760
    volumes:
      - ./apps/frontend-nextjs/src:/app/src:ro
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - streaming-network

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - media_uploads:/var/www/media:ro
      - ./uploads:/var/www/uploads:ro
      - ./uploads/segments:/var/www/segments:ro
    restart: unless-stopped
    depends_on:
      - frontend
      - api
    networks:
      - streaming-network

  ffmpeg-worker:
    build:
      context: ./apps/ffmpeg-worker
      dockerfile: Dockerfile
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=Redis2024!UltraSecure#Pass$456
      - UPLOAD_DIR=/var/www/uploads
      - SEGMENTS_DIR=/var/www/segments
      - HLS_SEGMENT_DURATION=10
    volumes:
      - ./uploads:/var/www/uploads
      - ./uploads/segments:/var/www/segments
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - streaming-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - streaming-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - streaming-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  media_uploads:
  grafana_data:

networks:
  streaming-network:
    driver: bridge