const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// üöÄ –ú–û–î–ï–†–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –ü–õ–ê–¢–§–û–†–ú–´
class PlatformTester {
  constructor() {
    this.config = {
      targetUrl: 'https://mebelplace.com.kz',
      totalUsers: 100,
      concurrentUsers: 20,
      testDuration: 300, // 5 –º–∏–Ω—É—Ç
      databaseCheckInterval: 30,
      maxRetries: 3,
      browserTimeout: 60000,
      delayBetweenActions: 1500,
      realUIMode: true,
      enableMetrics: true,
      enableScreenshots: false,
      enableNetworkLogging: true
    };
    
    this.metrics = {
      startTime: Date.now(),
      endTime: null,
      totalActions: 0,
      successfulActions: 0,
      failedActions: 0,
      usersCompleted: 0,
      usersFailed: 0,
      activeUsers: 0,
      peakConcurrency: 0,
      averageResponseTime: 0,
      responseTimes: [],
      errors: [],
      databaseStats: { users: 0, orders: 0, messages: 0, videos: 0, supportTickets: 0 },
      performanceMetrics: {
        memoryUsage: [],
        cpuUsage: [],
        networkLatency: []
      }
    };
    
    this.existingUsers = [];
    this.testResults = [];
    this.isRunning = false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
  async initialize() {
    console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–†–ù–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ï–†–ê –ü–õ–ê–¢–§–û–†–ú–´');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üéØ Target: ${this.config.targetUrl}`);
    console.log(`üë• Total Users: ${this.config.totalUsers}`);
    console.log(`‚è±Ô∏è  Duration: ${this.config.testDuration}s`);
    console.log(`üîÑ Concurrent: ${this.config.concurrentUsers}`);
    console.log(`üìä Metrics: ${this.config.enableMetrics ? 'ENABLED' : 'DISABLED'}`);
    console.log(`üåê Network Logging: ${this.config.enableNetworkLogging ? 'ENABLED' : 'DISABLED'}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    await this.loadExistingUsers();
    await this.checkInitialDatabaseState();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async loadExistingUsers() {
    try {
      const { exec } = require('child_process');
      const util = require('util');
      const execAsync = util.promisify(exec);
      
      const result = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT username, phone, role FROM users ORDER BY created_at DESC LIMIT 100;"');
      
      const lines = result.stdout.trim().split('\n');
      this.existingUsers = lines.map(line => {
        const parts = line.trim().split('|');
        if (parts.length >= 3) {
          return {
            username: parts[0].trim(),
            phone: parts[1].trim(),
            role: parts[2].trim()
          };
        }
        return null;
      }).filter(user => user !== null);
      
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.existingUsers.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async checkInitialDatabaseState() {
    try {
      const { exec } = require('child_process');
      const util = require('util');
      const execAsync = util.promisify(exec);
      
      const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
      const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
      const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
      const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
      const supportResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM support_tickets;"');
      
      this.metrics.databaseStats = {
        users: parseInt(usersResult.stdout.trim()) || 0,
        orders: parseInt(ordersResult.stdout.trim()) || 0,
        messages: parseInt(messagesResult.stdout.trim()) || 0,
        videos: parseInt(videosResult.stdout.trim()) || 0,
        supportTickets: parseInt(supportResult.stdout.trim()) || 0
      };
      
      console.log(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:`, this.metrics.databaseStats);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async checkDatabaseState() {
    try {
      const { exec } = require('child_process');
      const util = require('util');
      const execAsync = util.promisify(exec);
      
      const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
      const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
      const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
      const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
      const supportResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM support_tickets;"');
      
      const currentStats = {
        users: parseInt(usersResult.stdout.trim()) || 0,
        orders: parseInt(ordersResult.stdout.trim()) || 0,
        messages: parseInt(messagesResult.stdout.trim()) || 0,
        videos: parseInt(videosResult.stdout.trim()) || 0,
        supportTickets: parseInt(supportResult.stdout.trim()) || 0
      };
      
      return currentStats;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`);
      return this.metrics.databaseStats;
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async testUser(userIndex) {
    const startTime = Date.now();
    const browser = await chromium.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
    });
    
    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 },
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    });
    
    const page = await context.newPage();
    
    const userResult = {
      userId: userIndex,
      startTime,
      endTime: null,
      actions: [],
      errors: [],
      success: false,
      token: null,
      userData: null
    };
    
    try {
      let user;
      
      if (userIndex < this.existingUsers.length) {
        user = this.existingUsers[userIndex];
        userResult.userData = user;
        console.log(`üåê User ${userIndex}: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (${user.username})`);
      } else {
        console.log(`üåê User ${userIndex}: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)`);
        return userResult;
      }
      
      // 1. –õ–û–ì–ò–ù
      const loginStart = Date.now();
      await this.performLogin(page, user, userResult);
      const loginTime = Date.now() - loginStart;
      userResult.actions.push({ action: 'login', duration: loginTime, success: true });
      
      // 2. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
      const orderStart = Date.now();
      await this.performOrderCreation(page, user, userResult);
      const orderTime = Date.now() - orderStart;
      userResult.actions.push({ action: 'order_creation', duration: orderTime, success: true });
      
      // 3. –°–û–ó–î–ê–ù–ò–ï –í–ò–î–ï–û (–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)
      if (user.role === 'user' && user.username.includes('Master')) {
        const videoStart = Date.now();
        await this.performVideoCreation(page, user, userResult);
        const videoTime = Date.now() - videoStart;
        userResult.actions.push({ action: 'video_creation', duration: videoTime, success: true });
      }
      
      // 4. –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –í –ü–û–î–î–ï–†–ñ–ö–£
      const supportStart = Date.now();
      await this.performSupportMessage(page, user, userResult);
      const supportTime = Date.now() - supportStart;
      userResult.actions.push({ action: 'support_message', duration: supportTime, success: true });
      
      // 5. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï–ô
      const interactionStart = Date.now();
      await this.performMainPageInteractions(page, user, userResult);
      const interactionTime = Date.now() - interactionStart;
      userResult.actions.push({ action: 'main_page_interactions', duration: interactionTime, success: true });
      
      userResult.success = true;
      userResult.endTime = Date.now();
      
      console.log(`üéâ User ${userIndex}: –ó–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É –∑–∞ ${userResult.endTime - userResult.startTime}ms`);
      
    } catch (error) {
      userResult.errors.push({ error: error.message, timestamp: Date.now() });
      userResult.endTime = Date.now();
      console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ - ${error.message}`);
    } finally {
      await browser.close();
      this.metrics.activeUsers--;
      this.metrics.usersCompleted++;
    }
    
    return userResult;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
  async performLogin(page, user, userResult) {
    console.log(`üîê User ${userResult.userId}: –õ–æ–≥–∏–Ω–∏—Ç—Å—è –∫–∞–∫ ${user.username}`);
    
    await page.goto(`${this.config.targetUrl}/login`, { 
      waitUntil: 'networkidle',
      timeout: this.config.browserTimeout 
    });
    
    await page.waitForTimeout(this.config.delayBetweenActions);
    
    await page.locator('input[placeholder="+7XXXXXXXXXX"]').fill(user.phone);
    await page.waitForTimeout(500);
    
    await page.locator('input[type="password"]').fill('testpass123');
    await page.waitForTimeout(500);
    
    await page.locator('button:has-text("–í–æ–π—Ç–∏")').click();
    await page.waitForTimeout(this.config.delayBetweenActions * 2);
    
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      throw new Error('Login failed');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await page.evaluate(() => localStorage.getItem('accessToken'));
    userResult.token = token;
    
    console.log(`‚úÖ User ${userResult.userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è`);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async performOrderCreation(page, user, userResult) {
    console.log(`üë§ User ${userResult.userId}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
    
    await page.goto(`${this.config.targetUrl}/orders/create`, { waitUntil: 'networkidle' });
    await page.waitForTimeout(this.config.delayBetweenActions);
    
    const orderData = {
      title: `–ó–∞–∫–∞–∑ –æ—Ç ${user.username} - ${userResult.userId}`,
      description: `–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}. –ù—É–∂–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 –Ω–µ–¥–µ–ª–∏, –±—é–¥–∂–µ—Ç –¥–æ 200000 —Ç–µ–Ω–≥–µ.`,
      location: `–ê–ª–º–∞—Ç—ã, —Ä–∞–π–æ–Ω ${userResult.userId % 10 + 1}`
    };
    
    const titleInput = page.locator('input[name="title"]');
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name="description"]');
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    const locationInput = page.locator('input[name="location"]');
    if (await locationInput.count() > 0) {
      await locationInput.fill(orderData.location);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`‚úÖ User ${userResult.userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      await page.waitForTimeout(this.config.delayBetweenActions * 2);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
  async performVideoCreation(page, user, userResult) {
    console.log(`üé• User ${userResult.userId}: –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ (–º–∞—Å—Ç–µ—Ä)`);
    
    await page.goto(`${this.config.targetUrl}/create-video-ad`, { waitUntil: 'networkidle' });
    await page.waitForTimeout(this.config.delayBetweenActions);
    
    const videoData = {
      title: `–í–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç ${user.username}`,
      description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${user.username}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.`,
      tags: '–º–µ–±–µ–ª—å, –Ω–∞ –∑–∞–∫–∞–∑, –º–∞—Å—Ç–µ—Ä, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
    };
    
    const videoTitleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await videoTitleInput.count() > 0) {
      await videoTitleInput.fill(videoData.title);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    const videoDescInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await videoDescInput.count() > 0) {
      await videoDescInput.fill(videoData.description);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    const videoTagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
    if (await videoTagsInput.count() > 0) {
      await videoTagsInput.fill(videoData.tags);
      await page.waitForTimeout(this.config.delayBetweenActions);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    const fileInput = page.locator('input[type="file"]').first();
    if (await fileInput.count() > 0) {
      await page.evaluate(() => {
        const input = document.querySelector('input[type="file"]');
        if (input) {
          const file = new File(['fake video content'], 'test-video.mp4', { type: 'video/mp4' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          input.files = dataTransfer.files;
          
          const event = new Event('change', { bubbles: true });
          input.dispatchEvent(event);
        }
      });
      
      await page.waitForTimeout(this.config.delayBetweenActions);
      
      const publishButton = page.locator('button:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")').first();
      if (await publishButton.count() > 0) {
        const isDisabled = await publishButton.isDisabled();
        if (!isDisabled) {
          await publishButton.click();
          console.log(`üé• User ${userResult.userId}: –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∏–¥–µ–æ`);
          await page.waitForTimeout(this.config.delayBetweenActions * 3);
        }
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
  async performSupportMessage(page, user, userResult) {
    console.log(`üí¨ User ${userResult.userId}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
    
    await page.goto(`${this.config.targetUrl}/user/support`, { waitUntil: 'networkidle' });
    await page.waitForTimeout(this.config.delayBetweenActions);
    
    const contactButton = page.locator('button:has-text("–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")');
    if (await contactButton.count() > 0) {
      await contactButton.click();
      await page.waitForTimeout(this.config.delayBetweenActions);
      
      const supportMessages = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º. –ù–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?`,
        `–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ.`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–∞—Å—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É?`
      ];
      const randomSupportMessage = supportMessages[Math.floor(Math.random() * supportMessages.length)];
      
      const subjectInput = page.locator('input[name*="subject"], input[placeholder*="—Ç–µ–º–∞"]').first();
      if (await subjectInput.count() > 0) {
        await subjectInput.fill(`–í–æ–ø—Ä–æ—Å –æ—Ç ${user.username}`);
        await page.waitForTimeout(this.config.delayBetweenActions);
      }
      
      const messageInput = page.locator('textarea[name*="message"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
      if (await messageInput.count() > 0) {
        await messageInput.fill(randomSupportMessage);
        await page.waitForTimeout(this.config.delayBetweenActions);
      }
      
      const submitButton = page.locator('button[type="submit"], button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
      if (await submitButton.count() > 0) {
        await submitButton.click();
        console.log(`‚úÖ User ${userResult.userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
        await page.waitForTimeout(this.config.delayBetweenActions);
      }
    }
  }

  // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
  async performMainPageInteractions(page, user, userResult) {
    console.log(`üë§ User ${userResult.userId}: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π`);
    
    await page.goto(`${this.config.targetUrl}/`, { waitUntil: 'networkidle' });
    await page.waitForTimeout(this.config.delayBetweenActions);
    
    // –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏
    const likeButtons = await page.locator('button:has-text("1"), button:has-text("0")').all();
    if (likeButtons.length > 0) {
      for (let i = 0; i < Math.min(2, likeButtons.length); i++) {
        try {
          await likeButtons[i].click();
          console.log(`üë§ User ${userResult.userId}: –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ ${i + 1}`);
          await page.waitForTimeout(this.config.delayBetweenActions);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–∞–π–∫–æ–≤
        }
      }
    }
    
    // –ü–æ–∏—Å–∫
    const searchQueries = ['–∫—É—Ö–Ω—è', '—à–∫–∞—Ñ', '–¥–∏–≤–∞–Ω', '—Å—Ç–æ–ª', '–∫—Ä–æ–≤–∞—Ç—å'];
    const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
    
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ"]').first();
    if (await searchInput.count() > 0) {
      await searchInput.fill(randomQuery);
      await page.waitForTimeout(this.config.delayBetweenActions);
      await searchInput.press('Enter');
      console.log(`üë§ User ${userResult.userId}: –í—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫: ${randomQuery}`);
      await page.waitForTimeout(this.config.delayBetweenActions * 2);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runTest() {
    this.isRunning = true;
    this.metrics.startTime = Date.now();
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const databaseInterval = setInterval(async () => {
      if (!this.isRunning) {
        clearInterval(databaseInterval);
        return;
      }
      
      const currentStats = await this.checkDatabaseState();
      console.log(`üìä DATABASE CHECK:`, currentStats);
      
    }, this.config.databaseCheckInterval * 1000);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < Math.min(this.config.totalUsers, this.existingUsers.length); i++) {
      while (this.metrics.activeUsers >= this.config.concurrentUsers) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      this.metrics.activeUsers++;
      this.metrics.peakConcurrency = Math.max(this.metrics.peakConcurrency, this.metrics.activeUsers);
      
      this.testUser(i).then(result => {
        this.testResults.push(result);
        this.metrics.totalActions += result.actions.length;
        this.metrics.successfulActions += result.actions.filter(a => a.success).length;
        this.metrics.failedActions += result.actions.filter(a => !a.success).length;
        
        if (result.errors.length > 0) {
          this.metrics.errors.push(...result.errors);
        }
      }).catch(error => {
        console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
        this.metrics.activeUsers--;
        this.metrics.usersFailed++;
      });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    const testStartTime = Date.now();
    while (Date.now() - testStartTime < this.config.testDuration * 1000) {
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
      const remaining = this.config.testDuration - elapsed;
      
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${this.config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
      console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.metrics.activeUsers}`);
      console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.metrics.usersCompleted}/${Math.min(this.config.totalUsers, this.existingUsers.length)}`);
      console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${this.metrics.successfulActions}/${this.metrics.totalActions} —É—Å–ø–µ—à–Ω–æ (${this.metrics.failedActions} –æ—à–∏–±–æ–∫)`);
      console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.metrics.totalActions > 0 ? Math.round((this.metrics.successfulActions / this.metrics.totalActions) * 100) : 0}%`);
      console.log('‚îÄ'.repeat(80));
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    clearInterval(databaseInterval);
    this.isRunning = false;
    this.metrics.endTime = Date.now();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const finalStats = await this.checkDatabaseState();
    this.metrics.databaseStats = finalStats;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    await this.generateReport();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  async generateReport() {
    console.log('üèÅ –ú–û–î–ï–†–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const totalTime = this.metrics.endTime - this.metrics.startTime;
    const successRate = this.metrics.totalActions > 0 ? Math.round((this.metrics.successfulActions / this.metrics.totalActions) * 100) : 0;
    
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor(totalTime / 1000)}s`);
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Math.min(this.config.totalUsers, this.existingUsers.length)}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.metrics.usersCompleted}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.metrics.usersFailed}`);
    console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${this.metrics.totalActions}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${this.metrics.successfulActions}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${this.metrics.failedActions}`);
    console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    console.log(`üî• –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${this.metrics.peakConcurrency} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, this.metrics.databaseStats);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const report = {
      timestamp: new Date().toISOString(),
      config: this.config,
      metrics: this.metrics,
      testResults: this.testResults
    };
    
    const reportPath = path.join(__dirname, `platform-test-report-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    return report;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runModernizedTest() {
  const tester = new PlatformTester();
  await tester.initialize();
  const report = await tester.runTest();
  return report;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { PlatformTester, runModernizedTest };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runModernizedTest().catch(console.error);
}
