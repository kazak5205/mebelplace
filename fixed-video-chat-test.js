const { chromium } = require('playwright');

// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –° –†–ï–®–ï–ù–ò–ï–ú –ü–†–û–ë–õ–ï–ú
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 50,  // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  concurrentUsers: 10,
  testDuration: 180,
  databaseCheckInterval: 30,
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 2000,
  realUIMode: true
};

console.log('üöÄ FIXED TEST - SOLVING VIDEO AND CHAT ISSUES');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };
let existingUsers = [];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
let globalData = {
  createdOrders: [],
  createdVideos: [],
  activeChats: [],
  subscriptions: [],
  likes: [],
  comments: [],
  logins: [],
  searches: [],
  supportMessages: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
async function getExistingUsers() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const result = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT username, phone, role FROM users ORDER BY created_at DESC LIMIT 50;"');
    
    const lines = result.stdout.trim().split('\n');
    existingUsers = lines.map(line => {
      const parts = line.trim().split('|');
      if (parts.length >= 3) {
        return {
          username: parts[0].trim(),
          phone: parts[1].trim(),
          role: parts[2].trim()
        };
      }
      return null;
    }).filter(user => user !== null);
    
    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingUsers.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function testFullFlowWithUser(userIndex) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    let user;
    
    if (userIndex < existingUsers.length) {
      user = existingUsers[userIndex];
      console.log(`üåê User ${userIndex}: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (${user.username})`);
    } else {
      console.log(`üåê User ${userIndex}: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)`);
      return;
    }
    
    // 1. –õ–û–ì–ò–ù
    console.log(`üîê User ${userIndex}: –õ–æ–≥–∏–Ω–∏—Ç—Å—è –∫–∞–∫ ${user.username}`);
    
    await page.goto(`${config.targetUrl}/login`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.locator('input[placeholder="+7XXXXXXXXXX"]').fill(user.phone);
    await page.waitForTimeout(500);
    
    await page.locator('input[type="password"]').fill('testpass123');
    await page.waitForTimeout(500);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.locator('button:has-text("–í–æ–π—Ç–∏")').click();
    await page.waitForTimeout(config.delayBetweenActions * 2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞`);
      failedActions++;
      totalActions++;
      return;
    } else {
      console.log(`‚úÖ User ${userIndex}: –£—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è`);
      successfulActions++;
      totalActions++;
      globalData.logins.push({ userId: userIndex, username: user.username, timestamp: new Date() });
    }
    
    // 2. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
    console.log(`üë§ User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
    
    await page.goto(`${config.targetUrl}/orders/create`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userIndex}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderData = {
      title: `–ó–∞–∫–∞–∑ –æ—Ç ${user.username} - ${userIndex}`,
      description: `–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}. –ù—É–∂–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 –Ω–µ–¥–µ–ª–∏, –±—é–¥–∂–µ—Ç –¥–æ 200000 —Ç–µ–Ω–≥–µ.`,
      location: `–ê–ª–º–∞—Ç—ã, —Ä–∞–π–æ–Ω ${userIndex % 10 + 1}`
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    const titleInput = page.locator('input[name="title"]');
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name="description"]');
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const locationInput = page.locator('input[name="location"]');
    if (await locationInput.count() > 0) {
      await locationInput.fill(orderData.location);
      console.log(`üë§ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –ª–æ–∫–∞—Ü–∏—é`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userIndex}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      successfulActions++;
      totalActions++;
      
      globalData.createdOrders.push({
        id: `order_${userIndex}_${Date.now()}`,
        userId: userIndex,
        title: orderData.title,
        description: orderData.description,
        status: 'pending',
        createdAt: new Date()
      });
      
      await page.waitForTimeout(config.delayBetweenActions * 2);
    }
    
    // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –í–ò–î–ï–û (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)
    if (user.role === 'user' && user.username.includes('Master')) {
      console.log(`üé• User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ (–º–∞—Å—Ç–µ—Ä)`);
      
      await page.goto(`${config.targetUrl}/create-video-ad`, { waitUntil: 'networkidle' });
      console.log(`üé• User ${userIndex}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      const videoData = {
        title: `–í–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç ${user.username}`,
        description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞ ${user.username}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.`,
        tags: '–º–µ–±–µ–ª—å, –Ω–∞ –∑–∞–∫–∞–∑, –º–∞—Å—Ç–µ—Ä, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
      };
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–∏–¥–µ–æ
      const videoTitleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
      if (await videoTitleInput.count() > 0) {
        await videoTitleInput.fill(videoData.title);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      const videoDescInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
      if (await videoDescInput.count() > 0) {
        await videoDescInput.fill(videoData.description);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      const videoTagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
      if (await videoTagsInput.count() > 0) {
        await videoTagsInput.fill(videoData.tags);
        console.log(`üé• User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª —Ç–µ–≥–∏ –≤–∏–¥–µ–æ`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
      console.log(`üé• User ${userIndex}: –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞`);
      
      // –ò—â–µ–º input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      const fileInput = page.locator('input[type="file"]').first();
      if (await fileInput.count() > 0) {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ JavaScript
        await page.evaluate(() => {
          const input = document.querySelector('input[type="file"]');
          if (input) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
            const file = new File(['fake video content'], 'test-video.mp4', { type: 'video/mp4' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            input.files = dataTransfer.files;
            
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ change
            const event = new Event('change', { bubbles: true });
            input.dispatchEvent(event);
          }
        });
        
        console.log(`üé• User ${userIndex}: –ó–∞–≥—Ä—É–∑–∏–ª —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª`);
        successfulActions++;
        totalActions++;
        
        await page.waitForTimeout(config.delayBetweenActions);
        
        // –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
        const publishButton = page.locator('button:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")').first();
        if (await publishButton.count() > 0) {
          const isDisabled = await publishButton.isDisabled();
          if (!isDisabled) {
            await publishButton.click();
            console.log(`üé• User ${userIndex}: –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∏–¥–µ–æ`);
            successfulActions++;
            totalActions++;
            
            globalData.createdVideos.push({
              id: `video_${userIndex}_${Date.now()}`,
              userId: userIndex,
              title: videoData.title,
              description: videoData.description,
              createdAt: new Date()
            });
            
            await page.waitForTimeout(config.delayBetweenActions * 3);
          } else {
            console.log(`‚ùå User ${userIndex}: –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤—Å–µ –µ—â–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
            failedActions++;
            totalActions++;
          }
        }
      }
    }
    
    // 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í –ü–û–î–î–ï–†–ñ–ö–£
    console.log(`üí¨ User ${userIndex}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
    
    await page.goto(`${config.targetUrl}/support`, { waitUntil: 'networkidle' });
    console.log(`üí¨ User ${userIndex}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportMessages = [
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º. –ù–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º.`,
      `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?`,
      `–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ.`,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–∞—Å—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
      `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É?`
    ];
    const randomSupportMessage = supportMessages[Math.floor(Math.random() * supportMessages.length)];
    
    // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const messageInput = page.locator('textarea[name*="message"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="–ø—Ä–æ–±–ª–µ–º–∞"]').first();
    if (await messageInput.count() > 0) {
      await messageInput.fill(randomSupportMessage);
      console.log(`üí¨ User ${userIndex}: –ó–∞–ø–æ–ª–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      const submitSupportButton = page.locator('button[type="submit"], button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:has-text("Submit")').first();
      if (await submitSupportButton.count() > 0) {
        await submitSupportButton.click();
        console.log(`üí¨ User ${userIndex}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`);
        successfulActions++;
        totalActions++;
        
        globalData.supportMessages.push({
          userId: userIndex,
          message: randomSupportMessage,
          timestamp: new Date()
        });
        
        await page.waitForTimeout(config.delayBetweenActions);
      }
    }
    
    // 5. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï–ô
    console.log(`üë§ User ${userIndex}: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π`);
    
    await page.goto(`${config.targetUrl}/`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userIndex}: –û—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏
    const likeButtons = await page.locator('button:has-text("1"), button:has-text("0")').all();
    if (likeButtons.length > 0) {
      for (let i = 0; i < Math.min(2, likeButtons.length); i++) {
        try {
          await likeButtons[i].click();
          console.log(`üë§ User ${userIndex}: –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ ${i + 1}`);
          successfulActions++;
          totalActions++;
          globalData.likes.push({ userId: userIndex, likeIndex: i });
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ ${i + 1} - ${error.message}`);
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // –ü–æ–∏—Å–∫
    const searchQueries = ['–∫—É—Ö–Ω—è', '—à–∫–∞—Ñ', '–¥–∏–≤–∞–Ω', '—Å—Ç–æ–ª', '–∫—Ä–æ–≤–∞—Ç—å'];
    const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
    
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ"]').first();
    if (await searchInput.count() > 0) {
      await searchInput.fill(randomQuery);
      console.log(`üë§ User ${userIndex}: –í–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${randomQuery}`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      await searchInput.press('Enter');
      console.log(`üë§ User ${userIndex}: –í—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫`);
      successfulActions++;
      totalActions++;
      
      globalData.searches.push({ userId: userIndex, query: randomQuery, timestamp: new Date() });
      
      await page.waitForTimeout(config.delayBetweenActions * 2);
    }
    
    console.log(`üéâ User ${userIndex}: –ó–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userIndex}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFixedTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await getExistingUsers();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 0; i < Math.min(config.totalUsers, existingUsers.length); i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    testFullFlowWithUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${Math.min(config.totalUsers, existingUsers.length)}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log(`üîê –£—Å–ø–µ—à–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤: ${globalData.logins.length}`);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
    console.log(`üé• –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${globalData.supportMessages.length}`);
    console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
    console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${globalData.searches.length}`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Math.min(config.totalUsers, existingUsers.length)}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log(`üîê –£—Å–ø–µ—à–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤: ${globalData.logins.length}`);
  console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
  console.log(`üé• –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${globalData.supportMessages.length}`);
  console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
  console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${globalData.searches.length}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runFixedTest().catch(console.error);
