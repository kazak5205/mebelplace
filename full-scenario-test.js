const { chromium } = require('playwright');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

// üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –° –°–¶–ï–ù–ê–†–ò–Ø–ú–ò –ö–õ–ò–ï–ù–¢–û–í –ò –ú–ê–°–¢–ï–†–û–í
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 20,
  concurrentUsers: 3,
  testDuration: 600,
  databaseCheckInterval: 30,
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 2000,
  smsDelay: 8000,
  realUIMode: true
};

console.log('üöÄ FULL SCENARIO TEST - CLIENTS & MASTERS');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (SMS –∏–∑ –ë–î + –ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏)`);
console.log(`‚è∞ SMS Delay: ${config.smsDelay}ms`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };
let lastSmsTime = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∫–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getSmsCodeFromDatabase(phoneNumber) {
  try {
    console.log(`üîç –ò—â–µ–º SMS –∫–æ–¥ –≤ –ë–î –¥–ª—è ${phoneNumber}...`);
    
    // –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ sms_verifications
    const result = await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT code FROM sms_verifications WHERE phone = '${phoneNumber}' AND is_used = false ORDER BY created_at DESC LIMIT 1;"`);
    
    if (result.stdout.trim()) {
      const code = result.stdout.trim();
      console.log(`üì± –ù–∞–π–¥–µ–Ω SMS –∫–æ–¥ –≤ –ë–î: ${code}`);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -c "UPDATE sms_verifications SET is_used = true WHERE phone = '${phoneNumber}' AND code = '${code}';"`);
      
      return code;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    const lastResult = await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT code FROM sms_verifications WHERE is_used = false ORDER BY created_at DESC LIMIT 1;"`);
    
    if (lastResult.stdout.trim()) {
      const code = lastResult.stdout.trim();
      console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π SMS –∫–æ–¥ –∏–∑ –ë–î: ${code}`);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await execAsync(`docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -c "UPDATE sms_verifications SET is_used = true WHERE code = '${code}' AND is_used = false LIMIT 1;"`);
      
      return code;
    }
    
    return null;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SMS –≤ –ë–î: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function closeModal(page) {
  try {
    const modalExists = await page.evaluate(() => {
      const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
      return !!modal;
    });
    
    if (modalExists) {
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–∫—Ä—ã—Ç–∏—è
      await page.keyboard.press('Escape');
      await page.waitForTimeout(500);
      
      // –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await page.click('body', { position: { x: 10, y: 10 } });
      await page.waitForTimeout(500);
      
      // –ü—Ä–æ–±—É–µ–º JavaScript
      await page.evaluate(() => {
        const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
        if (modal) {
          modal.style.display = 'none';
          modal.remove();
        }
      });
      
      await page.waitForTimeout(1000);
      
      const stillExists = await page.evaluate(() => {
        const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
        return !!modal;
      });
      
      if (!stillExists) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
        return true;
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å');
        return false;
      }
    }
    
    return true;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è SMS rate limit
async function waitForSmsRateLimit() {
  const now = Date.now();
  const timeSinceLastSms = now - lastSmsTime;
  
  if (timeSinceLastSms < config.smsDelay) {
    const waitTime = config.smsDelay - timeSinceLastSms;
    console.log(`‚è∞ –ñ–¥–µ–º ${waitTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º SMS –∑–∞–ø—Ä–æ—Å–æ–º...`);
    await new Promise(resolve => setTimeout(resolve, waitTime));
  }
  
  lastSmsTime = Date.now();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
async function createUserWithFullScenario(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log(`üåê User ${userId}: –ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç...`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
    let retries = 0;
    while (retries < config.maxRetries) {
      try {
        await page.goto(config.targetUrl, { 
          waitUntil: 'networkidle',
          timeout: config.browserTimeout 
        });
        break;
      } catch (error) {
        retries++;
        console.log(`üîÑ User ${userId}: –ü–æ–ø—ã—Ç–∫–∞ ${retries}/${config.maxRetries} - ${error.message}`);
        if (retries >= config.maxRetries) throw error;
        await page.waitForTimeout(2000);
      }
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalClosed = await closeModal(page);
    if (!modalClosed) {
      console.log(`‚ùå User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
      failedActions++;
      totalActions++;
      return;
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (50% –∫–ª–∏–µ–Ω—Ç—ã, 50% –º–∞—Å—Ç–µ—Ä–∞)
    const userRole = userId % 2 === 0 ? 'client' : 'master';
    console.log(`üë§ User ${userId}: –†–æ–ª—å - ${userRole}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    await page.goto(`${config.targetUrl}/register`, { 
      waitUntil: 'networkidle',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneNumber = `+7777${String(userId).padStart(7, '0')}`;
    const username = userRole === 'client' ? `Client${userId}` : `Master${userId}`;
    
    console.log(`üìù User ${userId}: –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...`);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.fill('input[placeholder="+7XXXXXXXXXX"]', phoneNumber);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="username"]', username);
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"]', 'testpass123');
    await page.waitForTimeout(500);
    
    await page.fill('input[placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"]', 'testpass123');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS
    await waitForSmsRateLimit();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    console.log(`üöÄ User ${userId}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É...`);
    await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º SMS –∫–æ–¥
    console.log(`üì± User ${userId}: –ñ–¥–µ—Ç SMS –∫–æ–¥...`);
    
    // –°–ª—É—à–∞–µ–º network requests –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∫–æ–¥–∞
    let smsCode = null;
    page.on('response', async response => {
      if (response.url().includes('/api/auth/send-sms-code') && response.status() === 200) {
        try {
          const result = await response.json();
          if (result.success && result.code) {
            smsCode = result.code;
            console.log(`üì± User ${userId}: –ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥ –∏–∑ API: ${smsCode}`);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    });
    
    // –ñ–¥–µ–º SMS –∫–æ–¥ –¥–æ 15 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    while (!smsCode && attempts < 30) {
      await page.waitForTimeout(500);
      attempts++;
    }
    
    // –ï—Å–ª–∏ SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ API, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    if (!smsCode) {
      console.log(`üîç User ${userId}: SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ API, –ø—Ä–æ–±—É–µ–º –ë–î...`);
      smsCode = await getSmsCodeFromDatabase(phoneNumber);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–¥–∞, –ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π
    if (!smsCode) {
      console.log(`‚ö†Ô∏è  User ${userId}: SMS –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥`);
      smsCode = '123456'; // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    }
    
    // –í–≤–æ–¥–∏–º SMS –∫–æ–¥
    console.log(`üî¢ User ${userId}: –í–≤–æ–¥–∏—Ç SMS –∫–æ–¥: ${smsCode}`);
    await page.fill('input[placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"]', smsCode);
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥
    await page.click('button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const currentUrl = page.url();
    if (currentUrl.includes('/sms-verification')) {
      const errorText = await page.textContent('body');
      if (errorText.includes('already exists') || errorText.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        console.log(`‚úÖ User ${userId}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!)`);
        successfulActions++;
      } else {
        console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
        failedActions++;
      }
    } else {
      console.log(`‚úÖ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      successfulActions++;
    }
    
    totalActions++;
    
    // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (userRole === 'client') {
      await executeClientScenario(page, userId);
    } else {
      await executeMasterScenario(page, userId);
    }
    
    console.log(`üéâ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
async function executeClientScenario(page, userId) {
  console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ö–õ–ò–ï–ù–¢–ê`);
  
  // 1. –ü–†–û–°–ú–û–¢–† –ö–ê–¢–ê–õ–û–ì–ê –ú–ê–°–¢–ï–†–û–í
  console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å—Ç–µ—Ä–æ–≤`);
  
  try {
    await page.goto(`${config.targetUrl}/masters`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å—Ç–µ—Ä–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const masterCards = page.locator('.master-card, [data-testid="master-card"], a[href*="/master/"]');
    const masterCount = await masterCards.count();
    if (masterCount > 0) {
      const randomMaster = Math.floor(Math.random() * Math.min(masterCount, 3));
      const masterCard = masterCards.nth(randomMaster);
      
      console.log(`üë§ User ${userId}: –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
      await masterCard.click();
      await page.waitForLoadState('networkidle');
      console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–∞—Å—Ç–µ—Ä–æ–≤ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 2. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
  console.log(`üë§ User ${userId}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
  
  try {
    await page.goto(`${config.targetUrl}/orders/create`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderData = {
      title: `–ó–∞–∫–∞–∑ –∫—É—Ö–Ω–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
      description: `–ù—É–∂–Ω–∞ –∫—É—Ö–Ω—è 3 –º–µ—Ç—Ä–∞, —Ü–≤–µ—Ç –±–µ–ª—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª –ú–î–§, –±—é–¥–∂–µ—Ç 150000 —Ç–µ–Ω–≥–µ.`,
      budget: '150000'
    };
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –ë—é–¥–∂–µ—Ç
    const budgetInput = page.locator('input[name*="budget"], input[placeholder*="–±—é–¥–∂–µ—Ç"]').first();
    if (await budgetInput.count() > 0) {
      await budgetInput.fill(orderData.budget);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –±—é–¥–∂–µ—Ç`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions * 3);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 3. –ü–†–û–°–ú–û–¢–† –°–í–û–ò–• –ó–ê–ö–ê–ó–û–í
  console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã`);
  
  try {
    await page.goto(`${config.targetUrl}/user/orders`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 4. –ß–ê–¢ –° –ú–ê–°–¢–ï–†–ê–ú–ò
  console.log(`üë§ User ${userId}: –ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç`);
  
  try {
    await page.goto(`${config.targetUrl}/chat`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
    if (await messageInput.count() > 0) {
      const messages = [
        `–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É.`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è.`
      ];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      
      await messageInput.fill(randomMessage);
      console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      await messageInput.press('Enter');
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —á–∞—Ç–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
async function executeMasterScenario(page, userId) {
  console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ú–ê–°–¢–ï–†–ê`);
  
  // 1. –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø –ú–ê–°–¢–ï–†–ê
  console.log(`üë§ User ${userId}: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
  
  try {
    await page.goto(`${config.targetUrl}/profile`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
    if (await nameInput.count() > 0) {
      await nameInput.fill(`–ú–∞—Å—Ç–µ—Ä ${userId}`);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∏–º—è –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
    if (await bioInput.count() > 0) {
      await bioInput.fill(`–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –º–µ–±–µ–ª–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫—É—Ö–Ω—è—Ö –∏ —à–∫–∞—Ñ–∞—Ö. –û–ø—ã—Ç 5 –ª–µ—Ç.`);
      console.log(`üë§ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const saveButton = page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), button:has-text("Update")').first();
    if (await saveButton.count() > 0) {
      await saveButton.click();
      console.log(`üë§ User ${userId}: –°–æ—Ö—Ä–∞–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 2. –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û
  console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ`);
  
  try {
    await page.goto(`${config.targetUrl}/create-video-ad`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const videoData = {
      title: `–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ ${userId} - –ö—É—Ö–Ω—è –∏–∑ –ú–î–§`,
      description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—É—Ö–Ω–∏ –∏–∑ –ú–î–§. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –∑–∞–º–µ—Ä–æ–≤ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.`
    };
    
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(videoData.title);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(videoData.description);
      console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
    
    const submitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions * 5);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 3. –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–û–í –ö–õ–ò–ï–ù–¢–û–í
  console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  
  try {
    await page.goto(`${config.targetUrl}/master/orders`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderCards = page.locator('.order-card, [data-testid="order-card"]');
    const orderCount = await orderCards.count();
    if (orderCount > 0) {
      const randomOrder = Math.floor(Math.random() * Math.min(orderCount, 2));
      const orderCard = orderCards.nth(randomOrder);
      
      console.log(`üë§ User ${userId}: –í–∏–¥–∏—Ç –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞`);
      
      const respondButton = orderCard.locator('button:has-text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"), button:has-text("Respond")').first();
      if (await respondButton.count() > 0) {
        await respondButton.click();
        console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'`);
        successfulActions++;
        totalActions++;
        
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(config.delayBetweenActions);
        
        const responseText = `–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑! –û–ø—ã—Ç 5 –ª–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°—Ä–æ–∫ 2 –Ω–µ–¥–µ–ª–∏. –¶–µ–Ω–∞ 120000 —Ç–µ–Ω–≥–µ.`;
        const responseInput = page.locator('textarea[placeholder*="–æ—Ç–∫–ª–∏–∫"], textarea[placeholder*="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]').first();
        if (await responseInput.count() > 0) {
          await responseInput.fill(responseText);
          console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª –æ—Ç–∫–ª–∏–∫`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
        }
        
        const submitResponseButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫"), button:has-text("Submit")').first();
        if (await submitResponseButton.count() > 0) {
          await submitResponseButton.click();
          console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫`);
          successfulActions++;
          totalActions++;
          
          await page.waitForTimeout(config.delayBetweenActions);
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
  
  // 4. –ß–ê–¢ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò
  console.log(`üë§ User ${userId}: –ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏`);
  
  try {
    await page.goto(`${config.targetUrl}/chat`, { waitUntil: 'networkidle' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
    if (await messageInput.count() > 0) {
      const messages = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É? –ú–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.`,
        `–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?`
      ];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      
      await messageInput.fill(randomMessage);
      console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
      
      await messageInput.press('Enter');
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É`);
      successfulActions++;
      totalActions++;
      
      await page.waitForTimeout(config.delayBetweenActions);
    }
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —á–∞—Ç–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 1; i <= config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    createUserWithFullScenario(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLoadTest().catch(console.error);
