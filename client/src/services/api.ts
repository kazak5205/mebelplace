import axios, { AxiosInstance, AxiosResponse } from 'axios'
import { ApiResponse } from '../types'

class ApiService {
  private api: AxiosInstance

  // Transform snake_case to camelCase
  private transformKeys(obj: any): any {
    if (Array.isArray(obj)) {
      return obj.map(item => this.transformKeys(item))
    }
    if (obj !== null && typeof obj === 'object' && !(obj instanceof Date)) {
      return Object.keys(obj).reduce((result, key) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ camelCase
        const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase())
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º camelCase –∫–ª—é—á, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        result[camelKey] = this.transformKeys(obj[key])
        
        // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –∫–ª—é—á —Ç–æ–∂–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        // (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–∂–∏–¥–∞—é—Ç snake_case)
        if (key !== camelKey) {
          result[key] = this.transformKeys(obj[key])
        }
        
        return result
      }, {} as any)
    }
    return obj
  }

  constructor() {
    this.api = axios.create({
      baseURL: 'https://mebelplace.com.kz/api',
      timeout: 30000, // –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
      headers: {
        'Content-Type': 'application/json',
      },
    })

    // Request interceptor to add auth token
    this.api.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('accessToken')
        if (token) {
          config.headers.Authorization = `Bearer ${token}`
        }
        return config
      },
      (error) => {
        return Promise.reject(error)
      }
    )

    // Response interceptor to handle errors and refresh token
    this.api.interceptors.response.use(
      (response: AxiosResponse<ApiResponse>) => {
        // Debug logging
        if (response.config.url?.includes('/orders/')) {
          console.log('üîç API Response URL:', response.config.url)
          console.log('üîç API Response RAW data:', response.data?.data)
        }
        
        // Transform snake_case keys to camelCase
        if (response.data?.data) {
          response.data.data = this.transformKeys(response.data.data)
          
          // Debug after transform
          if (response.config.url?.includes('/orders/')) {
            console.log('üîç API Response AFTER transform:', response.data.data)
          }
        }
        return response
      },
      async (error) => {
        const originalRequest = error.config

        // –ï—Å–ª–∏ 401 –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (error.response?.status === 401 && !originalRequest._retry) {
          originalRequest._retry = true

          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
            const refreshToken = localStorage.getItem('refreshToken')
            if (refreshToken) {
              const response = await axios.post('https://mebelplace.com.kz/api/auth/refresh', {
                refreshToken
              })
              
              const newAccessToken = response.data.data.accessToken
              localStorage.setItem('accessToken', newAccessToken)
              
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              originalRequest.headers.Authorization = `Bearer ${newAccessToken}`
              return this.api(originalRequest)
            }
          } catch (refreshError) {
            // –ï—Å–ª–∏ refresh –Ω–µ —É–¥–∞–ª—Å—è - —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
            localStorage.removeItem('accessToken')
            localStorage.removeItem('refreshToken')
            window.location.href = '/login'
            return Promise.reject(refreshError)
          }
        }

        return Promise.reject(error)
      }
    )
  }

  async get<T>(url: string, params?: any): Promise<T> {
    const response = await this.api.get<ApiResponse<T>>(url, { params })
    return response.data.data
  }

  async post<T>(url: string, data?: any): Promise<T> {
    const response = await this.api.post<ApiResponse<T>>(url, data)
    return response.data.data
  }

  async put<T>(url: string, data?: any): Promise<T> {
    const response = await this.api.put<ApiResponse<T>>(url, data)
    return response.data.data
  }

  async delete<T>(url: string, data?: any): Promise<T> {
    const response = await this.api.delete<ApiResponse<T>>(url, { data })
    return response.data.data
  }

  async upload<T>(url: string, formData: FormData): Promise<T> {
    const response = await this.api.post<ApiResponse<T>>(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    return response.data.data
  }
}

export const apiService = new ApiService()
