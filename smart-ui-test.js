const { chromium } = require('playwright');

// üîç –¢–ï–°–¢ –° –ü–†–û–í–ï–†–ö–û–ô –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –°–ê–ô–¢–ê
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 50,        // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  concurrentUsers: 10,   // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  testDuration: 1200,    // 20 –º–∏–Ω—É—Ç
  databaseCheckInterval: 30, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  maxRetries: 3,
  browserTimeout: 60000,
  delayBetweenActions: 2000, // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
  realUIMode: true
};

console.log('üîç STARTING SMART REAL UI LOAD TEST FOR MEBELPLACE');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞)`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
async function analyzeSiteStructure(page) {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
    const buttons = await page.$$eval('button, a, [role="button"]', elements => 
      elements.map(el => ({
        text: el.textContent?.trim() || '',
        tagName: el.tagName,
        className: el.className,
        id: el.id,
        visible: el.offsetParent !== null
      })).filter(el => el.visible && el.text.length > 0)
    );
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏:');
    buttons.forEach((btn, i) => {
      console.log(`  ${i + 1}. "${btn.text}" (${btn.tagName}, class: ${btn.className})`);
    });
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerElements = buttons.filter(btn => 
      btn.text.toLowerCase().includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') || 
      btn.text.toLowerCase().includes('register') ||
      btn.text.toLowerCase().includes('–≤–æ–π—Ç–∏') ||
      btn.text.toLowerCase().includes('login')
    );
    
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞:');
    registerElements.forEach((el, i) => {
      console.log(`  ${i + 1}. "${el.text}" (${el.tagName})`);
    });
    
    return { buttons, registerElements };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${error.message}`);
    return { buttons: [], registerElements: [] };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log(`üåê User ${userId}: –ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç...`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let retries = 0;
    while (retries < config.maxRetries) {
      try {
        await page.goto(config.targetUrl, { 
          waitUntil: 'networkidle',
          timeout: config.browserTimeout 
        });
        break;
      } catch (error) {
        retries++;
        console.log(`üîÑ User ${userId}: –ü–æ–ø—ã—Ç–∫–∞ ${retries}/${config.maxRetries} - ${error.message}`);
        if (retries >= config.maxRetries) throw error;
        await page.waitForTimeout(2000);
      }
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞
    const siteStructure = await analyzeSiteStructure(page);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    let registerButton = null;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const registerSelectors = [
      'text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      'text=Register', 
      'text=–í–æ–π—Ç–∏',
      'text=Login',
      'button:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
      'a:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
      '[class*="register"]',
      '[class*="login"]',
      '[class*="auth"]'
    ];
    
    for (const selector of registerSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          const isVisible = await element.isVisible();
          if (isVisible) {
            registerButton = element;
            console.log(`‚úÖ User ${userId}: –ù–∞—à–µ–ª –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${selector}`);
            break;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
      }
    }
    
    if (!registerButton) {
      console.log(`‚ùå User ${userId}: –ù–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
      failedActions++;
      totalActions++;
      return;
    }
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log(`üë§ User ${userId}: –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...`);
    await registerButton.click();
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const formSelectors = [
      'form',
      '[class*="form"]',
      '[class*="register"]',
      '[class*="auth"]'
    ];
    
    let form = null;
    for (const selector of formSelectors) {
      try {
        const element = await page.$(selector);
        if (element && await element.isVisible()) {
          form = element;
          console.log(`‚úÖ User ${userId}: –ù–∞—à–µ–ª —Ñ–æ—Ä–º—É: ${selector}`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    if (!form) {
      console.log(`‚ùå User ${userId}: –ù–µ –Ω–∞—à–µ–ª —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
      failedActions++;
      totalActions++;
      return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    console.log(`üìù User ${userId}: –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É...`);
    
    // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const nameSelectors = ['input[name="name"]', 'input[placeholder*="–∏–º—è"]', 'input[placeholder*="name"]'];
    const phoneSelectors = ['input[name="phone"]', 'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]', 'input[placeholder*="phone"]'];
    const passwordSelectors = ['input[name="password"]', 'input[type="password"]'];
    const roleSelectors = ['select[name="role"]', 'select', '[class*="role"]'];
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è
    for (const selector of nameSelectors) {
      try {
        const field = await page.$(selector);
        if (field && await field.isVisible()) {
          await field.fill(`TestUser${userId}`);
          console.log(`‚úÖ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª –∏–º—è`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    await page.waitForTimeout(500);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    for (const selector of phoneSelectors) {
      try {
        const field = await page.$(selector);
        if (field && await field.isVisible()) {
          await field.fill(`+7777${String(userId).padStart(7, '0')}`);
          console.log(`‚úÖ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    await page.waitForTimeout(500);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    for (const selector of passwordSelectors) {
      try {
        const field = await page.$(selector);
        if (field && await field.isVisible()) {
          await field.fill('testpass123');
          console.log(`‚úÖ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª –ø–∞—Ä–æ–ª—å`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    await page.waitForTimeout(500);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
    for (const selector of roleSelectors) {
      try {
        const field = await page.$(selector);
        if (field && await field.isVisible()) {
          await field.selectOption('client');
          console.log(`‚úÖ User ${userId}: –í—ã–±—Ä–∞–ª —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitSelectors = [
      'button[type="submit"]',
      'button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
      'button:has-text("Submit")',
      'button:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
      'button:has-text("Register")',
      '[class*="submit"]'
    ];
    
    let submitButton = null;
    for (const selector of submitSelectors) {
      try {
        const element = await page.$(selector);
        if (element && await element.isVisible()) {
          submitButton = element;
          console.log(`‚úÖ User ${userId}: –ù–∞—à–µ–ª –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
          break;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    if (!submitButton) {
      console.log(`‚ùå User ${userId}: –ù–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏`);
      failedActions++;
      totalActions++;
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    console.log(`üöÄ User ${userId}: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É...`);
    await submitButton.click();
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const accessToken = await page.evaluate(() => localStorage.getItem('accessToken'));
    if (accessToken) {
      console.log(`‚úÖ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      successfulActions++;
    } else {
      console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
      failedActions++;
    }
    
    totalActions++;
    
    console.log(`üéâ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (let i = 1; i <= config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    activeUsers++;
    
    createUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLoadTest().catch(console.error);
