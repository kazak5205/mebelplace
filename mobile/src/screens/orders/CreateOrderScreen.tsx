import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import {
  Text,
  TextInput,
  Button,
  Card,
  Title,
  Paragraph,
  ActivityIndicator,
  SegmentedButtons,
} from 'react-native-paper';
import { useAuth } from '../../contexts/AuthContext';
import { apiService } from '../../services/apiService';

const categories = [
  { key: 'furniture', label: '–ú–µ–±–µ–ª—å' },
  { key: 'decor', label: '–î–µ–∫–æ—Ä' },
  { key: 'kitchen', label: '–ö—É—Ö–Ω—è' },
  { key: 'bedroom', label: '–°–ø–∞–ª—å–Ω—è' },
  { key: 'living', label: '–ì–æ—Å—Ç–∏–Ω–∞—è' },
  { key: 'office', label: '–û—Ñ–∏—Å' },
  { key: 'garden', label: '–°–∞–¥' },
  { key: 'other', label: '–î—Ä—É–≥–æ–µ' },
];

const CreateOrderScreen = ({ navigation }: any) => {
  const { user } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: 'furniture',
    budget: '',
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async () => {
    const { title, description, category, budget } = formData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!title.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏');
      return;
    }

    if (!description.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏');
      return;
    }

    if (title.trim().length < 5) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    if (description.trim().length < 20) {
      Alert.alert('–û—à–∏–±–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    try {
      setIsSubmitting(true);
      
      const orderData = {
        title: title.trim(),
        description: description.trim(),
        category,
        budget: budget ? parseInt(budget) : undefined,
      };

      const response = await apiService.createOrder(orderData);
      
      if (response.success) {
        Alert.alert(
          '–£—Å–ø–µ—Ö',
          '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
          [
            {
              text: 'OK',
              onPress: () => navigation.goBack(),
            }
          ]
        );
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
      }
    } catch (error) {
      console.error('Error creating order:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView style={styles.scrollView}>
        <View style={styles.content}>
          <Card style={styles.card}>
            <Card.Content>
              <Title style={styles.title}>–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É</Title>
              <Paragraph style={styles.subtitle}>
                –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
              </Paragraph>

              <TextInput
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ *"
                value={formData.title}
                onChangeText={(value) => handleInputChange('title', value)}
                mode="outlined"
                style={styles.input}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–µ–Ω –¥–∏–≤–∞–Ω –¥–ª—è –≥–æ—Å—Ç–∏–Ω–æ–π"
                maxLength={100}
              />

              <TextInput
                label="–û–ø–∏—Å–∞–Ω–∏–µ *"
                value={formData.description}
                onChangeText={(value) => handleInputChange('description', value)}
                mode="outlined"
                style={styles.input}
                multiline
                numberOfLines={4}
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é, —Ü–≤–µ—Ç—É, —Ä–∞–∑–º–µ—Ä—É –∏ —Ç.–¥."
                maxLength={1000}
              />

              <View style={styles.categoryContainer}>
                <Text style={styles.categoryLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</Text>
                <SegmentedButtons
                  value={formData.category}
                  onValueChange={(value) => handleInputChange('category', value)}
                  buttons={categories}
                  style={styles.segmentedButtons}
                />
              </View>

              <TextInput
                label="–ë—é–¥–∂–µ—Ç (‚Ç∏)"
                value={formData.budget}
                onChangeText={(value) => handleInputChange('budget', value)}
                mode="outlined"
                style={styles.input}
                keyboardType="numeric"
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              />

              <View style={styles.tipsContainer}>
                <Text style={styles.tipsTitle}>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</Text>
                <Text style={styles.tipText}>‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏</Text>
                <Text style={styles.tipText}>‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã, –µ—Å–ª–∏ –≤–∞–∂–Ω–æ</Text>
                <Text style={styles.tipText}>‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</Text>
                <Text style={styles.tipText}>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å</Text>
              </View>

              <Button
                mode="contained"
                onPress={handleSubmit}
                style={styles.submitButton}
                disabled={isSubmitting}
                loading={isSubmitting}
              >
                {isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'}
              </Button>
            </Card.Content>
          </Card>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: 16,
  },
  card: {
    elevation: 4,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 24,
    textAlign: 'center',
  },
  input: {
    marginBottom: 16,
  },
  categoryContainer: {
    marginBottom: 16,
  },
  categoryLabel: {
    fontSize: 16,
    marginBottom: 8,
    color: '#666',
  },
  segmentedButtons: {
    marginBottom: 8,
  },
  tipsContainer: {
    backgroundColor: '#E3F2FD',
    padding: 16,
    borderRadius: 8,
    marginBottom: 24,
  },
  tipsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#1976D2',
  },
  tipText: {
    fontSize: 14,
    color: '#1976D2',
    marginBottom: 4,
  },
  submitButton: {
    paddingVertical: 8,
    marginBottom: 16,
  },
});

export default CreateOrderScreen;
