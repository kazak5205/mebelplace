#!/usr/bin/env node

const { chromium } = require('playwright');
const { performance } = require('perf_hooks');

// –ú–û–©–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const CONFIG = {
  target: 'https://mebelplace.com.kz',
  totalUsers: 100, // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –¥–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  concurrentUsers: 20, // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –¥–æ 20 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
  testDuration: 1800, // 30 –º–∏–Ω—É—Ç
  userDelay: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  actionDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  databaseCheckInterval: 20000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
  browserTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
  maxRetries: 3 // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  users: [],
  interactions: [],
  totalRequests: 0,
  totalErrors: 0,
  startTime: Date.now(),
  databaseChecks: [],
  browserStats: {
    launched: 0,
    closed: 0,
    errors: 0
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
const globalData = {
  createdOrders: [],
  createdVideos: [],
  createdUsers: [],
  activeChats: [],
  supportTickets: [],
  apiTokens: []
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const checkDatabase = async () => {
  const { exec } = require('child_process');
  const util = require('util');
  const execAsync = util.promisify(exec);
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { stdout: usersOutput } = await execAsync(
      'docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users WHERE created_at > NOW() - INTERVAL \'1 hour\';"'
    );
    const recentUsers = parseInt(usersOutput.trim()) || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
    const { stdout: ordersOutput } = await execAsync(
      'docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders WHERE created_at > NOW() - INTERVAL \'1 hour\';"'
    );
    const recentOrders = parseInt(ordersOutput.trim()) || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const { stdout: messagesOutput } = await execAsync(
      'docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages WHERE created_at > NOW() - INTERVAL \'1 hour\';"'
    );
    const recentMessages = parseInt(messagesOutput.trim()) || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
    const { stdout: videosOutput } = await execAsync(
      'docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos WHERE created_at > NOW() - INTERVAL \'1 hour\';"'
    );
    const recentVideos = parseInt(videosOutput.trim()) || 0;
    
    const dbCheck = {
      timestamp: new Date(),
      users: recentUsers,
      orders: recentOrders,
      messages: recentMessages,
      videos: recentVideos
    };
    
    stats.databaseChecks.push(dbCheck);
    
    console.log(`üìä –ë–ê–ó–ê –î–ê–ù–ù–´–• (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):`);
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${recentUsers}`);
    console.log(`   üìã –ó–∞–∫–∞–∑—ã: ${recentOrders}`);
    console.log(`   üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: ${recentMessages}`);
    console.log(`   üé¨ –í–∏–¥–µ–æ: ${recentVideos}`);
    
    return dbCheck;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã: ${error.message}`);
    return null;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const createTestFiles = () => {
  const fs = require('fs');
  const path = require('path');
  
  const testVideoPath = path.join(__dirname, 'test-video.mp4');
  const testImagePath = path.join(__dirname, 'test-image.jpg');
  const testAvatarPath = path.join(__dirname, 'test-avatar.jpg');
  
  if (!fs.existsSync(testVideoPath)) {
    fs.writeFileSync(testVideoPath, 'fake video content for testing');
  }
  if (!fs.existsSync(testImagePath)) {
    fs.writeFileSync(testImagePath, 'fake image content for testing');
  }
  if (!fs.existsSync(testAvatarPath)) {
    fs.writeFileSync(testAvatarPath, 'fake avatar content for testing');
  }
  
  return { testVideoPath, testImagePath, testAvatarPath };
};

// –ú–û–©–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
async function simulatePowerfulUser(userId) {
  let browser = null;
  let retryCount = 0;
  
  const userStats = {
    id: userId,
    startTime: Date.now(),
    actions: [],
    errors: [],
    uploadedContent: [],
    interactions: [],
    role: null,
    authToken: null,
    apiCalls: [],
    databaseImpact: [],
    retries: 0
  };
  
  const { testVideoPath, testImagePath, testAvatarPath } = createTestFiles();
  
  while (retryCount < CONFIG.maxRetries) {
    try {
      // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ë–†–ê–£–ó–ï–† —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
      browser = await chromium.launch({ 
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--memory-pressure-off',
          '--max_old_space_size=4096',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding'
        ],
        timeout: CONFIG.browserTimeout
      });
      
      stats.browserStats.launched++;
      
      const context = await browser.newContext({
        viewport: { width: 1920, height: 1080 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        ignoreHTTPSErrors: true
      });
      
      const page = await context.newPage();
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS –∫–æ–¥–∞
      let smsCode = null;
      page.on('console', msg => {
        if (msg.type() === 'log') {
          const text = msg.text();
          if (text.includes('SMS code sent')) {
            console.log(`üîç User ${userId}: SMS –∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${text}`);
            const match = text.match(/code:\s*(\d+)/);
            if (match) {
              smsCode = match[1];
              console.log(`üîç User ${userId}: SMS –∫–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω: ${smsCode}`);
            }
          }
        }
      });

      console.log(`üåê User ${userId}: –ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...`);
      
      // 1. –ü–†–ò–•–û–î –ù–ê –°–ê–ô–¢
      await page.goto(CONFIG.target, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });
      userStats.actions.push('visited_homepage');
      console.log(`üë§ User ${userId}: –ó–∞—à–µ–ª –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`);
      
      await page.waitForTimeout(CONFIG.actionDelay);
      
      // 2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
      console.log(`üë§ User ${userId}: –í–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –Ω–µ—ë`);
      
      const registerButton = page.locator('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è').first();
      if (await registerButton.count() > 0) {
        await registerButton.click({ force: true });
        await page.waitForLoadState('networkidle');
        userStats.actions.push('clicked_register_button');
        console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        const phone = `+7778${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`;
        const username = `user${userId}`;
        const password = 'password123';
        const isMaster = Math.random() > 0.6; // 40% –º–∞—Å—Ç–µ—Ä–æ–≤, 60% –∫–ª–∏–µ–Ω—Ç–æ–≤
        userStats.role = isMaster ? 'master' : 'client';
        
        console.log(`üë§ User ${userId}: –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (${userStats.role})`);
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
        const roleSelect = page.locator('combobox, select').first();
        if (await roleSelect.count() > 0) {
          try {
            const roleValue = isMaster ? 'master' : 'user';
            await roleSelect.selectOption(roleValue);
            userStats.actions.push('selected_role');
            console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª —Ä–æ–ª—å: ${userStats.role}`);
          } catch (error) {
            console.log(`üë§ User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å - ${error.message}`);
          }
        }
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        const phoneInput = page.locator('input[placeholder*="+7"], input[type="tel"]').first();
        if (await phoneInput.count() > 0) {
          await phoneInput.fill(phone);
          userStats.actions.push('filled_phone');
          console.log(`üë§ User ${userId}: –í–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
        }
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º username
        const usernameInput = page.locator('input[placeholder*="username"], input[placeholder*="–ª–æ–≥–∏–Ω"]').first();
        if (await usernameInput.count() > 0) {
          await usernameInput.fill(username);
          userStats.actions.push('filled_username');
          console.log(`üë§ User ${userId}: –í–≤–µ–ª –ª–æ–≥–∏–Ω: ${username}`);
        }
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
        const passwordInput = page.locator('input[type="password"]').first();
        if (await passwordInput.count() > 0) {
          await passwordInput.fill(password);
          userStats.actions.push('filled_password');
          console.log(`üë§ User ${userId}: –í–≤–µ–ª –ø–∞—Ä–æ–ª—å`);
        }
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
        const confirmPasswordInput = page.locator('input[placeholder*="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ"], input[placeholder*="–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ"]').first();
        if (await confirmPasswordInput.count() > 0) {
          await confirmPasswordInput.fill(password);
          userStats.actions.push('confirmed_password');
          console.log(`üë§ User ${userId}: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–∞—Ä–æ–ª—å`);
        }
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS"), button[type="submit"], button:has-text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")').first();
        if (await submitButton.count() > 0) {
          await submitButton.click();
          userStats.actions.push('submitted_registration');
          console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS'`);
          
          await page.waitForTimeout(CONFIG.actionDelay * 3);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
          const currentUrl = page.url();
          if (currentUrl.includes('sms-verification')) {
            console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
            
            await page.waitForTimeout(3000);
            
            if (smsCode) {
              console.log(`üë§ User ${userId}: –ò—Å–ø–æ–ª—å–∑—É–µ–º SMS –∫–æ–¥: ${smsCode}`);
              
              const smsInput = page.locator('input[placeholder*="6-–∑–Ω–∞—á–Ω—ã–π"], input[placeholder*="SMS"]').first();
              if (await smsInput.count() > 0) {
                await smsInput.fill(smsCode);
                userStats.actions.push('filled_sms_code');
                console.log(`üë§ User ${userId}: –í–≤–µ–ª SMS –∫–æ–¥`);
                
                await page.waitForTimeout(CONFIG.actionDelay);
                
                const confirmButton = page.locator('button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")').first();
                if (await confirmButton.count() > 0) {
                  await confirmButton.click();
                  userStats.actions.push('confirmed_sms');
                  console.log(`üë§ User ${userId}: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª SMS –∫–æ–¥`);
                  
                  await page.waitForTimeout(CONFIG.actionDelay * 3);
                  
                  const token = await page.evaluate(() => localStorage.getItem('accessToken'));
                  if (token) {
                    userStats.authToken = token;
                    userStats.actions.push('registration_success');
                    console.log(`üë§ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
                  }
                }
              }
            } else {
              console.log(`üë§ User ${userId}: SMS –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é`);
            }
          } else {
            const token = await page.evaluate(() => localStorage.getItem('accessToken'));
            if (token) {
              userStats.authToken = token;
              userStats.actions.push('registration_success');
              console.log(`üë§ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–µ–∑ SMS`);
            }
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          globalData.createdUsers.push({
            id: userId,
            username,
            phone,
            role: userStats.role,
            registeredAt: new Date()
          });
        }
        
        await page.waitForTimeout(CONFIG.actionDelay * 2);
      }
      
      // 3. –í–•–û–î –í –°–ò–°–¢–ï–ú–£
      console.log(`üë§ User ${userId}: –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É`);
      
      const token = await page.evaluate(() => localStorage.getItem('accessToken'));
      if (token) {
        userStats.authToken = token;
        userStats.actions.push('already_logged_in');
        console.log(`üë§ User ${userId}: –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
      } else {
        const loginButton = page.locator('text=–í–æ–π—Ç–∏').first();
        if (await loginButton.count() > 0) {
          await loginButton.click({ force: true });
          await page.waitForLoadState('networkidle');
          userStats.actions.push('clicked_login_button');
          console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const phoneInput = page.locator('input[placeholder*="+7"], input[type="tel"]').first();
          if (await phoneInput.count() > 0) {
            await phoneInput.fill(phone);
            userStats.actions.push('filled_login_phone');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –≤—Ö–æ–¥–∞`);
          }
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const passwordInput = page.locator('input[type="password"]').first();
          if (await passwordInput.count() > 0) {
            await passwordInput.fill(password);
            userStats.actions.push('filled_login_password');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞`);
          }
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const submitLoginButton = page.locator('button[type="submit"], button:has-text("–í–æ–π—Ç–∏")').first();
          if (await submitLoginButton.count() > 0) {
            await submitLoginButton.click({ force: true });
            userStats.actions.push('submitted_login');
            console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª '–í–æ–π—Ç–∏'`);
            
            await page.waitForTimeout(CONFIG.actionDelay * 3);
            
            const token = await page.evaluate(() => localStorage.getItem('accessToken'));
            if (token) {
              userStats.authToken = token;
              console.log(`üë§ User ${userId}: –£—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
            }
          }
        }
      }
      
      // 4. –ü–û–ò–°–ö –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
      console.log(`üë§ User ${userId}: –ò—â–µ—Ç —á—Ç–æ-—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ`);
      
      const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"], input[placeholder*="Search"]').first();
      if (await searchInput.count() > 0) {
        await searchInput.fill('–º–µ–±–µ–ª—å –∫—É—Ö–Ω—è');
        userStats.actions.push('searched_furniture');
        console.log(`üë§ User ${userId}: –ò—â–µ—Ç '–º–µ–±–µ–ª—å –∫—É—Ö–Ω—è'`);
        
        await page.waitForTimeout(CONFIG.actionDelay);
        
        await searchInput.press('Enter');
        userStats.actions.push('submitted_search');
        console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å`);
        
        await page.waitForTimeout(CONFIG.actionDelay * 2);
      }
      
      // 5. –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
      if (userStats.role === 'client') {
        console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ö–õ–ò–ï–ù–¢–ê`);
        
        // 5.1 –ü–†–û–°–ú–û–¢–† –ö–ê–¢–ê–õ–û–ì–ê –ú–ê–°–¢–ï–†–û–í
        console.log(`üë§ User ${userId}: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å—Ç–µ—Ä–æ–≤`);
        
        try {
          await page.goto(`${CONFIG.target}/masters`, { waitUntil: 'networkidle' });
          userStats.actions.push('viewed_masters_catalog');
          console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å—Ç–µ—Ä–æ–≤`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const masterCards = page.locator('.master-card, [data-testid="master-card"], a[href*="/master/"]');
          const masterCount = await masterCards.count();
          if (masterCount > 0) {
            const randomMaster = Math.floor(Math.random() * Math.min(masterCount, 3));
            const masterCard = masterCards.nth(randomMaster);
            
            console.log(`üë§ User ${userId}: –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
            await masterCard.click();
            await page.waitForLoadState('networkidle');
            userStats.actions.push('viewed_master_profile');
            console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
            
            const subscribeButton = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), button:has-text("Subscribe")').first();
            if (await subscribeButton.count() > 0) {
              await subscribeButton.click();
              userStats.actions.push('subscribed_to_master');
              userStats.interactions.push('master_subscription');
              console.log(`üë§ User ${userId}: –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞`);
              
              await page.waitForTimeout(CONFIG.actionDelay);
            }
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–∞—Å—Ç–µ—Ä–æ–≤ - ${error.message}`);
        }
        
        // 5.2 –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
        console.log(`üë§ User ${userId}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
        
        try {
          await page.goto(`${CONFIG.target}/orders/create`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_create_order');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const orderData = {
            title: `–ó–∞–∫–∞–∑ –∫—É—Ö–Ω–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
            description: `–ù—É–∂–Ω–∞ –∫—É—Ö–Ω—è 3 –º–µ—Ç—Ä–∞, —Ü–≤–µ—Ç –±–µ–ª—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª –ú–î–§, –±—é–¥–∂–µ—Ç 150000 —Ç–µ–Ω–≥–µ. –°—Ä–æ–∫ –¥–æ 1 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞.`,
            region: '–ê–ª–º–∞—Ç—ã',
            budget: '150000'
          };
          
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞
          const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
          if (await titleInput.count() > 0) {
            await titleInput.fill(orderData.title);
            userStats.actions.push('filled_order_title');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
          if (await descInput.count() > 0) {
            await descInput.fill(orderData.description);
            userStats.actions.push('filled_order_description');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –í—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const categorySelect = page.locator('select[name*="category"]').first();
          if (await categorySelect.count() > 0) {
            try {
              await categorySelect.selectOption('furniture');
              userStats.actions.push('selected_category');
              console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
            } catch (error) {
              console.log(`üë§ User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é - ${error.message}`);
            }
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –í—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω
          const regionSelect = page.locator('select[name*="region"]').first();
          if (await regionSelect.count() > 0) {
            try {
              await regionSelect.selectOption('–ê–ª–º–∞—Ç—ã');
              userStats.actions.push('selected_region');
              console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω`);
            } catch (error) {
              console.log(`üë§ User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω - ${error.message}`);
            }
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –ë—é–¥–∂–µ—Ç
          const budgetInput = page.locator('input[name*="budget"], input[placeholder*="–±—é–¥–∂–µ—Ç"]').first();
          if (await budgetInput.count() > 0) {
            await budgetInput.fill(orderData.budget);
            userStats.actions.push('filled_budget');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –±—é–¥–∂–µ—Ç`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ
          const fileInput = page.locator('input[type="file"]').first();
          if (await fileInput.count() > 0) {
            await fileInput.setInputFiles(testImagePath);
            userStats.actions.push('uploaded_order_photo');
            userStats.uploadedContent.push('order_photo');
            console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑
          const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
          if (await submitButton.count() > 0) {
            await submitButton.click();
            userStats.actions.push('submitted_order');
            userStats.uploadedContent.push('order_created');
            console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            globalData.createdOrders.push({
              id: `order_${userId}_${Date.now()}`,
              clientId: userId,
              title: orderData.title,
              description: orderData.description,
              status: 'pending',
              createdAt: new Date()
            });
            
            await page.waitForTimeout(CONFIG.actionDelay * 3);
          }
        } catch (error) {
          userStats.errors.push(`Order creation failed: ${error.message}`);
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - ${error.message}`);
        }
        
        // 5.3 –ü–†–û–°–ú–û–¢–† –°–í–û–ò–• –ó–ê–ö–ê–ó–û–í
        console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã`);
        
        try {
          await page.goto(`${CONFIG.target}/user/orders`, { waitUntil: 'networkidle' });
          userStats.actions.push('viewed_my_orders');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const responseCards = page.locator('.response-card, [data-testid="response-card"]');
          const responseCount = await responseCards.count();
          if (responseCount > 0) {
            console.log(`üë§ User ${userId}: –í–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤`);
            
            const acceptButton = page.locator('button:has-text("–ü—Ä–∏–Ω—è—Ç—å"), button:has-text("Accept")').first();
            if (await acceptButton.count() > 0) {
              await acceptButton.click();
              userStats.actions.push('accepted_master_response');
              userStats.interactions.push('order_acceptance');
              console.log(`üë§ User ${userId}: –ü—Ä–∏–Ω—è–ª –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞`);
              
              await page.waitForTimeout(CONFIG.actionDelay);
            }
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ - ${error.message}`);
        }
        
        // 5.4 –ß–ê–¢ –° –ú–ê–°–¢–ï–†–ê–ú–ò
        console.log(`üë§ User ${userId}: –ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç`);
        
        try {
          await page.goto(`${CONFIG.target}/chat`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_chat');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
          if (await messageInput.count() > 0) {
            const messages = [
              `–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`,
              `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª –±—ã —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`,
              `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∏–¥–∫–∏?`,
              `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç?`
            ];
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            
            await messageInput.fill(randomMessage);
            userStats.actions.push('typed_message');
            console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
            
            await messageInput.press('Enter');
            userStats.actions.push('sent_chat_message');
            userStats.interactions.push('chat_message');
            console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            
            globalData.activeChats.push({
              clientId: userId,
              message: randomMessage,
              timestamp: new Date()
            });
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ - ${error.message}`);
        }
        
        // 5.5 –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
        console.log(`üë§ User ${userId}: –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å`);
        
        try {
          await page.goto(`${CONFIG.target}/profile`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_profile');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const avatarInput = page.locator('input[type="file"][accept*="image"]').first();
          if (await avatarInput.count() > 0) {
            await avatarInput.setInputFiles(testAvatarPath);
            userStats.actions.push('uploaded_avatar');
            userStats.uploadedContent.push('avatar');
            console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∑–∏–ª –∞–≤–∞—Ç–∞—Ä–∫—É`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
          if (await bioInput.count() > 0) {
            await bioInput.fill(`–ö–ª–∏–µ–Ω—Ç ${userId}. –ò—â—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞.`);
            userStats.actions.push('updated_bio');
            console.log(`üë§ User ${userId}: –û–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - ${error.message}`);
        }
      }
      
      // 6. –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ú–ê–°–¢–ï–†–û–í
      if (userStats.role === 'master') {
        console.log(`üë§ User ${userId}: –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ú–ê–°–¢–ï–†–ê`);
        
        // 6.1 –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø –ú–ê–°–¢–ï–†–ê
        console.log(`üë§ User ${userId}: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
        
        try {
          await page.goto(`${CONFIG.target}/profile`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_master_profile');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
          if (await nameInput.count() > 0) {
            await nameInput.fill(`–ú–∞—Å—Ç–µ—Ä ${userId}`);
            userStats.actions.push('filled_master_name');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –∏–º—è –º–∞—Å—Ç–µ—Ä–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
          if (await bioInput.count() > 0) {
            await bioInput.fill(`–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –º–µ–±–µ–ª–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫—É—Ö–Ω—è—Ö –∏ —à–∫–∞—Ñ–∞—Ö. –†–∞–±–æ—Ç–∞—é —Å –ú–î–§, –º–∞—Å—Å–∏–≤–æ–º –¥–µ—Ä–µ–≤–∞. –û–ø—ã—Ç 5 –ª–µ—Ç.`);
            userStats.actions.push('filled_master_bio');
            console.log(`üë§ User ${userId}: –ó–∞–ø–æ–ª–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const avatarInput = page.locator('input[type="file"][accept*="image"]').first();
          if (await avatarInput.count() > 0) {
            await avatarInput.setInputFiles(testAvatarPath);
            userStats.actions.push('uploaded_master_avatar');
            userStats.uploadedContent.push('master_avatar');
            console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∑–∏–ª –∞–≤–∞—Ç–∞—Ä –º–∞—Å—Ç–µ—Ä–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const saveButton = page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), button:has-text("Update")').first();
          if (await saveButton.count() > 0) {
            await saveButton.click();
            userStats.actions.push('saved_master_profile');
            console.log(`üë§ User ${userId}: –°–æ—Ö—Ä–∞–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - ${error.message}`);
        }
        
        // 6.2 –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û
        console.log(`üë§ User ${userId}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ`);
        
        try {
          await page.goto(`${CONFIG.target}/create-video-ad`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_video_creation');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const videoData = {
            title: `–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ ${userId} - –ö—É—Ö–Ω—è –∏–∑ –ú–î–§`,
            description: `–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—É—Ö–Ω–∏ –∏–∑ –ú–î–§. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –∑–∞–º–µ—Ä–æ–≤ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≥–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞.`,
            tags: '–º–µ–±–µ–ª—å, –∫—É—Ö–Ω—è, –ú–î–§, –Ω–∞ –∑–∞–∫–∞–∑, —Ä—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
          };
          
          const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
          if (await titleInput.count() > 0) {
            await titleInput.fill(videoData.title);
            userStats.actions.push('filled_video_title');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
          if (await descInput.count() > 0) {
            await descInput.fill(videoData.description);
            userStats.actions.push('filled_video_description');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const categorySelect = page.locator('select[name*="category"]').first();
          if (await categorySelect.count() > 0) {
            try {
              await categorySelect.selectOption('furniture');
              userStats.actions.push('selected_video_category');
              console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–¥–µ–æ`);
            } catch (error) {
              console.log(`üë§ User ${userId}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–¥–µ–æ - ${error.message}`);
            }
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const tagsInput = page.locator('input[name*="tags"], input[placeholder*="—Ç–µ–≥–∏"]').first();
          if (await tagsInput.count() > 0) {
            await tagsInput.fill(videoData.tags);
            userStats.actions.push('filled_video_tags');
            console.log(`üë§ User ${userId}: –í–≤–µ–ª —Ç–µ–≥–∏ –≤–∏–¥–µ–æ`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const videoInput = page.locator('input[type="file"][accept*="video"]').first();
          if (await videoInput.count() > 0) {
            await videoInput.setInputFiles(testVideoPath);
            userStats.actions.push('selected_video_file');
            console.log(`üë§ User ${userId}: –í—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ —Ñ–∞–π–ª`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
          
          const submitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å"), button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")').first();
          if (await submitButton.count() > 0) {
            await submitButton.click();
            userStats.actions.push('submitted_video');
            userStats.uploadedContent.push('video_uploaded');
            console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ`);
            
            globalData.createdVideos.push({
              id: `video_${userId}_${Date.now()}`,
              masterId: userId,
              title: videoData.title,
              description: videoData.description,
              createdAt: new Date()
            });
            
            await page.waitForTimeout(CONFIG.actionDelay * 5);
          }
        } catch (error) {
          userStats.errors.push(`Video upload failed: ${error.message}`);
          console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ - ${error.message}`);
        }
        
        // 6.3 –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–û–í –ö–õ–ò–ï–ù–¢–û–í
        console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤`);
        
        try {
          await page.goto(`${CONFIG.target}/master/orders`, { waitUntil: 'networkidle' });
          userStats.actions.push('viewed_client_orders');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const orderCards = page.locator('.order-card, [data-testid="order-card"]');
          const orderCount = await orderCards.count();
          if (orderCount > 0) {
            const randomOrder = Math.floor(Math.random() * Math.min(orderCount, 2));
            const orderCard = orderCards.nth(randomOrder);
            
            console.log(`üë§ User ${userId}: –í–∏–¥–∏—Ç –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞`);
            
            const respondButton = orderCard.locator('button:has-text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"), button:has-text("Respond")').first();
            if (await respondButton.count() > 0) {
              await respondButton.click();
              userStats.actions.push('clicked_respond_button');
              console.log(`üë§ User ${userId}: –ù–∞–∂–∞–ª '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'`);
              
              await page.waitForLoadState('networkidle');
              await page.waitForTimeout(CONFIG.actionDelay);
              
              const responseText = `–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑! –û–ø—ã—Ç 5 –ª–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°—Ä–æ–∫ 2 –Ω–µ–¥–µ–ª–∏. –¶–µ–Ω–∞ 120000 —Ç–µ–Ω–≥–µ.`;
              const responseInput = page.locator('textarea[placeholder*="–æ—Ç–∫–ª–∏–∫"], textarea[placeholder*="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]').first();
              if (await responseInput.count() > 0) {
                await responseInput.fill(responseText);
                userStats.actions.push('filled_response');
                console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª –æ—Ç–∫–ª–∏–∫`);
                
                await page.waitForTimeout(CONFIG.actionDelay);
              }
              
              const submitResponseButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫"), button:has-text("Submit")').first();
              if (await submitResponseButton.count() > 0) {
                await submitResponseButton.click();
                userStats.actions.push('submitted_response');
                userStats.uploadedContent.push('order_response');
                userStats.interactions.push('order_response');
                console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫`);
                
                await page.waitForTimeout(CONFIG.actionDelay);
              }
            }
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ - ${error.message}`);
        }
        
        // 6.4 –ß–ê–¢ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò
        console.log(`üë§ User ${userId}: –ó–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏`);
        
        try {
          await page.goto(`${CONFIG.target}/chat`, { waitUntil: 'networkidle' });
          userStats.actions.push('accessed_master_chat');
          console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
          
          await page.waitForTimeout(CONFIG.actionDelay);
          
          const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
          if (await messageInput.count() > 0) {
            const messages = [
              `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.`,
              `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É? –ú–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.`,
              `–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?`,
              `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–∞ —Å—É–º–º—É —Å–≤—ã—à–µ 100000 —Ç–µ–Ω–≥–µ.`
            ];
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            
            await messageInput.fill(randomMessage);
            userStats.actions.push('typed_master_message');
            console.log(`üë§ User ${userId}: –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É`);
            
            await page.waitForTimeout(CONFIG.actionDelay);
            
            await messageInput.press('Enter');
            userStats.actions.push('sent_master_message');
            userStats.interactions.push('master_chat_message');
            console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É`);
            
            globalData.activeChats.push({
              masterId: userId,
              message: randomMessage,
              timestamp: new Date()
            });
            
            await page.waitForTimeout(CONFIG.actionDelay);
          }
        } catch (error) {
          console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ - ${error.message}`);
        }
      }
      
      // 7. –û–ë–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø
      console.log(`üë§ User ${userId}: –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
      
      try {
        await page.goto(`${CONFIG.target}/notifications`, { waitUntil: 'networkidle' });
        userStats.actions.push('viewed_notifications');
        console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        
        await page.waitForTimeout(CONFIG.actionDelay);
      } catch (error) {
        console.log(`üë§ User ${userId}: –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - ${error.message}`);
      }
      
      userStats.endTime = Date.now();
      userStats.duration = userStats.endTime - userStats.startTime;
      
      console.log(`‚úÖ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª ${userStats.role} —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞ ${userStats.duration}ms`);
      console.log(`üìä User ${userId}: –î–µ–π—Å—Ç–≤–∏—è: ${userStats.actions.join(', ')}`);
      console.log(`üìä User ${userId}: –ö–æ–Ω—Ç–µ–Ω—Ç: ${userStats.uploadedContent.join(', ')}`);
      console.log(`üìä User ${userId}: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: ${userStats.interactions.join(', ')}`);
      
      // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏
      stats.browserStats.closed++;
      return userStats;
      
    } catch (error) {
      console.log(`üí• User ${userId}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}) - ${error.message}`);
      userStats.errors.push(`Critical error (attempt ${retryCount + 1}): ${error.message}`);
      userStats.retries = retryCount + 1;
      stats.browserStats.errors++;
      
      retryCount++;
      
      if (browser) {
        try {
          await browser.close();
          stats.browserStats.closed++;
        } catch (closeError) {
          console.log(`‚ö†Ô∏è User ${userId}: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ - ${closeError.message}`);
        }
      }
      
      if (retryCount < CONFIG.maxRetries) {
        console.log(`üîÑ User ${userId}: –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É ${retryCount + 1}/${CONFIG.maxRetries}`);
        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      } else {
        console.log(`‚ùå User ${userId}: –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏`);
        userStats.endTime = Date.now();
        return userStats;
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ú–û–©–ù–û–ì–û –†–ï–ê–õ–¨–ù–û–ì–û UI —Ç–µ—Å—Ç–∞
async function runPowerfulLoadTest() {
  console.log('üöÄ STARTING POWERFUL REAL UI LOAD TEST FOR MEBELPLACE');
  console.log('‚ïê'.repeat(80));
  console.log(`üéØ Target: ${CONFIG.target}`);
  console.log(`üë• Total Users: ${CONFIG.totalUsers}`);
  console.log(`‚è±Ô∏è  Duration: ${CONFIG.testDuration}s`);
  console.log(`üîÑ Concurrent: ${CONFIG.concurrentUsers}`);
  console.log(`üñ±Ô∏è  Real UI: ENABLED (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –ª—é–¥–∏)`);
  console.log(`üîç Database Checks: EVERY ${CONFIG.databaseCheckInterval/1000}s`);
  console.log(`üõ°Ô∏è  Max Retries: ${CONFIG.maxRetries}`);
  console.log(`‚è∞ Browser Timeout: ${CONFIG.browserTimeout}s`);
  console.log('‚ïê'.repeat(80));
  
  const startTime = Date.now();
  const users = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const dbCheckInterval = setInterval(async () => {
    await checkDatabase();
  }, CONFIG.databaseCheckInterval);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  for (let i = 0; i < CONFIG.totalUsers; i++) {
    const delay = i * CONFIG.userDelay;
    
    setTimeout(async () => {
      const user = await simulatePowerfulUser(i + 1);
      users.push(user);
      stats.users.push(user);
      
      console.log(`üë§ User ${i + 1} –∑–∞–≤–µ—Ä—à–∏–ª (${stats.users.length} –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
    }, delay);
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  await new Promise(resolve => setTimeout(resolve, CONFIG.testDuration * 1000));
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã
  clearInterval(dbCheckInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  await checkDatabase();
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const endTime = Date.now();
  const totalDuration = (endTime - startTime) / 1000;
  
  const totalActions = users.reduce((sum, user) => sum + user.actions.length, 0);
  const totalErrors = users.reduce((sum, user) => sum + user.errors.length, 0);
  const totalContent = users.reduce((sum, user) => sum + user.uploadedContent.length, 0);
  const totalInteractions = users.reduce((sum, user) => sum + user.interactions.length, 0);
  const avgDuration = users.reduce((sum, user) => sum + (user.duration || 0), 0) / users.length;
  const totalRetries = users.reduce((sum, user) => sum + (user.retries || 0), 0);
  
  const clients = users.filter(u => u.role === 'client');
  const masters = users.filter(u => u.role === 'master');
  
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('üìä POWERFUL REAL UI LOAD TEST RESULTS');
  console.log('‚ïê'.repeat(80));
  console.log(`‚è±Ô∏è  Test Duration: ${totalDuration.toFixed(2)}s`);
  console.log(`üë• Total Users: ${stats.users.length}`);
  console.log(`üë§ Clients: ${clients.length}`);
  console.log(`üî® Masters: ${masters.length}`);
  console.log(`üé¨ Total Actions: ${totalActions}`);
  console.log(`‚ùå Total Errors: ${totalErrors}`);
  console.log(`üìÅ Content Created: ${totalContent}`);
  console.log(`ü§ù Total Interactions: ${totalInteractions}`);
  console.log(`üìä Avg User Duration: ${avgDuration.toFixed(2)}ms`);
  console.log(`üîÑ Total Retries: ${totalRetries}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
  console.log('\nüåê BROWSER STATISTICS:');
  console.log(`  Launched: ${stats.browserStats.launched}`);
  console.log(`  Closed: ${stats.browserStats.closed}`);
  console.log(`  Errors: ${stats.browserStats.errors}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const actionCounts = {};
  const contentCounts = {};
  const interactionCounts = {};
  const roleStats = { client: { actions: 0, content: 0, interactions: 0 }, master: { actions: 0, content: 0, interactions: 0 } };
  
  users.forEach(user => {
    user.actions.forEach(action => {
      actionCounts[action] = (actionCounts[action] || 0) + 1;
    });
    user.uploadedContent.forEach(content => {
      contentCounts[content] = (contentCounts[content] || 0) + 1;
    });
    user.interactions.forEach(interaction => {
      interactionCounts[interaction] = (interactionCounts[interaction] || 0) + 1;
    });
    
    if (user.role) {
      roleStats[user.role].actions += user.actions.length;
      roleStats[user.role].content += user.uploadedContent.length;
      roleStats[user.role].interactions += user.interactions.length;
    }
  });
  
  console.log('\nüìã ACTION BREAKDOWN:');
  Object.entries(actionCounts).forEach(([action, count]) => {
    console.log(`  ${action}: ${count} —Ä–∞–∑`);
  });
  
  console.log('\nüìÅ CONTENT CREATED:');
  Object.entries(contentCounts).forEach(([content, count]) => {
    console.log(`  ${content}: ${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  });
  
  console.log('\nü§ù INTERACTIONS:');
  Object.entries(interactionCounts).forEach(([interaction, count]) => {
    console.log(`  ${interaction}: ${count} —Ä–∞–∑`);
  });
  
  console.log('\nüë• ROLE STATISTICS:');
  console.log(`  Clients: ${roleStats.client.actions} –¥–µ–π—Å—Ç–≤–∏–π, ${roleStats.client.content} –∫–æ–Ω—Ç–µ–Ω—Ç–∞, ${roleStats.client.interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π`);
  console.log(`  Masters: ${roleStats.master.actions} –¥–µ–π—Å—Ç–≤–∏–π, ${roleStats.master.content} –∫–æ–Ω—Ç–µ–Ω—Ç–∞, ${roleStats.master.interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π`);
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('\nüåç GLOBAL DATA:');
  console.log(`  Created Orders: ${globalData.createdOrders.length}`);
  console.log(`  Created Videos: ${globalData.createdVideos.length}`);
  console.log(`  Active Chats: ${globalData.activeChats.length}`);
  console.log(`  Created Users: ${globalData.createdUsers.length}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüóÑÔ∏è DATABASE IMPACT:');
  if (stats.databaseChecks.length > 0) {
    const firstCheck = stats.databaseChecks[0];
    const lastCheck = stats.databaseChecks[stats.databaseChecks.length - 1];
    
    console.log(`  Users Created: ${lastCheck.users - firstCheck.users}`);
    console.log(`  Orders Created: ${lastCheck.orders - firstCheck.orders}`);
    console.log(`  Messages Sent: ${lastCheck.messages - firstCheck.messages}`);
    console.log(`  Videos Uploaded: ${lastCheck.videos - firstCheck.videos}`);
  }
  
  // –û—Ü–µ–Ω–∫–∞
  console.log('\nüéØ PERFORMANCE ASSESSMENT:');
  if (totalErrors < totalActions * 0.1) {
    console.log('‚úÖ –û–¢–õ–ò–ß–ù–û - –°–∞–π—Ç –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏!');
  } else if (totalErrors < totalActions * 0.3) {
    console.log('‚ö†Ô∏è  –•–û–†–û–®–û - –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –≤ —Ü–µ–ª–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò - –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
  }
  
  console.log('‚ïê'.repeat(80));
}

// –ó–∞–ø—É—Å–∫
runPowerfulLoadTest().catch(console.error);
