const { chromium } = require('playwright');

// üöÄ –ú–ê–°–°–ò–í–ù–´–ô –¢–ï–°–¢ - 500 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ó–ê 10 –ú–ò–ù–£–¢
const config = {
  targetUrl: 'https://mebelplace.com.kz',
  totalUsers: 500,
  concurrentUsers: 50,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
  testDuration: 600,    // 10 –º–∏–Ω—É—Ç
  databaseCheckInterval: 30,
  maxRetries: 2,        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ—Ç—Ä–∞–∏
  browserTimeout: 30000, // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
  delayBetweenActions: 500, // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
  smsDelay: 2000,      // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É SMS
  realUIMode: true
};

console.log('üöÄ MASSIVE LOAD TEST - 500 USERS IN 10 MINUTES');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üéØ Target: ${config.targetUrl}`);
console.log(`üë• Total Users: ${config.totalUsers}`);
console.log(`‚è±Ô∏è  Duration: ${config.testDuration}s (10 minutes)`);
console.log(`üîÑ Concurrent: ${config.concurrentUsers}`);
console.log(`üñ±Ô∏è  Real UI: ENABLED (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)`);
console.log(`‚è∞ SMS Delay: ${config.smsDelay}ms`);
console.log(`üîç Database Checks: EVERY ${config.databaseCheckInterval}s`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

let activeUsers = 0;
let completedUsers = 0;
let totalActions = 0;
let successfulActions = 0;
let failedActions = 0;
let startTime = Date.now();
let databaseStats = { users: 0, orders: 0, messages: 0, videos: 0 };
let lastSmsTime = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
let globalData = {
  createdOrders: [],
  createdVideos: [],
  activeChats: [],
  subscriptions: [],
  likes: [],
  comments: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    const usersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM users;"');
    const usersCount = parseInt(usersResult.stdout.trim()) || 0;
    
    const ordersResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM orders;"');
    const ordersCount = parseInt(ordersResult.stdout.trim()) || 0;
    
    const messagesResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM messages;"');
    const messagesCount = parseInt(messagesResult.stdout.trim()) || 0;
    
    const videosResult = await execAsync('docker exec mebelplace-postgres-prod psql -U mebelplace -d mebelplace_prod -t -c "SELECT COUNT(*) FROM videos;"');
    const videosCount = parseInt(videosResult.stdout.trim()) || 0;
    
    databaseStats = { users: usersCount, orders: ordersCount, messages: messagesCount, videos: videosCount };
    
    console.log(`üìä DATABASE CHECK: Users: ${usersCount}, Orders: ${ordersCount}, Messages: ${messagesCount}, Videos: ${videosCount}`);
    
  } catch (error) {
    console.log(`‚ùå Database check failed: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function closeModal(page) {
  try {
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ
    await page.evaluate(() => {
      const modal = document.querySelector('div.fixed.inset-0.bg-black.z-40');
      if (modal) {
        modal.style.display = 'none';
        modal.remove();
      }
    });
    
    await page.waitForTimeout(200);
    return true;
    
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è SMS rate limit (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function waitForSmsRateLimit() {
  const now = Date.now();
  const timeSinceLastSms = now - lastSmsTime;
  
  if (timeSinceLastSms < config.smsDelay) {
    const waitTime = config.smsDelay - timeSinceLastSms;
    await new Promise(resolve => setTimeout(resolve, waitTime));
  }
  
  lastSmsTime = Date.now();
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createOptimizedUser(userId) {
  const browser = await chromium.launch({ 
    headless: true,
    args: [
      '--no-sandbox', 
      '--disable-setuid-sandbox', 
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor'
    ]
  });
  
  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 }, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
  });
  
  const page = await context.newPage();
  
  try {
    console.log(`üåê User ${userId}: –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...`);
    
    // –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
    await page.goto(config.targetUrl, { 
      waitUntil: 'domcontentloaded', // –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º networkidle
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await closeModal(page);
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = userId % 2 === 0 ? 'client' : 'master';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.goto(`${config.targetUrl}/register`, { 
      waitUntil: 'domcontentloaded',
      timeout: config.browserTimeout 
    });
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneNumber = `+7777${String(userId).padStart(7, '0')}`;
    const username = userRole === 'client' ? `Client${userId}` : `Master${userId}`;
    
    // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    await page.fill('input[placeholder="+7XXXXXXXXXX"]', phoneNumber);
    await page.fill('input[placeholder="username"]', username);
    await page.fill('input[placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"]', 'testpass123');
    await page.fill('input[placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"]', 'testpass123');
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ñ–¥–µ–º SMS rate limit
    await waitForSmsRateLimit();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–æ–ª—É—á–∞–µ–º SMS –∫–æ–¥ –∏–∑ API –æ—Ç–≤–µ—Ç–∞
    let smsCode = null;
    
    page.on('response', async response => {
      if (response.url().includes('/api/auth/send-sms-code') && response.status() === 200) {
        try {
          const result = await response.json();
          if (result.success && result.code) {
            smsCode = result.code;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    });
    
    // –ñ–¥–µ–º SMS –∫–æ–¥ –¥–æ 10 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    while (!smsCode && attempts < 20) {
      await page.waitForTimeout(500);
      attempts++;
    }
    
    // –ï—Å–ª–∏ SMS –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É–µ–º API –Ω–∞–ø—Ä—è–º—É—é
    if (!smsCode) {
      try {
        const response = await fetch('https://mebelplace.com.kz/api/auth/send-sms-code', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phone: phoneNumber })
        });
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.code) {
            smsCode = result.code;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
    if (!smsCode) {
      smsCode = '123456';
    }
    
    // –ë—ã—Å—Ç—Ä–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞
    await page.fill('input[placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"]', smsCode);
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥
    await page.click('button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")');
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const currentUrl = page.url();
    if (currentUrl.includes('/sms-verification')) {
      const errorText = await page.textContent('body');
      if (errorText.includes('already exists') || errorText.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        console.log(`‚úÖ User ${userId}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        successfulActions++;
      } else {
        console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
        failedActions++;
      }
    } else {
      console.log(`‚úÖ User ${userId}: –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      successfulActions++;
    }
    
    totalActions++;
    
    // –ë—ã—Å—Ç—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (userRole === 'client') {
      await executeQuickClientActions(page, userId);
    } else {
      await executeQuickMasterActions(page, userId);
    }
    
    console.log(`üéâ User ${userId}: –ó–∞–≤–µ—Ä—à–∏–ª –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!`);
    completedUsers++;
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  } finally {
    await browser.close();
    activeUsers--;
  }
}

// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
async function executeQuickClientActions(page, userId) {
  console.log(`üë§ User ${userId}: –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ö–õ–ò–ï–ù–¢–ê`);
  
  try {
    // 1. –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await page.goto(`${config.targetUrl}/masters`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –º–∞—Å—Ç–µ—Ä–æ–≤`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeButtons = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), .subscribe-btn');
    const subscribeCount = await subscribeButtons.count();
    
    if (subscribeCount > 0) {
      for (let i = 0; i < Math.min(2, subscribeCount); i++) {
        try {
          await subscribeButtons.nth(i).click();
          console.log(`üë§ User ${userId}: –ü–æ–¥–ø–∏—Å–∞–ª—Å—è ${i + 1}`);
          successfulActions++;
          totalActions++;
          globalData.subscriptions.push({ clientId: userId, masterIndex: i });
          
          await page.waitForTimeout(config.delayBetweenActions);
        } catch (error) {
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await page.goto(`${config.targetUrl}/orders/create`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const orderData = {
      title: `–ó–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`,
      description: `–ù—É–∂–Ω–∞ –º–µ–±–µ–ª—å. –ë—é–¥–∂–µ—Ç 100000 —Ç–µ–Ω–≥–µ.`,
      budget: '100000'
    };
    
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(orderData.title);
      successfulActions++;
      totalActions++;
    }
    
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(orderData.description);
      successfulActions++;
      totalActions++;
    }
    
    const budgetInput = page.locator('input[name*="budget"], input[placeholder*="–±—é–¥–∂–µ—Ç"]').first();
    if (await budgetInput.count() > 0) {
      await budgetInput.fill(orderData.budget);
      successfulActions++;
      totalActions++;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const submitButton = page.locator('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–∫–∞–∑`);
      successfulActions++;
      totalActions++;
      
      globalData.createdOrders.push({
        id: `order_${userId}_${Date.now()}`,
        clientId: userId,
        title: orderData.title,
        status: 'pending',
        createdAt: new Date()
      });
    }
    
    // 3. –ß–∞—Ç
    await page.goto(`${config.targetUrl}/chat`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
    if (await messageInput.count() > 0) {
      const messages = [
        `–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å.`
      ];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      
      await messageInput.fill(randomMessage);
      await messageInput.press('Enter');
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`);
      successfulActions++;
      totalActions++;
      
      globalData.activeChats.push({
        clientId: userId,
        message: randomMessage,
        timestamp: new Date()
      });
    }
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–∏–µ–Ω—Ç–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
async function executeQuickMasterActions(page, userId) {
  console.log(`üë§ User ${userId}: –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ú–ê–°–¢–ï–†–ê`);
  
  try {
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    await page.goto(`${config.targetUrl}/profile`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const nameInput = page.locator('input[name*="name"], input[placeholder*="–∏–º—è"]').first();
    if (await nameInput.count() > 0) {
      await nameInput.fill(`–ú–∞—Å—Ç–µ—Ä ${userId}`);
      successfulActions++;
      totalActions++;
    }
    
    const bioInput = page.locator('textarea[name*="bio"], textarea[placeholder*="–æ —Å–µ–±–µ"]').first();
    if (await bioInput.count() > 0) {
      await bioInput.fill(`–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä. –û–ø—ã—Ç 5 –ª–µ—Ç. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞!`);
      successfulActions++;
      totalActions++;
    }
    
    const saveButton = page.locator('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")').first();
    if (await saveButton.count() > 0) {
      await saveButton.click();
      console.log(`üë§ User ${userId}: –°–æ—Ö—Ä–∞–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å`);
      successfulActions++;
      totalActions++;
    }
    
    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
    await page.goto(`${config.targetUrl}/create-video-ad`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const videoData = {
      title: `–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ ${userId}`,
      description: `–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!`
    };
    
    const titleInput = page.locator('input[name*="title"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]').first();
    if (await titleInput.count() > 0) {
      await titleInput.fill(videoData.title);
      successfulActions++;
      totalActions++;
    }
    
    const descInput = page.locator('textarea[name*="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]').first();
    if (await descInput.count() > 0) {
      await descInput.fill(videoData.description);
      successfulActions++;
      totalActions++;
    }
    
    const submitButton = page.locator('button[type="submit"], button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å")').first();
    if (await submitButton.count() > 0) {
      await submitButton.click();
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ`);
      successfulActions++;
      totalActions++;
      
      globalData.createdVideos.push({
        id: `video_${userId}_${Date.now()}`,
        masterId: userId,
        title: videoData.title,
        createdAt: new Date()
      });
    }
    
    // 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑—ã
    await page.goto(`${config.targetUrl}/master/orders`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –°–º–æ—Ç—Ä–∏—Ç –∑–∞–∫–∞–∑—ã`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const orderCards = page.locator('.order-card, [data-testid="order-card"]');
    const orderCount = await orderCards.count();
    
    if (orderCount > 0) {
      for (let i = 0; i < Math.min(2, orderCount); i++) {
        try {
          const orderCard = orderCards.nth(i);
          const respondButton = orderCard.locator('button:has-text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")').first();
          
          if (await respondButton.count() > 0) {
            await respondButton.click();
            console.log(`üë§ User ${userId}: –û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑ ${i + 1}`);
            successfulActions++;
            totalActions++;
            
            await page.waitForTimeout(config.delayBetweenActions);
            
            const responseText = `–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å! –û–ø—ã—Ç 5 –ª–µ—Ç. –¶–µ–Ω–∞ 80000 —Ç–µ–Ω–≥–µ.`;
            const responseInput = page.locator('textarea[placeholder*="–æ—Ç–∫–ª–∏–∫"]').first();
            
            if (await responseInput.count() > 0) {
              await responseInput.fill(responseText);
              await page.waitForTimeout(config.delayBetweenActions);
              
              const submitResponseButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫")').first();
              if (await submitResponseButton.count() > 0) {
                await submitResponseButton.click();
                console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫ ${i + 1}`);
                successfulActions++;
                totalActions++;
              }
            }
          }
        } catch (error) {
          failedActions++;
          totalActions++;
        }
      }
    }
    
    // 4. –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    await page.goto(`${config.targetUrl}/chat`, { waitUntil: 'domcontentloaded' });
    console.log(`üë§ User ${userId}: –û—Ç–∫—Ä—ã–ª —á–∞—Ç`);
    successfulActions++;
    totalActions++;
    
    await page.waitForTimeout(config.delayBetweenActions);
    
    const messageInput = page.locator('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]').first();
    if (await messageInput.count() > 0) {
      const messages = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –∑–∞–∫–∞–∑.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—ã.`,
        `–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.`
      ];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      
      await messageInput.fill(randomMessage);
      await messageInput.press('Enter');
      console.log(`üë§ User ${userId}: –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É`);
      successfulActions++;
      totalActions++;
      
      globalData.activeChats.push({
        masterId: userId,
        message: randomMessage,
        timestamp: new Date()
      });
    }
    
  } catch (error) {
    console.log(`‚ùå User ${userId}: –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–∞—Å—Ç–µ—Ä–∞ - ${error.message}`);
    failedActions++;
    totalActions++;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runMassiveLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ 500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 10 –º–∏–Ω—É—Ç...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const databaseInterval = setInterval(checkDatabase, config.databaseCheckInterval * 1000);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é
  const userPromises = [];
  
  for (let i = 1; i <= config.totalUsers; i++) {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while (activeUsers >= config.concurrentUsers) {
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    activeUsers++;
    
    const userPromise = createOptimizedUser(i).catch(error => {
      console.log(`‚ùå User ${i}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      activeUsers--;
    });
    
    userPromises.push(userPromise);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  const testStartTime = Date.now();
  while (Date.now() - testStartTime < config.testDuration * 1000) {
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const elapsed = Math.floor((Date.now() - testStartTime) / 1000);
    const remaining = config.testDuration - elapsed;
    
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed}s/${config.testDuration}s (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}s)`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}/${config.totalUsers}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${successfulActions}/${totalActions} —É—Å–ø–µ—à–Ω–æ (${failedActions} –æ—à–∏–±–æ–∫)`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
    console.log(`üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: ${globalData.activeChats.length}`);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
    console.log(`üé• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
    console.log(`üë• –ü–æ–¥–ø–∏—Å–æ–∫: ${globalData.subscriptions.length}`);
    console.log('‚îÄ'.repeat(80));
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  clearInterval(databaseInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await checkDatabase();
  
  console.log('üèÅ –ú–ê–°–°–ò–í–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor((Date.now() - startTime) / 1000)}s`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.totalUsers}`);
  console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${completedUsers}`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${successfulActions}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${failedActions}`);
  console.log(`üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalActions > 0 ? Math.round((successfulActions / totalActions) * 100) : 0}%`);
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:`, databaseStats);
  console.log(`üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: ${globalData.activeChats.length}`);
  console.log(`üìù –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${globalData.createdOrders.length}`);
  console.log(`üé• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${globalData.createdVideos.length}`);
  console.log(`‚ù§Ô∏è  –õ–∞–π–∫–æ–≤: ${globalData.likes.length}`);
  console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${globalData.comments.length}`);
  console.log(`üë• –ü–æ–¥–ø–∏—Å–æ–∫: ${globalData.subscriptions.length}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runMassiveLoadTest().catch(console.error);
