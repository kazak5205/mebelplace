const { chromium } = require('playwright');

// üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê –ò –ß–ê–¢–ê
async function diagnosePages() {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 }
  });
  
  const page = await context.newPage();
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è
    console.log('üîê –õ–æ–≥–∏–Ω–∏–º—Å—è...');
    await page.goto('https://mebelplace.com.kz/login', { waitUntil: 'networkidle' });
    await page.waitForTimeout(2000);
    
    await page.locator('input[placeholder="+7XXXXXXXXXX"]').fill('+77770000420');
    await page.locator('input[type="password"]').fill('testpass123');
    await page.locator('button:has-text("–í–æ–π—Ç–∏")').click();
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
    await page.goto('https://mebelplace.com.kz/orders/create', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    const ordersHtml = await page.content();
    console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–≤—ã–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(ordersHtml.substring(0, 1500));
    
    // –ò—â–µ–º –≤—Å–µ input –∏ textarea –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
    const orderInputs = await page.locator('input, textarea').all();
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${orderInputs.length} –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤:`);
    
    for (let i = 0; i < orderInputs.length; i++) {
      const input = orderInputs[i];
      const tagName = await input.evaluate(el => el.tagName);
      const type = await input.getAttribute('type');
      const placeholder = await input.getAttribute('placeholder');
      const name = await input.getAttribute('name');
      const className = await input.getAttribute('class');
      
      console.log(`  ${tagName} ${i + 1}: type="${type}", placeholder="${placeholder}", name="${name}", class="${className}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
    console.log('\nüí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞...');
    await page.goto('https://mebelplace.com.kz/chat', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    const chatHtml = await page.content();
    console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(chatHtml.substring(0, 1500));
    
    // –ò—â–µ–º –≤—Å–µ input –∏ textarea –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–∞—Ç–∞
    const chatInputs = await page.locator('input, textarea').all();
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${chatInputs.length} –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–∞—Ç–∞:`);
    
    for (let i = 0; i < chatInputs.length; i++) {
      const input = chatInputs[i];
      const tagName = await input.evaluate(el => el.tagName);
      const type = await input.getAttribute('type');
      const placeholder = await input.getAttribute('placeholder');
      const name = await input.getAttribute('name');
      const className = await input.getAttribute('class');
      
      console.log(`  ${tagName} ${i + 1}: type="${type}", placeholder="${placeholder}", name="${name}", class="${className}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('\nüè† –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('https://mebelplace.com.kz/', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    const mainHtml = await page.content();
    console.log('üìÑ HTML –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(mainHtml.substring(0, 1500));
    
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const mainButtons = await page.locator('button, a').all();
    console.log(`\nüîò –ù–∞–π–¥–µ–Ω–æ ${mainButtons.length} –∫–Ω–æ–ø–æ–∫/—Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:`);
    
    for (let i = 0; i < Math.min(10, mainButtons.length); i++) {
      const button = mainButtons[i];
      const tagName = await button.evaluate(el => el.tagName);
      const text = await button.textContent();
      const href = await button.getAttribute('href');
      const className = await button.getAttribute('class');
      
      console.log(`  ${tagName} ${i + 1}: text="${text?.trim()}", href="${href}", class="${className}"`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnosePages().catch(console.error);
